package proyecto.analizadores;
import java_cup.runtime.*;
import proyecto.main.*;
import java.util.ArrayList;
import proyecto.estructuras.*;

parser code
{:  
    public static int contador=1;
    public static int num=1;
    public static NodoAST nodo_aux = new NodoAST();
    public static ArrayList<NodoAST> lista_auxNodo = new ArrayList<NodoAST>();
    //public static Datos.ArbolAST Datos.arbol = new Datos.ArbolAST();
    //public static ArrayList<ErrorA> errores = new ArrayList<ErrorA>();
    
    
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------
:}

action code {:

:}

terminal String igual, suma, por, disyuncion, potencia, modulo, punto, interrogacionA, interrogacionC, resta, coma, colocho;
terminal String porcentaje, dospuntos, puntocoma, mayor, menor, cllave, allave, salto, comillasimple, comillasd;
terminal String tnumero, tcadena, tbooleano, tcaracter, inicio, fin, ingresar, como, con_valor, si, entonces, de_lo_contrario, o_si, fin_si, segun, hacer, fin_segun;
terminal String para, hasta, con, incremental, fin_para, mientras, fin_mientras, hasta_que, repetir, retornar, metodo, fin_metodo, verdadero, falso;
terminal String funcion, fin_funcion, con_parametros, ejecutar, imprimir, imprimir_nl, cadena, identificador, var_identificador, digito, decimal, caracter;

non terminal COMIENZO, CONTENIDO, CODIGO, DECLARACION, TIPODATO, EXPRESION;
non terminal INSTRUCCIONES, LISTA_NOM, NOMBRES, NOMBRE;

start with COMIENZO;

COMIENZO ::= CONTENIDO{:
                        
                                                
                        :};
CONTENIDO ::= inicio:varin CODIGO fin:varfin {: 
                                                
                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = new ArrayList<NodoAST>();
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                t_codigo.Nodos.add(nodo_aux);
                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                Datos.arbol.raiz.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                :};

CODIGO ::= INSTRUCCIONES {:
                            NodoAST t_instrucciones = new NodoAST();
                            t_instrucciones.Nodos = lista_auxNodo; 
                            System.out.println("Se agregaron nodos a <Instrucciones>");
                            t_instrucciones.setToken("<Instrucciones>");
                            t_instrucciones.setTipo("Instrucciones");
                            System.out.println(t_instrucciones.token + " 2");


                            nodo_aux = t_instrucciones;
                        :} 
                    |CODIGO INSTRUCCIONES;
INSTRUCCIONES ::= DECLARACION puntocoma:var_pyc{:
                                            NodoAST t_declaracion = new NodoAST();
                                            t_declaracion.Nodos = new ArrayList<NodoAST>(); //cambiar por lista auxiliar
                                            t_declaracion.setToken("<Declaracion>");
                                            t_declaracion.setTipo("Declaracion");

                                            NodoAST t_pyc = new NodoAST();
                                            t_pyc.Nodos = new ArrayList<NodoAST>(); 
                                            t_pyc.setToken("<T_pto_coma>");
                                            t_pyc.setTipo("punto y coma");
                                            
                                            NodoAST n_pyc = new NodoAST();
                                            n_pyc.setToken(var_pyc);
                                            n_pyc.setTipo("token");
                                            
                                            t_pyc.Nodos.add(n_pyc);
                                            System.out.println("se agrego token punto y coma");
                                            
                                            
                                            
                                            lista_auxNodo= new ArrayList<NodoAST>();
                                            lista_auxNodo.add(t_declaracion);
                                            lista_auxNodo.add(t_pyc);

                                        :}
                    |LISTA_NOM puntocoma;
DECLARACION ::= ingresar var_identificador como TIPODATO con_valor EXPRESION;

LISTA_NOM ::= var_identificador igual NOMBRES;
NOMBRES ::= NOMBRE
            |NOMBRES NOMBRE;

NOMBRE ::=  var_identificador coma
            |var_identificador;

TIPODATO ::= tcadena
                |tnumero
                |tbooleano
                |tcaracter;
EXPRESION ::= digito
                |decimal
                |cadena
                |caracter
                |verdadero
                |falso;



/* para los puntos colocar en parser


*/
