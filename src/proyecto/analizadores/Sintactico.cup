package proyecto.analizadores;
import java_cup.runtime.*;
import proyecto.main.*;
import java.util.ArrayList;
import proyecto.estructuras.*;

parser code
{:  
    public static int contador=1;
    public static int num=1;
    public static NodoAST nodo_aux = new NodoAST();
    public static NodoAST nodo_aux_td = new NodoAST();
    public static NodoAST nodo_aux_val = new NodoAST();

    public static ArrayList<NodoAST> lista_auxNodo = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo2 = new ArrayList<NodoAST>();

    //public static Datos.ArbolAST Datos.arbol = new Datos.ArbolAST();
    //public static ArrayList<ErrorA> errores = new ArrayList<ErrorA>();
    
    
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------
:}

action code {:

:}

terminal String igual, suma, por, disyuncion, potencia, modulo, punto, interrogacionA, interrogacionC, resta, coma, colocho;
terminal String porcentaje, dospuntos, puntocoma, mayor, menor, cllave, allave, salto, comillasimple, comillasd;
terminal String tnumero, tcadena, tbooleano, tcaracter, inicio, fin, ingresar, como, con_valor, si, entonces, de_lo_contrario, o_si, fin_si, segun, hacer, fin_segun;
terminal String para, hasta, con, incremental, fin_para, mientras, fin_mientras, hasta_que, repetir, retornar, metodo, fin_metodo, verdadero, falso;
terminal String funcion, fin_funcion, con_parametros, ejecutar, imprimir, imprimir_nl, cadena, identificador, var_identificador, digito, decimal, caracter;

non terminal COMIENZO, CONTENIDO, CODIGO, DECLARACION, TIPODATO, EXPRESIONNUM;
non terminal INSTRUCCIONES, LISTA_NOM, NOMBRES, NOMBRE;

start with COMIENZO;

COMIENZO ::= CONTENIDO{:
                        
                                                
                        :};
CONTENIDO ::= inicio:varin CODIGO fin:varfin {: 
                                                
                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = new ArrayList<NodoAST>();
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                t_codigo.Nodos.add(nodo_aux); //insertando nodos inferiores
                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                Datos.arbol.raiz.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                :};

CODIGO ::= INSTRUCCIONES {:
                            NodoAST t_instrucciones = new NodoAST();
                            t_instrucciones.Nodos = lista_auxNodo2; //acarreo de nodos inferiores
                            System.out.println("Se agregaron nodos a <Instrucciones>");
                            t_instrucciones.setToken("<Instrucciones>");
                            t_instrucciones.setTipo("Instrucciones");
                            System.out.println(t_instrucciones.token + " 2");


                            nodo_aux = t_instrucciones;
                        :} 
                    |CODIGO INSTRUCCIONES;
INSTRUCCIONES ::= DECLARACION puntocoma:var_pyc{:
                                            NodoAST t_declaracion = new NodoAST();
                                            t_declaracion.Nodos = lista_auxNodo; //acarreo de nodos inferiores
                                            t_declaracion.setToken("<Declaracion>");
                                            t_declaracion.setTipo("Declaracion");

                                            NodoAST t_pyc = new NodoAST();
                                            t_pyc.Nodos = new ArrayList<NodoAST>(); 
                                            t_pyc.setToken("<T_pto_coma>");
                                            t_pyc.setTipo("t punto y coma");
                                            
                                            NodoAST n_pyc = new NodoAST();
                                            n_pyc.setToken(var_pyc);
                                            n_pyc.setTipo("token");
                                            
                                            t_pyc.Nodos.add(n_pyc);
                                            t_declaracion.Nodos.add(t_pyc);
                                            System.out.println("se agrego token punto y coma");
                                            
                                            
                                            lista_auxNodo = new ArrayList<NodoAST>();
                                            lista_auxNodo2.add(t_declaracion);

                                        :}
                    |LISTA_NOM puntocoma;
DECLARACION ::= ingresar:var_ing var_identificador:var_id como:var_como TIPODATO con_valor:var_con_valor EXPRESIONNUM{:
                                            NodoAST t_ingresar = new NodoAST();
                                            t_ingresar.Nodos = new ArrayList<NodoAST>(); 
                                            t_ingresar.setToken("<T_ingresar>");
                                            t_ingresar.setTipo("t ingresar");

                                            NodoAST t_identificador = new NodoAST();
                                            t_identificador.Nodos = new ArrayList<NodoAST>(); 
                                            t_identificador.setToken("<T_identificador>");
                                            t_identificador.setTipo("t identificador");
                                            
                                            NodoAST t_como = new NodoAST();
                                            t_como.Nodos = new ArrayList<NodoAST>(); 
                                            t_como.setToken("<T_como>");
                                            t_como.setTipo("t como");
                                            
                                            NodoAST t_con_valor = new NodoAST();
                                            t_con_valor.Nodos = new ArrayList<NodoAST>(); 
                                            t_con_valor.setToken("<T_con_valor>");
                                            t_con_valor.setTipo("t con valor");

                                            NodoAST n_ingresar = new NodoAST();
                                            n_ingresar.setToken(var_ing);
                                            n_ingresar.setTipo("token");                                           
                                            NodoAST n_identificador = new NodoAST();
                                            n_identificador.setToken(var_id);
                                            n_identificador.setTipo("token");
                                            NodoAST n_como = new NodoAST();
                                            n_como.setToken(var_como);
                                            n_como.setTipo("token");
                                            NodoAST t_tipodato = new NodoAST();                  
                                            t_tipodato.Nodos = new ArrayList<NodoAST>(); 
                                            t_tipodato.setToken("<Tipo_Dato>");
                                            t_tipodato.setTipo("tipo_dato");
                                            NodoAST n_con_valor = new NodoAST();
                                            n_con_valor.setToken(var_con_valor);
                                            n_con_valor.setTipo("token");
                                            NodoAST t_expresion = new NodoAST();        
                                            t_expresion.Nodos = new ArrayList<NodoAST>();
                                            t_expresion.setToken("<Expresion>");
                                            t_expresion.setTipo("expresion");

                                            t_ingresar.Nodos.add(n_ingresar);
                                            t_identificador.Nodos.add(n_identificador);
                                            t_como.Nodos.add(n_como);
                                            t_con_valor.Nodos.add(n_con_valor);
                                            t_tipodato.Nodos.add(nodo_aux_td); //acarreo de nodo
                                            t_expresion.Nodos.add(nodo_aux_val); //acarreo de nodo

                                            lista_auxNodo.add(t_ingresar);  
                                            lista_auxNodo.add(t_identificador);
                                            lista_auxNodo.add(t_como);  
                                            lista_auxNodo.add(t_tipodato);
                                            lista_auxNodo.add(t_con_valor);  
                                            lista_auxNodo.add(t_expresion);

                                            System.out.println("Se agregaron con exito los nodos de la produccion Declaracion");

                                        
                                        
                                        
                                        
                                        :};

LISTA_NOM ::= var_identificador igual NOMBRES;
NOMBRES ::= NOMBRE
            |NOMBRES NOMBRE;

NOMBRE ::=  var_identificador coma
            |var_identificador;

TIPODATO ::= tcadena:var_tipod{:
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    :}
                |tnumero:var_tipod{:
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    :}
                |tbooleano:var_tipod{:
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    :}
                |tcaracter:var_tipod{:
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    :};

EXPRESIONNUM ::= digito:var_val{:
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    :}
                |decimal:var_val{:
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    :}
                |cadena:var_val{:
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    :}
                |caracter:var_val{:
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    :}
                |verdadero:var_val{:
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    :}
                |falso:var_val{:
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    :};



/* para los puntos colocar en parser


*/
