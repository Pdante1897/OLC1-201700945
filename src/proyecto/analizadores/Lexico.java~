/* The following code was generated by JFlex 1.7.0 */

package proyecto.analizadores;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/gerar/Desktop/OLC1-201700945/src/proyecto/analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\13\1\16\1\16\1\15\22\0\1\1\1\22\1\12"+
    "\1\11\1\6\1\47\1\11\1\5\1\63\1\62\1\21\1\24\1\45"+
    "\1\40\1\4\1\20\12\3\1\50\1\51\1\11\1\23\1\41\1\44"+
    "\1\11\1\35\1\66\1\32\1\37\1\30\1\61\1\54\1\70\1\34"+
    "\1\72\1\2\1\56\1\36\1\31\1\26\1\25\1\71\1\53\1\60"+
    "\1\27\1\55\1\67\2\2\1\52\1\2\1\64\1\14\1\65\1\11"+
    "\1\17\1\11\1\35\1\66\1\32\1\37\1\30\1\61\1\54\1\70"+
    "\1\34\1\72\1\2\1\56\1\36\1\31\1\26\1\25\1\71\1\53"+
    "\1\60\1\27\1\55\1\67\2\2\1\52\1\2\1\7\1\42\1\10"+
    "\1\46\6\0\1\16\71\0\1\43\160\0\2\33\115\0\1\57\u1ea8\0"+
    "\1\16\1\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\5\3\1\1\4\3"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\3\1\1\2\3\1\24\1\25\1\26\1\27"+
    "\3\3\4\0\1\30\1\0\1\31\1\32\1\33\3\0"+
    "\3\3\1\34\1\3\1\0\6\3\2\0\5\3\1\0"+
    "\3\3\1\35\1\3\1\0\1\36\1\3\1\36\1\0"+
    "\6\3\1\37\1\40\1\0\1\41\1\2\1\0\2\3"+
    "\1\0\2\3\1\0\2\3\1\42\1\3\1\43\3\3"+
    "\4\0\4\3\1\44\1\45\2\3\1\0\5\3\1\0"+
    "\1\3\2\46\5\3\1\0\1\3\1\0\1\2\1\3"+
    "\1\47\2\50\1\3\2\0\5\3\1\51\2\3\4\0"+
    "\6\3\1\0\5\3\1\0\1\3\1\0\1\3\1\0"+
    "\5\3\1\0\1\3\1\0\2\3\2\0\10\3\4\0"+
    "\5\3\1\52\1\0\1\3\1\53\3\3\2\54\4\0"+
    "\4\3\2\55\1\0\3\3\1\56\2\57\1\60\2\3"+
    "\2\0\3\3\1\61\2\3\1\62\1\3\1\0\1\63"+
    "\2\0\1\3\1\63\2\3\1\64\1\3\1\0\3\3"+
    "\1\0\2\3\4\0\1\65\1\0\4\3\1\65\1\3"+
    "\1\0\3\3\1\0\1\3\1\0\2\3\2\0\6\3"+
    "\3\0\4\3\1\0\3\3\2\66\1\3\5\0\5\3"+
    "\2\67\1\70\1\3\1\0\1\3\2\71\2\72\1\73"+
    "\1\0\1\73\1\3\1\74\2\3\1\75\1\0\1\76"+
    "\1\77\1\3\1\76\1\77\1\3\2\100\2\3\1\101"+
    "\1\102\4\0\1\102\5\3\1\0\1\3\1\0\2\3"+
    "\1\103\2\0\2\3\1\0\1\3\1\0\2\3\2\0"+
    "\1\104\1\0\2\3\1\104\1\3\1\105\2\106\1\0"+
    "\2\3\2\0\2\3\1\0\1\3\1\0\2\3\1\107"+
    "\2\0\1\107\2\3\1\0\2\3\1\110\1\111\1\110"+
    "\1\111\1\0\1\3\1\0\2\3\1\0\1\112\1\3"+
    "\1\112\2\113\1\3\1\0\1\3\1\0\2\3\2\114"+
    "\1\3\2\115\2\116\1\3\2\117\1\0\1\3\2\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\u0127\0\u0162"+
    "\0\166\0\u019d\0\u01d8\0\u0213\0\73\0\73\0\73\0\u024e"+
    "\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u04d7\0\u0512\0\u054d\0\u0588\0\73\0\73"+
    "\0\73\0\73\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0162\0\73\0\u0725\0\73\0\73\0\73\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\261\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\73\0\u0d23\0\u0d5e\0\73\0\u0d99\0\261\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0674\0\73\0\u0f71"+
    "\0\u0760\0\73\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\261\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\261\0\261\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u07d6"+
    "\0\u195a\0\261\0\73\0\261\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\261\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
    "\0\73\0\261\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\73\0\261\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\261\0\u2bca\0\u2c05\0\73\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\261\0\u2ddd\0\u2e18\0\261\0\u2e53"+
    "\0\u2e8e\0\73\0\u2ec9\0\u2f04\0\u2f3f\0\261\0\u2f7a\0\u2fb5"+
    "\0\261\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\73\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\u33a0\0\261\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\73\0\261\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\73\0\261"+
    "\0\261\0\u3d13\0\u3d4e\0\u3d89\0\73\0\261\0\73\0\261"+
    "\0\73\0\u3dc4\0\261\0\u3dff\0\261\0\u3e3a\0\u3e75\0\261"+
    "\0\u3eb0\0\73\0\u3eeb\0\u3f26\0\261\0\u3f61\0\u3f9c\0\73"+
    "\0\261\0\u3fd7\0\u4012\0\261\0\73\0\u404d\0\u4088\0\u40c3"+
    "\0\u40fe\0\261\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\261\0\u4387\0\u43c2\0\u43fd"+
    "\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5"+
    "\0\73\0\u4610\0\u464b\0\u4686\0\261\0\u46c1\0\261\0\73"+
    "\0\261\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\73\0\u49c0\0\u49fb"+
    "\0\261\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\73\0\73"+
    "\0\261\0\261\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\73\0\u4cbf\0\261\0\73\0\261\0\u4cfa\0\u4d35\0\u4d70"+
    "\0\u4dab\0\u4de6\0\u4e21\0\73\0\261\0\u4e5c\0\73\0\261"+
    "\0\73\0\261\0\u4e97\0\73\0\261\0\u4ed2\0\u4f0d\0\73"+
    "\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\4\2\1\10"+
    "\1\11\1\12\1\3\1\0\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\4\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\2\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\4"+
    "\1\43\3\4\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\2\4\74\0\1\3\11\0"+
    "\1\3\1\0\1\3\57\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\3\0\1\5\1\56\70\0\2\57\2\0\1\60"+
    "\2\0\1\57\2\0\1\57\2\0\2\57\1\0\1\57"+
    "\2\0\6\57\1\0\4\57\2\0\1\57\7\0\5\57"+
    "\1\0\13\57\12\61\1\62\1\61\1\63\56\61\5\0"+
    "\1\64\4\0\1\65\16\0\1\66\43\0\1\67\22\0"+
    "\6\67\1\0\4\67\12\0\5\67\1\0\2\67\4\0"+
    "\5\67\20\0\1\70\1\71\53\0\2\4\13\0\1\4"+
    "\5\0\1\4\1\72\4\4\1\0\1\4\1\73\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\74\5\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\75\3\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\4\4\1\76\1\4\1\0\4\4"+
    "\12\0\5\4\1\77\1\100\1\4\4\0\4\4\1\101"+
    "\2\0\2\4\13\0\1\4\5\0\1\4\1\102\4\4"+
    "\1\0\4\4\12\0\3\4\1\103\1\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\1\4"+
    "\1\104\4\4\1\0\1\4\1\105\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\31\0\1\106\4\0\1\107"+
    "\36\0\2\4\13\0\1\4\5\0\4\4\1\110\1\4"+
    "\1\0\2\4\1\111\1\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\4\4"+
    "\1\112\1\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\1\4"+
    "\1\113\1\4\1\114\2\4\1\115\1\116\1\117\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\3\4\1\120\2\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\41\0\1\121"+
    "\33\0\2\4\13\0\1\4\5\0\3\4\1\122\2\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\30\0\1\123\2\0\2\124\40\0\2\4\13\0\1\4"+
    "\5\0\3\4\1\125\2\4\1\124\1\126\3\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\127\1\130\1\131\2\4\12\0"+
    "\3\4\1\132\1\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\1\4\1\133\4\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\3\4\1\134\2\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\0\1\4\1\135"+
    "\2\4\12\0\5\4\1\0\2\4\4\0\5\4\3\0"+
    "\1\136\74\0\1\137\72\0\1\137\1\0\1\140\63\0"+
    "\13\61\1\0\1\61\2\0\54\61\2\0\2\67\13\0"+
    "\1\141\5\0\6\67\1\0\4\67\12\0\5\67\1\0"+
    "\2\67\4\0\5\67\13\70\1\142\1\70\1\142\1\0"+
    "\54\70\21\71\1\143\1\0\50\71\2\0\2\4\13\0"+
    "\1\4\5\0\2\4\1\144\3\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\1\4\1\145"+
    "\3\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\5\4\1\146"+
    "\1\147\1\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\2\4\1\150\3\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\17\0\1\151\55\0\2\4"+
    "\13\0\1\152\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\3\4\1\153\2\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\2\4\1\154\3\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\2\4\1\155\1\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\4\4\1\156\1\4\1\0\2\4\1\157\1\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\3\4\1\160\12\0"+
    "\1\4\1\161\3\4\1\0\2\4\4\0\5\4\32\0"+
    "\1\162\2\163\17\0\1\164\43\0\1\165\47\0\2\4"+
    "\13\0\1\4\5\0\5\4\1\166\1\163\1\167\3\4"+
    "\12\0\2\4\1\170\2\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\1\171\5\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\0\3\4\1\172"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\3\4\1\173\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\2\4\1\174\1\4\1\175\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\30\0"+
    "\1\176\44\0\2\4\13\0\1\4\5\0\3\4\1\177"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\13\0\1\4\5\0\6\4\1\0"+
    "\4\4\12\0\1\200\4\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\201\5\0\6\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\1\202\1\4\1\203\3\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\54\0"+
    "\1\204\20\0\2\4\13\0\1\4\5\0\6\4\1\0"+
    "\4\4\12\0\2\4\1\205\2\4\1\0\2\4\4\0"+
    "\5\4\31\0\1\206\43\0\2\4\13\0\1\4\5\0"+
    "\4\4\1\207\1\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\4\4\1\210\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\4\4"+
    "\1\211\1\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\1\4"+
    "\1\212\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\213\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\5\4"+
    "\1\214\1\0\4\4\12\0\5\4\1\215\1\216\1\4"+
    "\4\0\5\4\3\0\1\217\67\0\20\71\1\220\1\143"+
    "\1\0\50\71\2\0\2\4\13\0\1\4\5\0\3\4"+
    "\1\221\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\1\4\1\222\2\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\33\0\2\223\40\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\223\1\224\3\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\225\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\33\0\2\226\2\0\1\227\35\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\226\1\230\2\4"+
    "\1\231\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\5\4\1\232\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\3\4\1\233\2\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\234\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\1\4\1\235\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\3\4\1\236\2\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\1\4\1\237\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\53\0\1\240\51\0\1\241"+
    "\113\0\1\242\72\0\1\243\21\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\1\4\1\244\3\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\5\4\1\245\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\1\4\1\246\3\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\1\4\1\247\3\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\250\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\251\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\31\0\1\252\43\0\2\4\13\0"+
    "\1\4\5\0\4\4\1\253\1\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\1\4\1\254\4\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\4\4\1\255"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\3\4\1\256\2\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\1\4\1\257\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\55\0\1\260\17\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\3\4"+
    "\1\261\1\4\1\0\2\4\4\0\5\4\17\0\1\262"+
    "\55\0\2\4\13\0\1\263\5\0\6\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\264\1\265\1\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\5\4\1\266\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\4\4\1\267\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\3\4\1\270\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\3\4"+
    "\1\271\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\27\0\1\272\45\0\2\4\13\0\1\4"+
    "\5\0\2\4\1\273\3\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\3\0\1\217\4\0\1\274"+
    "\64\0\2\4\13\0\1\4\5\0\4\4\1\275\1\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\4\4\1\276\1\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\54\0\1\277\51\0\2\300\40\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\2\4\1\301\2\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\300\1\302\3\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\3\4\1\303\1\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\1\4\1\304\3\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\305\5\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\1\4\1\306\3\4\2\0\2\4\13\0\1\4"+
    "\5\0\4\4\1\307\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\5\4\1\310\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\30\0\1\311\75\0\2\312\66\0"+
    "\1\313\75\0\2\314\40\0\2\4\13\0\1\4\5\0"+
    "\3\4\1\315\2\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\312\1\316\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\3\4"+
    "\1\317\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\314\1\320\3\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\13\0\1\4\5\0\6\4\1\0"+
    "\3\4\1\321\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\322\3\4\1\0\2\4\4\0\5\4"+
    "\27\0\1\323\45\0\2\4\13\0\1\4\5\0\2\4"+
    "\1\324\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\325\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\1\4"+
    "\1\326\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\2\4"+
    "\1\327\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\330\3\4\1\0\2\4"+
    "\4\0\5\4\31\0\1\331\43\0\2\4\13\0\1\4"+
    "\5\0\4\4\1\332\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\25\0\1\333\10\0\1\334"+
    "\20\0\2\335\1\336\13\0\2\4\13\0\1\4\5\0"+
    "\1\337\5\4\1\0\2\4\1\340\1\4\12\0\5\4"+
    "\1\335\1\341\1\342\4\0\5\4\26\0\1\343\46\0"+
    "\2\4\13\0\1\4\5\0\1\4\1\344\4\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\345\1\346\3\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\3\4\1\347\2\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\1\4\1\350\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\351\3\4\1\0\2\4\4\0\5\4\35\0\1\352"+
    "\37\0\2\4\13\0\1\4\5\0\6\4\1\0\1\4"+
    "\1\353\2\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\5\0\1\354\67\0\2\4\13\0\1\4\5\0\5\4"+
    "\1\355\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\13\0\1\4\5\0\5\4\1\356"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\55\0\1\357\76\0\1\360\13\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\3\4\1\361\1\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\5\4\1\0\1\4"+
    "\1\362\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\2\4\1\363\3\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\364\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\1\4\1\365\2\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\1\4\1\366\2\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\1\4\1\367\2\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\2\4\1\370\3\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\36\0\1\371\62\0\1\372\123\0"+
    "\2\373\50\0\1\374\36\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\2\4\1\375\1\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\376\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\5\4\1\373\1\377\1\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\2\4\1\u0100\1\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\1\4"+
    "\1\u0101\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\u0102\5\0\6\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\53\0\1\u0103\21\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\u0104\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\u0105\5\0\6\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\u0106\5\0\6\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\u0107\1\u0108\3\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\4\4\1\u0109\1\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\35\0\1\u010a\65\0"+
    "\1\u010b\2\0\2\u010c\66\0\1\u010d\2\0\2\u010e\113\0"+
    "\1\u010f\17\0\2\4\13\0\1\4\5\0\6\4\1\0"+
    "\1\4\1\u0110\2\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\13\0\1\4\5\0\3\4\1\u0111"+
    "\2\4\1\u010c\1\u0112\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\3\4"+
    "\1\u0113\2\4\1\u010e\1\u0114\3\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\3\4\1\u0115\1\4\1\0"+
    "\2\4\4\0\5\4\26\0\1\u0116\46\0\2\4\13\0"+
    "\1\4\5\0\1\4\1\u0117\4\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\1\4\1\u0118\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\3\4\1\u0119\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\17\0\1\u011a\55\0\2\4"+
    "\13\0\1\u011b\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\u011c\1\u011d\3\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\3\4\1\u011e\2\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\35\0\1\u011f\65\0\1\u0120\44\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\0\1\4\1\u0121"+
    "\2\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\3\4\1\u0122\2\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\0\1\4\1\u0123"+
    "\2\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u0124\3\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\0\4\4\12\0"+
    "\4\4\1\u0125\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\3\4\1\u0126\2\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\30\0\1\u0127"+
    "\77\0\1\u0128\70\0\2\u0129\40\0\2\4\13\0\1\4"+
    "\5\0\3\4\1\u012a\2\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\1\4\1\u012b\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\u0129\1\u012c\3\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\u012d\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\35\0\1\u012e\37\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\1\4\1\u012f\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\1\4\1\u0130\4\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\5\4\1\u0131\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\53\0\1\u0132\21\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\u0133\3\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\1\4\1\u0134\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\53\0\1\u0135"+
    "\46\0\1\u0136\73\0\1\u0137\116\0\1\u0138\47\0\1\u0139"+
    "\43\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u013a\3\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\2\4\1\u013b\3\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\3\4\1\u013c\2\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\2\4\1\u013d\2\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\4\4\1\u013e\1\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\31\0\1\u013f\43\0\2\4\13\0\1\4\5\0\4\4"+
    "\1\u0140\1\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\4\4"+
    "\1\u0141\1\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\3\4"+
    "\1\u0142\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\71\0\1\u0143\3\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\3\4\1\u0144\1\4\35\0\1\u0145\37\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\1\4\1\u0146\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\u0147\1\u0148\1\4\4\0\5\4\56\0\1\u0149\67\0"+
    "\1\u014a\21\0\2\4\13\0\1\4\5\0\6\4\1\0"+
    "\4\4\12\0\4\4\1\u014b\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u014c\3\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u014d\3\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\1\4"+
    "\1\u014e\2\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\1\4\1\u014f\4\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u0150\3\4\1\0\2\4\4\0\5\4"+
    "\31\0\1\u0151\114\0\1\u0152\72\0\1\u0153\21\0\2\4"+
    "\13\0\1\4\5\0\4\4\1\u0154\1\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\u0155\3\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\u0156\3\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\u0157\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\57\0\2\u0158\14\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\u0158\1\u0159\1\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\u015a\5\0\6\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\u015b\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\6\4\1\0\4\4\12\0\1\4\1\u015c\3\4\1\0"+
    "\2\4\4\0\5\4\35\0\1\u015d\63\0\1\u015e\75\0"+
    "\1\u015f\116\0\1\u0160\47\0\1\u0161\42\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\1\4\1\u0162\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\1\4\1\u0163\4\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\4\4\1\u0164\1\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\3\4\1\u0165"+
    "\1\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\5\4\1\u0166\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\1\4\1\u0167\3\4"+
    "\1\0\2\4\4\0\5\4\55\0\1\u0168\17\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\3\4"+
    "\1\u0169\1\4\1\0\2\4\4\0\5\4\30\0\1\u016a"+
    "\44\0\2\4\13\0\1\4\5\0\3\4\1\u016b\2\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\2\4"+
    "\1\u016c\1\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u016d\3\4\1\0\2\4\4\0\5\4"+
    "\27\0\1\u016e\62\0\1\u016f\55\0\2\4\13\0\1\4"+
    "\5\0\2\4\1\u0170\3\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\u0171"+
    "\5\0\6\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\u0172\1\u0173\3\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\13\0\1\4\5\0\6\4\1\u0174"+
    "\1\u0175\3\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\4\4\1\u0176\1\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\37\0\1\u0177\62\0\1\u0178\74\0\1\u0179\74\0\2\u017a"+
    "\40\0\2\4\13\0\1\4\5\0\6\4\1\0\3\4"+
    "\1\u017b\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\2\4\1\u017c\3\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\4\4\1\u017d\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\13\0\1\4\5\0\6\4\1\u017a\1\u017e\3\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\1\4\1\u017f\4\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\30\0\1\u0180"+
    "\44\0\2\4\13\0\1\4\5\0\3\4\1\u0181\2\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\31\0\1\u0182\43\0\2\4\13\0\1\4\5\0\4\4"+
    "\1\u0183\1\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\3\4"+
    "\1\u0184\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\35\0\1\u0185\66\0\1\u0186\43\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\1\4\1\u0187\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\4\4\1\u0188\1\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\54\0\1\u0189"+
    "\20\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\2\4\1\u018a\2\4\1\0\2\4\4\0\5\4"+
    "\54\0\1\u018b\20\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\4\4\12\0\2\4\1\u018c\2\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\2\4"+
    "\1\u018d\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\26\0\1\u018e\117\0\1\u018f\45\0\1\u0190"+
    "\46\0\2\4\13\0\1\4\5\0\1\4\1\u0191\4\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u0192\3\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\1\4\1\u0193\4\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\27\0\1\u0194\45\0\2\4\13\0\1\4\5\0\2\4"+
    "\1\u0195\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\2\4"+
    "\1\u0196\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\56\0\1\u0197\72\0\1\u0198\16\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\4\4"+
    "\1\u0199\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\4\4\1\u019a"+
    "\1\0\2\4\4\0\5\4\55\0\1\u019b\17\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\3\4"+
    "\1\u019c\1\4\1\0\2\4\4\0\5\4\55\0\1\u019d"+
    "\17\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\3\4\1\u019e\1\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\13\0\1\4\5\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\u019f\3\4\1\0\2\4\4\0\5\4"+
    "\35\0\1\u01a0\66\0\1\u01a1\43\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\1\4\1\u01a2\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\4\4\1\u01a3\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\30\0\1\u01a4\44\0\2\4"+
    "\13\0\1\4\5\0\3\4\1\u01a5\2\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\u01a6\3\4\1\0\2\4\4\0\5\4\35\0\1\u01a7"+
    "\37\0\2\4\13\0\1\4\5\0\6\4\1\0\1\4"+
    "\1\u01a8\2\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\35\0\1\u01a9\37\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\1\4\1\u01aa\2\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\13\0\1\4\5\0\6\4"+
    "\1\0\1\4\1\u01ab\2\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\57\0\2\u01ac\14\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\0\4\4\12\0\5\4\1\u01ac\1\u01ad"+
    "\1\4\4\0\5\4\2\0\2\4\13\0\1\4\5\0"+
    "\1\4\1\u01ae\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\56\0\1\u01af\16\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\4\4\1\u01b0"+
    "\1\0\2\4\4\0\5\4\56\0\1\u01b1\16\0\2\4"+
    "\13\0\1\4\5\0\6\4\1\0\4\4\12\0\4\4"+
    "\1\u01b2\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\1\4\1\u01b3"+
    "\3\4\1\0\2\4\4\0\5\4\2\0\2\4\13\0"+
    "\1\4\5\0\6\4\1\0\4\4\12\0\5\4\1\u01b4"+
    "\1\u01b5\1\4\4\0\5\4\2\0\2\4\13\0\1\4"+
    "\5\0\6\4\1\u01b6\1\u01b7\3\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\26\0\1\u01b8\46\0\2\4\13\0"+
    "\1\4\5\0\1\4\1\u01b9\4\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\6\1\3\11\13\1\10\11"+
    "\4\1\4\11\3\1\4\0\1\11\1\0\3\11\3\0"+
    "\5\1\1\0\6\1\2\0\5\1\1\0\3\1\1\11"+
    "\1\1\1\0\1\11\2\1\1\0\7\1\1\11\1\0"+
    "\1\1\1\11\1\0\2\1\1\0\2\1\1\0\10\1"+
    "\4\0\10\1\1\0\5\1\1\0\10\1\1\0\1\1"+
    "\1\0\3\1\1\11\2\1\2\0\10\1\4\0\6\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\2\0\10\1\4\0\6\1"+
    "\1\0\5\1\1\11\1\1\4\0\4\1\1\11\1\1"+
    "\1\0\6\1\1\11\2\1\2\0\10\1\1\0\1\11"+
    "\2\0\6\1\1\0\3\1\1\0\2\1\4\0\1\11"+
    "\1\0\6\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\6\1\3\0\4\1\1\0\3\1\1\11\2\1"+
    "\5\0\5\1\1\11\3\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\0\6\1\1\0\1\11\5\1"+
    "\1\11\4\1\1\11\4\0\6\1\1\0\1\1\1\0"+
    "\3\1\2\0\2\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\11\1\0\5\1\1\11\1\1\1\0\2\1\2\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\2\0\3\1"+
    "\1\0\2\1\2\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\2\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  	yyline = 1; 
	yychar = 1; 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // JOptionPane.showMessageDialog(null, "Se Encontraron Errores Lexicos");
    System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline)+" Columna:"+(yycolumn));
    //ErrorLexicoySintactico.listaerrores.add(new ErrorLexicoySintactico("Error Lexico", "El caracter :"+yytext()+"no pertenece al lenguaje",  (yyline), (yycolumn)));
     //ErrorLexicoySintactico.contadorerror++;
            } 
            // fall through
          case 81: break;
          case 2: 
            { /*Se ignoran*/
            } 
            // fall through
          case 82: break;
          case 3: 
            { return new Symbol(sym.identificador,yycolumn,yyline,yytext());
            } 
            // fall through
          case 83: break;
          case 4: 
            { return new Symbol(sym.digito,yycolumn,yyline,yytext());
            } 
            // fall through
          case 84: break;
          case 5: 
            { return new Symbol(sym.punto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 85: break;
          case 6: 
            { yycolumn=1;
            } 
            // fall through
          case 86: break;
          case 7: 
            { return new Symbol(sym.div,yycolumn,yyline,yytext());
            } 
            // fall through
          case 87: break;
          case 8: 
            { return new Symbol(sym.por,yycolumn,yyline,yytext());
            } 
            // fall through
          case 88: break;
          case 9: 
            { return new Symbol(sym.igual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 10: 
            { return new Symbol(sym.suma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 90: break;
          case 11: 
            { return new Symbol(sym.resta,yycolumn,yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 12: 
            { return new Symbol(sym.disyuncion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 92: break;
          case 13: 
            { return new Symbol(sym.interrogacionA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 93: break;
          case 14: 
            { return new Symbol(sym.interrogacionC,yycolumn,yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 15: 
            { return new Symbol(sym.coma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 16: 
            { return new Symbol(sym.colocho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 96: break;
          case 17: 
            { return new Symbol(sym.porcentaje,yycolumn,yyline,yytext());
            } 
            // fall through
          case 97: break;
          case 18: 
            { return new Symbol(sym.dospuntos,yycolumn,yyline,yytext());
            } 
            // fall through
          case 98: break;
          case 19: 
            { return new Symbol(sym.puntocoma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 99: break;
          case 20: 
            { return new Symbol(sym.cparentecis,yycolumn,yyline,yytext());
            } 
            // fall through
          case 100: break;
          case 21: 
            { return new Symbol(sym.aparentecis,yycolumn,yyline,yytext());
            } 
            // fall through
          case 101: break;
          case 22: 
            { return new Symbol(sym.acorchete,yycolumn,yyline,yytext());
            } 
            // fall through
          case 102: break;
          case 23: 
            { return new Symbol(sym.ccorchete,yycolumn,yyline,yytext());
            } 
            // fall through
          case 103: break;
          case 24: 
            { return new Symbol(sym.cadena,yycolumn,yyline,yytext());
            } 
            // fall through
          case 104: break;
          case 25: 
            { return new Symbol(sym.comillasimple,yycolumn,yyline,yytext());
            } 
            // fall through
          case 105: break;
          case 26: 
            { return new Symbol(sym.comillasd,yycolumn,yyline,yytext());
            } 
            // fall through
          case 106: break;
          case 27: 
            { return new Symbol(sym.salto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 107: break;
          case 28: 
            { return new Symbol(sym.or,yycolumn,yyline,yytext());
            } 
            // fall through
          case 108: break;
          case 29: 
            { return new Symbol(sym.flecha,yycolumn,yyline,yytext());
            } 
            // fall through
          case 109: break;
          case 30: 
            { return new Symbol(sym.si,yycolumn,yyline,yytext());
            } 
            // fall through
          case 110: break;
          case 31: 
            { return new Symbol(sym.decimal,yycolumn,yyline,yytext());
            } 
            // fall through
          case 111: break;
          case 32: 
            { return new Symbol(sym.caracter,yycolumn,yyline,yytext());
            } 
            // fall through
          case 112: break;
          case 33: 
            { return new Symbol(sym.var_identificador,yycolumn,yyline,yytext());
            } 
            // fall through
          case 113: break;
          case 34: 
            { return new Symbol(sym.not,yycolumn,yyline,yytext());
            } 
            // fall through
          case 114: break;
          case 35: 
            { return new Symbol(sym.con,yycolumn,yyline,yytext());
            } 
            // fall through
          case 115: break;
          case 36: 
            { return new Symbol(sym.and,yycolumn,yyline,yytext());
            } 
            // fall through
          case 116: break;
          case 37: 
            { return new Symbol(sym.modulo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 117: break;
          case 38: 
            { return new Symbol(sym.fin,yycolumn,yyline,yytext());
            } 
            // fall through
          case 118: break;
          case 39: 
            { return new Symbol(sym.para,yycolumn,yyline,yytext());
            } 
            // fall through
          case 119: break;
          case 40: 
            { return new Symbol(sym.o_si,yycolumn,yyline,yytext());
            } 
            // fall through
          case 120: break;
          case 41: 
            { return new Symbol(sym.como,yycolumn,yyline,yytext());
            } 
            // fall through
          case 121: break;
          case 42: 
            { return new Symbol(sym.menor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 122: break;
          case 43: 
            { return new Symbol(sym.mayor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 123: break;
          case 44: 
            { return new Symbol(sym.segun,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 45: 
            { return new Symbol(sym.falso,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 46: 
            { return new Symbol(sym.hacer,yycolumn,yyline,yytext());
            } 
            // fall through
          case 126: break;
          case 47: 
            { return new Symbol(sym.hasta,yycolumn,yyline,yytext());
            } 
            // fall through
          case 127: break;
          case 48: 
            { return new Symbol(sym.carAscii,yycolumn,yyline,yytext());
            } 
            // fall through
          case 128: break;
          case 49: 
            { return new Symbol(sym.tnumero,yycolumn,yyline,yytext());
            } 
            // fall through
          case 129: break;
          case 50: 
            { return new Symbol(sym.tcadena,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 51: 
            { return new Symbol(sym.inicio,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 52: 
            { return new Symbol(sym.metodo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 132: break;
          case 53: 
            { return new Symbol(sym.fin_si,yycolumn,yyline,yytext());
            } 
            // fall through
          case 133: break;
          case 54: 
            { return new Symbol(sym.repetir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 134: break;
          case 55: 
            { return new Symbol(sym.funcion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 135: break;
          case 56: 
            { return new Symbol(sym.tbooleano,yycolumn,yyline,yytext());
            } 
            // fall through
          case 136: break;
          case 57: 
            { return new Symbol(sym.potencia,yycolumn,yyline,yytext());
            } 
            // fall through
          case 137: break;
          case 58: 
            { return new Symbol(sym.enton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 138: break;
          case 59: 
            { return new Symbol(sym.esigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 139: break;
          case 60: 
            { return new Symbol(sym.ejecutar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 140: break;
          case 61: 
            { return new Symbol(sym.tcaracter,yycolumn,yyline,yytext());
            } 
            // fall through
          case 141: break;
          case 62: 
            { return new Symbol(sym.ingresar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 142: break;
          case 63: 
            { return new Symbol(sym.imprimir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 143: break;
          case 64: 
            { return new Symbol(sym.mientras,yycolumn,yyline,yytext());
            } 
            // fall through
          case 144: break;
          case 65: 
            { return new Symbol(sym.retornar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 145: break;
          case 66: 
            { return new Symbol(sym.fin_para,yycolumn,yyline,yytext());
            } 
            // fall through
          case 146: break;
          case 67: 
            { return new Symbol(sym.con_valor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 147: break;
          case 68: 
            { return new Symbol(sym.fin_segun,yycolumn,yyline,yytext());
            } 
            // fall through
          case 148: break;
          case 69: 
            { return new Symbol(sym.verdadero,yycolumn,yyline,yytext());
            } 
            // fall through
          case 149: break;
          case 70: 
            { return new Symbol(sym.hasta_que,yycolumn,yyline,yytext());
            } 
            // fall through
          case 150: break;
          case 71: 
            { return new Symbol(sym.fin_metodo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 151: break;
          case 72: 
            { return new Symbol(sym.incremental,yycolumn,yyline,yytext());
            } 
            // fall through
          case 152: break;
          case 73: 
            { return new Symbol(sym.imprimir_nl,yycolumn,yyline,yytext());
            } 
            // fall through
          case 153: break;
          case 74: 
            { return new Symbol(sym.fin_funcion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 154: break;
          case 75: 
            { return new Symbol(sym.esdiferente,yycolumn,yyline,yytext());
            } 
            // fall through
          case 155: break;
          case 76: 
            { return new Symbol(sym.fin_mientras,yycolumn,yyline,yytext());
            } 
            // fall through
          case 156: break;
          case 77: 
            { return new Symbol(sym.menorigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 157: break;
          case 78: 
            { return new Symbol(sym.mayorigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 158: break;
          case 79: 
            { return new Symbol(sym.con_parametros,yycolumn,yyline,yytext());
            } 
            // fall through
          case 159: break;
          case 80: 
            { return new Symbol(sym.de_lo_contrario,yycolumn,yyline,yytext());
            } 
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
