
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto.analizadores;

import java_cup.runtime.*;
import proyecto.main.*;
import java.util.ArrayList;
import proyecto.estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\004\005\000\002\004\003\000\002\003\003" +
    "\000\002\003\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\025\005\000\002\026\005" +
    "\000\002\005\010\000\002\012\003\000\002\012\004\000" +
    "\002\013\004\000\002\013\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\014\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\016" +
    "\006\000\002\016\010\000\002\016\007\000\002\016\011" +
    "\000\002\017\004\000\002\017\003\000\002\021\005\000" +
    "\002\022\011\000\002\022\006\000\002\022\010\000\002" +
    "\024\004\000\002\024\003\000\002\023\007\000\002\027" +
    "\013\000\002\027\016\000\002\027\012\000\002\030\007" +
    "\000\002\030\006\000\002\031\006\000\002\031\005\000" +
    "\002\032\006\000\002\032\007\000\002\033\007\000\002" +
    "\033\013\000\002\034\007\000\002\034\010\000\002\035" +
    "\005\000\002\035\003\000\002\036\004\000\002\037\005" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\006\051\007\100\005\001\002\000\010\002" +
    "\ufffd\051\ufffd\100\ufffd\001\002\000\004\114\245\001\002" +
    "\000\010\002\000\051\000\100\000\001\002\000\026\053" +
    "\030\056\041\063\026\066\014\073\023\076\016\107\036" +
    "\110\020\111\015\114\040\001\002\000\010\002\012\051" +
    "\007\100\005\001\002\000\010\002\uffff\051\uffff\100\uffff" +
    "\001\002\000\004\002\001\001\002\000\052\014\ufff1\052" +
    "\ufff1\053\ufff1\056\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\065\ufff1\066\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\101\ufff1\107\ufff1\110\ufff1\111\ufff1\114\ufff1\001\002" +
    "\000\004\114\226\001\002\000\026\016\046\034\050\040" +
    "\047\102\054\103\055\112\051\114\045\115\052\116\053" +
    "\117\056\001\002\000\030\053\030\056\041\063\026\066" +
    "\014\073\023\075\220\076\016\107\036\110\020\111\015" +
    "\114\040\001\002\000\052\014\ufff2\052\ufff2\053\ufff2\056" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\065\ufff2\066\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\101\ufff2\107" +
    "\ufff2\110\ufff2\111\ufff2\114\ufff2\001\002\000\026\016\046" +
    "\034\050\040\047\102\054\103\055\112\051\114\045\115" +
    "\052\116\053\117\056\001\002\000\004\023\214\001\002" +
    "\000\052\014\ufffc\052\ufffc\053\ufffc\056\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\065\ufffc\066\ufffc\072\ufffc\073\ufffc" +
    "\074\ufffc\075\ufffc\076\ufffc\101\ufffc\107\ufffc\110\ufffc\111" +
    "\ufffc\114\ufffc\001\002\000\026\016\046\034\050\040\047" +
    "\102\054\103\055\112\051\114\045\115\052\116\053\117" +
    "\056\001\002\000\052\014\ufff3\052\ufff3\053\ufff3\056\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3\066\ufff3\072" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\101\ufff3\107\ufff3" +
    "\110\ufff3\111\ufff3\114\ufff3\001\002\000\030\052\206\053" +
    "\030\056\041\063\026\066\014\073\023\076\016\107\036" +
    "\110\020\111\015\114\040\001\002\000\004\114\166\001" +
    "\002\000\004\065\165\001\002\000\004\114\040\001\002" +
    "\000\004\023\153\001\002\000\010\044\uffed\054\uffed\114" +
    "\uffed\001\002\000\052\014\ufff5\052\ufff5\053\ufff5\056\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\066\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\101\ufff5\107\ufff5" +
    "\110\ufff5\111\ufff5\114\ufff5\001\002\000\004\062\152\001" +
    "\002\000\052\014\ufff4\052\ufff4\053\ufff4\056\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\065\ufff4\066\ufff4\072\ufff4\073" +
    "\ufff4\074\ufff4\075\ufff4\076\ufff4\101\ufff4\107\ufff4\110\ufff4" +
    "\111\ufff4\114\ufff4\001\002\000\004\114\140\001\002\000" +
    "\052\014\ufff6\052\ufff6\053\ufff6\056\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\065\ufff6\066\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\075\ufff6\076\ufff6\101\ufff6\107\ufff6\110\ufff6\111\ufff6" +
    "\114\ufff6\001\002\000\012\017\137\044\uffea\054\uffea\114" +
    "\uffea\001\002\000\026\016\046\034\050\040\047\102\054" +
    "\103\055\112\051\114\045\115\052\116\053\117\056\001" +
    "\002\000\006\044\043\114\040\001\002\000\026\016\046" +
    "\034\050\040\047\102\054\103\055\112\051\114\045\115" +
    "\052\116\053\117\056\001\002\000\010\044\uffec\054\uffec" +
    "\114\uffec\001\002\000\120\005\uffcd\006\uffcd\007\uffcd\011" +
    "\uffcd\012\uffcd\014\uffcd\016\uffcd\017\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\037\uffcd\052\uffcd\053\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\101\uffcd\107\uffcd" +
    "\110\uffcd\111\uffcd\114\uffcd\001\002\000\026\016\046\034" +
    "\050\040\047\102\054\103\055\112\051\114\045\115\052" +
    "\116\053\117\056\001\002\000\026\016\046\034\050\040" +
    "\047\102\054\103\055\112\051\114\045\115\052\116\053" +
    "\117\056\001\002\000\026\016\046\034\050\040\047\102" +
    "\054\103\055\112\051\114\045\115\052\116\053\117\056" +
    "\001\002\000\122\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\037\uffe3\052\uffe3\053\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\101\uffe3\107\uffe3" +
    "\110\uffe3\111\uffe3\114\uffe3\001\002\000\122\005\uffe5\006" +
    "\uffe5\007\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\037\uffe5\052\uffe5\053\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\101\uffe5\107\uffe5\110\uffe5\111\uffe5\114\uffe5\001" +
    "\002\000\122\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\037\uffe4\052\uffe4\053\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\072\uffe4" +
    "\073\uffe4\074\uffe4\075\uffe4\076\uffe4\101\uffe4\107\uffe4\110" +
    "\uffe4\111\uffe4\114\uffe4\001\002\000\122\005\uffe1\006\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\037\uffe1\052\uffe1\053\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\101\uffe1\107\uffe1\110\uffe1\111\uffe1\114\uffe1\001\002" +
    "\000\122\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\037" +
    "\uffe0\052\uffe0\053\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\101\uffe0\107\uffe0\110\uffe0" +
    "\111\uffe0\114\uffe0\001\002\000\122\005\uffe2\006\uffe2\007" +
    "\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\037\uffe2\052\uffe2\053\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2" +
    "\101\uffe2\107\uffe2\110\uffe2\111\uffe2\114\uffe2\001\002\000" +
    "\040\005\065\006\074\007\062\011\061\012\073\016\064" +
    "\023\uffdf\024\076\025\072\026\066\027\075\030\067\031" +
    "\063\032\070\033\071\001\002\000\120\005\uffcc\006\uffcc" +
    "\007\uffcc\011\uffcc\012\uffcc\014\uffcc\016\uffcc\017\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\037\uffcc\052\uffcc\053\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\101" +
    "\uffcc\107\uffcc\110\uffcc\111\uffcc\114\uffcc\001\002\000\026" +
    "\016\046\034\050\040\047\102\054\103\055\112\051\114" +
    "\045\115\052\116\053\117\056\001\002\000\026\016\046" +
    "\034\050\040\047\102\054\103\055\112\051\114\045\115" +
    "\052\116\053\117\056\001\002\000\026\016\046\034\050" +
    "\040\047\102\054\103\055\112\051\114\045\115\052\116" +
    "\053\117\056\001\002\000\026\016\046\034\050\040\047" +
    "\102\054\103\055\112\051\114\045\115\052\116\053\117" +
    "\056\001\002\000\026\016\046\034\050\040\047\102\054" +
    "\103\055\112\051\114\045\115\052\116\053\117\056\001" +
    "\002\000\026\016\046\034\050\040\047\102\054\103\055" +
    "\112\051\114\045\115\052\116\053\117\056\001\002\000" +
    "\026\016\046\034\050\040\047\102\054\103\055\112\051" +
    "\114\045\115\052\116\053\117\056\001\002\000\026\016" +
    "\046\034\050\040\047\102\054\103\055\112\051\114\045" +
    "\115\052\116\053\117\056\001\002\000\026\016\046\034" +
    "\050\040\047\102\054\103\055\112\051\114\045\115\052" +
    "\116\053\117\056\001\002\000\026\016\046\034\050\040" +
    "\047\102\054\103\055\112\051\114\045\115\052\116\053" +
    "\117\056\001\002\000\026\016\046\034\050\040\047\102" +
    "\054\103\055\112\051\114\045\115\052\116\053\117\056" +
    "\001\002\000\026\016\046\034\050\040\047\102\054\103" +
    "\055\112\051\114\045\115\052\116\053\117\056\001\002" +
    "\000\026\016\046\034\050\040\047\102\054\103\055\112" +
    "\051\114\045\115\052\116\053\117\056\001\002\000\026" +
    "\016\046\034\050\040\047\102\054\103\055\112\051\114" +
    "\045\115\052\116\053\117\056\001\002\000\120\005\uffd8" +
    "\006\uffd8\007\uffd8\011\061\012\uffd8\014\uffd8\016\064\017" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\037\uffd8\052\uffd8\053\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\101\uffd8\107\uffd8\110\uffd8\111\uffd8\114\uffd8\001\002" +
    "\000\120\005\uffd5\006\uffd5\007\uffd5\011\061\012\uffd5\014" +
    "\uffd5\016\064\017\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\037\uffd5\052" +
    "\uffd5\053\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5\073\uffd5\074" +
    "\uffd5\075\uffd5\076\uffd5\101\uffd5\107\uffd5\110\uffd5\111\uffd5" +
    "\114\uffd5\001\002\000\120\005\uffdc\006\uffdc\007\uffdc\011" +
    "\061\012\uffdc\014\uffdc\016\064\017\uffdc\023\uffdc\024\076" +
    "\025\072\026\066\027\075\030\067\031\063\032\070\033" +
    "\071\037\uffdc\052\uffdc\053\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\101\uffdc\107\uffdc" +
    "\110\uffdc\111\uffdc\114\uffdc\001\002\000\120\005\uffd9\006" +
    "\uffd9\007\uffd9\011\061\012\uffd9\014\uffd9\016\064\017\uffd9" +
    "\023\uffd9\024\076\025\072\026\066\027\075\030\067\031" +
    "\063\032\070\033\071\037\uffd9\052\uffd9\053\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\101\uffd9\107\uffd9\110\uffd9\111\uffd9\114\uffd9\001\002\000" +
    "\120\005\uffd7\006\uffd7\007\uffd7\011\061\012\uffd7\014\uffd7" +
    "\016\064\017\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\037\uffd7\052\uffd7" +
    "\053\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\076\uffd7\101\uffd7\107\uffd7\110\uffd7\111\uffd7\114" +
    "\uffd7\001\002\000\120\005\uffd1\006\uffd1\007\uffd1\011\061" +
    "\012\uffd1\014\uffd1\016\064\017\uffd1\023\uffd1\024\076\025" +
    "\072\026\066\027\075\030\067\031\063\032\uffd1\033\uffd1" +
    "\037\uffd1\052\uffd1\053\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\101\uffd1\107\uffd1\110" +
    "\uffd1\111\uffd1\114\uffd1\001\002\000\120\005\uffd2\006\uffd2" +
    "\007\uffd2\011\061\012\uffd2\014\uffd2\016\064\017\uffd2\023" +
    "\uffd2\024\076\025\072\026\066\027\075\030\067\031\063" +
    "\032\uffd2\033\uffd2\037\uffd2\052\uffd2\053\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\101" +
    "\uffd2\107\uffd2\110\uffd2\111\uffd2\114\uffd2\001\002\000\120" +
    "\005\uffd3\006\uffd3\007\uffd3\011\061\012\uffd3\014\uffd3\016" +
    "\064\017\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\037\uffd3\052\uffd3\053" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\101\uffd3\107\uffd3\110\uffd3\111\uffd3\114\uffd3" +
    "\001\002\000\120\005\uffd6\006\uffd6\007\uffd6\011\061\012" +
    "\uffd6\014\uffd6\016\064\017\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\037" +
    "\uffd6\052\uffd6\053\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\072\uffd6\073" +
    "\uffd6\074\uffd6\075\uffd6\076\uffd6\101\uffd6\107\uffd6\110\uffd6" +
    "\111\uffd6\114\uffd6\001\002\000\120\005\uffde\006\074\007" +
    "\062\011\061\012\073\014\uffde\016\064\017\uffde\023\uffde" +
    "\024\076\025\072\026\066\027\075\030\067\031\063\032" +
    "\070\033\071\037\uffde\052\uffde\053\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\101\uffde" +
    "\107\uffde\110\uffde\111\uffde\114\uffde\001\002\000\120\005" +
    "\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\014\uffdd\016\uffdd" +
    "\017\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\037\uffdd\052\uffdd\053\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\076\uffdd\101\uffdd\107\uffdd\110\uffdd\111\uffdd\114\uffdd\001" +
    "\002\000\120\005\uffd4\006\uffd4\007\uffd4\011\061\012\uffd4" +
    "\014\uffd4\016\064\017\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\037\uffd4" +
    "\052\uffd4\053\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\101\uffd4\107\uffd4\110\uffd4\111" +
    "\uffd4\114\uffd4\001\002\000\120\005\uffdb\006\uffdb\007\uffdb" +
    "\011\061\012\uffdb\014\uffdb\016\064\017\uffdb\023\uffdb\024" +
    "\076\025\072\026\066\027\075\030\067\031\063\032\070" +
    "\033\071\037\uffdb\052\uffdb\053\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\101\uffdb\107" +
    "\uffdb\110\uffdb\111\uffdb\114\uffdb\001\002\000\120\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\uffda\014\uffda\016\uffda\017" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\037\uffda\052\uffda\053\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076" +
    "\uffda\101\uffda\107\uffda\110\uffda\111\uffda\114\uffda\001\002" +
    "\000\120\005\uffcf\006\uffcf\007\uffcf\011\061\012\uffcf\014" +
    "\uffcf\016\064\017\uffcf\023\uffcf\024\076\025\072\026\066" +
    "\027\075\030\067\031\063\032\uffcf\033\uffcf\037\uffcf\052" +
    "\uffcf\053\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\076\uffcf\101\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\114\uffcf\001\002\000\040\005\065\006\074\007\062\011" +
    "\061\012\073\016\064\024\076\025\072\026\066\027\075" +
    "\030\067\031\063\032\070\033\071\037\117\001\002\000" +
    "\120\005\uffce\006\uffce\007\uffce\011\uffce\012\uffce\014\uffce" +
    "\016\uffce\017\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\037\uffce\052\uffce" +
    "\053\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\072\uffce\073\uffce\074\uffce" +
    "\075\uffce\076\uffce\101\uffce\107\uffce\110\uffce\111\uffce\114" +
    "\uffce\001\002\000\120\005\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\014\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\037\uffd0\052\uffd0\053\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\101\uffd0\107\uffd0\110" +
    "\uffd0\111\uffd0\114\uffd0\001\002\000\040\005\065\006\074" +
    "\007\062\011\061\012\073\016\064\024\076\025\072\026" +
    "\066\027\075\030\067\031\063\032\070\033\071\057\122" +
    "\001\002\000\026\053\030\056\041\063\026\066\014\073" +
    "\023\076\016\107\036\110\020\111\015\114\040\001\002" +
    "\000\034\053\030\056\041\060\127\061\130\062\uffcb\063" +
    "\026\066\014\073\023\076\016\107\036\110\020\111\015" +
    "\114\040\001\002\000\052\014\ufffb\052\ufffb\053\ufffb\056" +
    "\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\065\ufffb\066\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\101\ufffb\107" +
    "\ufffb\110\ufffb\111\ufffb\114\ufffb\001\002\000\010\060\134" +
    "\061\130\062\uffc9\001\002\000\010\060\uffc6\061\uffc6\062" +
    "\uffc6\001\002\000\026\053\030\056\041\063\026\066\014" +
    "\073\023\076\016\107\036\110\020\111\015\114\040\001" +
    "\002\000\026\016\046\034\050\040\047\102\054\103\055" +
    "\112\051\114\045\115\052\116\053\117\056\001\002\000" +
    "\062\005\065\006\074\007\062\011\061\012\073\016\064" +
    "\024\076\025\072\026\066\027\075\030\067\031\063\032" +
    "\070\033\071\053\030\056\041\063\026\066\014\073\023" +
    "\076\016\107\036\110\020\111\015\114\040\001\002\000" +
    "\034\053\030\056\041\060\uffc5\061\uffc5\062\uffc5\063\026" +
    "\066\014\073\023\076\016\107\036\110\020\111\015\114" +
    "\040\001\002\000\030\053\030\056\041\062\uffca\063\026" +
    "\066\014\073\023\076\016\107\036\110\020\111\015\114" +
    "\040\001\002\000\026\053\030\056\041\063\026\066\014" +
    "\073\023\076\016\107\036\110\020\111\015\114\040\001" +
    "\002\000\010\060\uffc7\061\uffc7\062\uffc7\001\002\000\030" +
    "\053\030\056\041\062\uffc8\063\026\066\014\073\023\076" +
    "\016\107\036\110\020\111\015\114\040\001\002\000\010" +
    "\044\uffeb\054\uffeb\114\uffeb\001\002\000\004\040\141\001" +
    "\002\000\030\016\046\034\050\037\142\040\047\102\054" +
    "\103\055\112\051\114\045\115\052\116\053\117\056\001" +
    "\002\000\004\023\151\001\002\000\042\005\065\006\074" +
    "\007\062\011\061\012\073\016\064\017\uffad\024\076\025" +
    "\072\026\066\027\075\030\067\031\063\032\070\033\071" +
    "\037\uffad\001\002\000\006\017\145\037\146\001\002\000" +
    "\026\016\046\034\050\040\047\102\054\103\055\112\051" +
    "\114\045\115\052\116\053\117\056\001\002\000\004\023" +
    "\147\001\002\000\052\014\uffb2\052\uffb2\053\uffb2\056\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2\066\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\101\uffb2\107\uffb2" +
    "\110\uffb2\111\uffb2\114\uffb2\001\002\000\042\005\065\006" +
    "\074\007\062\011\061\012\073\016\064\017\uffae\024\076" +
    "\025\072\026\066\027\075\030\067\031\063\032\070\033" +
    "\071\037\uffae\001\002\000\052\014\uffb3\052\uffb3\053\uffb3" +
    "\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\066" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\101\uffb3" +
    "\107\uffb3\110\uffb3\111\uffb3\114\uffb3\001\002\000\052\014" +
    "\ufff8\052\ufff8\053\ufff8\056\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\065\ufff8\066\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\101\ufff8\107\ufff8\110\ufff8\111\ufff8\114\ufff8" +
    "\001\002\000\052\014\ufff9\052\ufff9\053\ufff9\056\ufff9\060" +
    "\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\066\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\101\ufff9\107\ufff9\110" +
    "\ufff9\111\ufff9\114\ufff9\001\002\000\006\054\155\114\040" +
    "\001\002\000\012\045\162\046\157\047\156\050\161\001" +
    "\002\000\006\055\uffe7\114\uffe7\001\002\000\006\055\uffe9" +
    "\114\uffe9\001\002\000\004\055\163\001\002\000\006\055" +
    "\uffe6\114\uffe6\001\002\000\006\055\uffe8\114\uffe8\001\002" +
    "\000\016\102\054\103\055\112\051\115\052\116\053\117" +
    "\056\001\002\000\004\023\uffee\001\002\000\052\014\ufff7" +
    "\052\ufff7\053\ufff7\056\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\065\ufff7\066\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7" +
    "\076\ufff7\101\ufff7\107\ufff7\110\ufff7\111\ufff7\114\ufff7\001" +
    "\002\000\004\064\167\001\002\000\006\014\170\060\171" +
    "\001\002\000\016\102\054\103\055\112\051\115\052\116" +
    "\053\117\056\001\002\000\004\057\200\001\002\000\010" +
    "\014\170\060\174\065\uffc3\001\002\000\010\014\uffc0\060" +
    "\uffc0\065\uffc0\001\002\000\004\057\176\001\002\000\010" +
    "\014\uffc1\060\uffc1\065\uffc1\001\002\000\026\053\030\056" +
    "\041\063\026\066\014\073\023\076\016\107\036\110\020" +
    "\111\015\114\040\001\002\000\030\053\030\056\041\063" +
    "\026\065\uffc4\066\014\073\023\076\016\107\036\110\020" +
    "\111\015\114\040\001\002\000\026\053\030\056\041\063" +
    "\026\066\014\073\023\076\016\107\036\110\020\111\015" +
    "\114\040\001\002\000\030\053\030\056\041\063\026\065" +
    "\uffc2\066\014\073\023\076\016\107\036\110\020\111\015" +
    "\114\040\001\002\000\004\015\203\001\002\000\004\057" +
    "\204\001\002\000\026\053\030\056\041\063\026\066\014" +
    "\073\023\076\016\107\036\110\020\111\015\114\040\001" +
    "\002\000\034\014\uffbf\053\030\056\041\060\uffbf\063\026" +
    "\065\uffbf\066\014\073\023\076\016\107\036\110\020\111" +
    "\015\114\040\001\002\000\010\002\ufffe\051\ufffe\100\ufffe" +
    "\001\002\000\040\005\065\006\074\007\062\011\061\012" +
    "\073\016\064\024\076\025\072\026\066\027\075\030\067" +
    "\031\063\032\070\033\071\064\210\001\002\000\030\053" +
    "\030\056\041\063\026\066\014\073\023\074\211\076\016" +
    "\107\036\110\020\111\015\114\040\001\002\000\052\014" +
    "\uffba\052\uffba\053\uffba\056\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\065\uffba\066\uffba\072\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\101\uffba\107\uffba\110\uffba\111\uffba\114\uffba" +
    "\001\002\000\030\053\030\056\041\063\026\066\014\073" +
    "\023\074\213\076\016\107\036\110\020\111\015\114\040" +
    "\001\002\000\052\014\uffbb\052\uffbb\053\uffbb\056\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\065\uffbb\066\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\076\uffbb\101\uffbb\107\uffbb\110" +
    "\uffbb\111\uffbb\114\uffbb\001\002\000\052\014\ufffa\052\ufffa" +
    "\053\ufffa\056\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\065" +
    "\ufffa\066\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\101\ufffa\107\ufffa\110\ufffa\111\ufffa\114\ufffa\001\002\000" +
    "\040\005\065\006\074\007\062\011\061\012\073\016\064" +
    "\023\216\024\076\025\072\026\066\027\075\030\067\031" +
    "\063\032\070\033\071\001\002\000\052\014\ufff0\052\ufff0" +
    "\053\ufff0\056\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\065" +
    "\ufff0\066\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0" +
    "\101\ufff0\107\ufff0\110\ufff0\111\ufff0\114\ufff0\001\002\000" +
    "\030\053\030\056\041\063\026\066\014\073\023\075\222" +
    "\076\016\107\036\110\020\111\015\114\040\001\002\000" +
    "\026\016\046\034\050\040\047\102\054\103\055\112\051" +
    "\114\045\115\052\116\053\117\056\001\002\000\106\005" +
    "\065\006\074\007\062\011\061\012\073\014\uffb8\016\064" +
    "\024\076\025\072\026\066\027\075\030\067\031\063\032" +
    "\070\033\071\052\uffb8\053\uffb8\056\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\065\uffb8\066\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\076\uffb8\101\uffb8\107\uffb8\110\uffb8\111\uffb8" +
    "\114\uffb8\001\002\000\026\016\046\034\050\040\047\102" +
    "\054\103\055\112\051\114\045\115\052\116\053\117\056" +
    "\001\002\000\106\005\065\006\074\007\062\011\061\012" +
    "\073\014\uffb9\016\064\024\076\025\072\026\066\027\075" +
    "\030\067\031\063\032\070\033\071\052\uffb9\053\uffb9\056" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9\066\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\101\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\114\uffb9\001\002\000\040\005\065" +
    "\006\074\007\062\011\061\012\073\016\064\023\225\024" +
    "\076\025\072\026\066\027\075\030\067\031\063\032\070" +
    "\033\071\001\002\000\052\014\uffef\052\uffef\053\uffef\056" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\065\uffef\066\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\101\uffef\107" +
    "\uffef\110\uffef\111\uffef\114\uffef\001\002\000\004\044\227" +
    "\001\002\000\004\115\230\001\002\000\004\067\231\001" +
    "\002\000\004\115\232\001\002\000\006\064\234\070\233" +
    "\001\002\000\004\071\240\001\002\000\030\053\030\056" +
    "\041\063\026\066\014\072\236\073\023\076\016\107\036" +
    "\110\020\111\015\114\040\001\002\000\030\053\030\056" +
    "\041\063\026\066\014\072\237\073\023\076\016\107\036" +
    "\110\020\111\015\114\040\001\002\000\052\014\uffbc\052" +
    "\uffbc\053\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\065\uffbc\066\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\101\uffbc\107\uffbc\110\uffbc\111\uffbc\114\uffbc\001\002" +
    "\000\052\014\uffbe\052\uffbe\053\uffbe\056\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\065\uffbe\066\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\101\uffbe\107\uffbe\110\uffbe\111" +
    "\uffbe\114\uffbe\001\002\000\004\115\241\001\002\000\004" +
    "\064\242\001\002\000\026\053\030\056\041\063\026\066" +
    "\014\073\023\076\016\107\036\110\020\111\015\114\040" +
    "\001\002\000\030\053\030\056\041\063\026\066\014\072" +
    "\244\073\023\076\016\107\036\110\020\111\015\114\040" +
    "\001\002\000\052\014\uffbd\052\uffbd\053\uffbd\056\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\066\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\101\uffbd\107\uffbd\110" +
    "\uffbd\111\uffbd\114\uffbd\001\002\000\030\040\246\053\030" +
    "\056\041\063\026\066\014\073\023\076\016\107\036\110" +
    "\020\111\015\114\040\001\002\000\012\045\162\046\157" +
    "\047\156\050\161\001\002\000\030\053\030\056\041\063" +
    "\026\066\014\073\023\076\016\101\250\107\036\110\020" +
    "\111\015\114\040\001\002\000\010\002\uffb7\051\uffb7\100" +
    "\uffb7\001\002\000\006\017\255\037\256\001\002\000\006" +
    "\017\uffb0\037\uffb0\001\002\000\004\114\254\001\002\000" +
    "\006\017\uffaf\037\uffaf\001\002\000\012\045\162\046\157" +
    "\047\156\050\161\001\002\000\010\002\uffb6\051\uffb6\100" +
    "\uffb6\001\002\000\006\017\uffb1\037\uffb1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\002\007\004\005\032\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\024\005\020\010\021\012\041\013\031\014\030\016" +
    "\033\022\026\025\036\026\032\027\034\030\023\031\016" +
    "\034\012\001\001\000\006\004\010\032\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\057\015\223\001\001\000\036\003" +
    "\216\005\020\010\021\012\041\013\031\014\030\016\033" +
    "\022\026\025\036\026\032\027\034\030\023\031\016\034" +
    "\012\001\001\000\002\001\001\000\006\007\057\015\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\057\015\206\001\001\000\002\001\001\000\034\005\020" +
    "\010\123\012\041\013\031\014\030\016\033\022\026\025" +
    "\036\026\032\027\034\030\023\031\016\034\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\153\013" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\057" +
    "\015\120\001\001\000\004\013\043\001\001\000\006\007" +
    "\057\015\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\057\015\117\001\001\000\006\007\057\015" +
    "\115\001\001\000\006\007\057\015\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\057\015\113\001\001\000" +
    "\006\007\057\015\112\001\001\000\006\007\057\015\111" +
    "\001\001\000\006\007\057\015\110\001\001\000\006\007" +
    "\057\015\107\001\001\000\006\007\057\015\106\001\001" +
    "\000\006\007\057\015\105\001\001\000\006\007\057\015" +
    "\104\001\001\000\006\007\057\015\103\001\001\000\006" +
    "\007\057\015\102\001\001\000\006\007\057\015\101\001" +
    "\001\000\006\007\057\015\100\001\001\000\006\007\057" +
    "\015\077\001\001\000\006\007\057\015\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\122\005\020\010\021\012\041\013\031\014\030\016\033" +
    "\022\026\025\036\026\032\027\034\030\023\031\016\034" +
    "\012\001\001\000\040\005\020\010\123\012\041\013\031" +
    "\014\030\016\033\017\124\021\125\022\026\025\036\026" +
    "\032\027\034\030\023\031\016\034\012\001\001\000\002" +
    "\001\001\000\004\021\134\001\001\000\002\001\001\000" +
    "\036\003\132\005\020\010\021\012\041\013\031\014\030" +
    "\016\033\022\026\025\036\026\032\027\034\030\023\031" +
    "\016\034\012\001\001\000\006\007\057\015\130\001\001" +
    "\000\036\003\131\005\020\010\021\012\041\013\031\014" +
    "\030\016\033\022\026\025\036\026\032\027\034\030\023" +
    "\031\016\034\012\001\001\000\034\005\020\010\123\012" +
    "\041\013\031\014\030\016\033\022\026\025\036\026\032" +
    "\027\034\030\023\031\016\034\012\001\001\000\034\005" +
    "\020\010\123\012\041\013\031\014\030\016\033\022\026" +
    "\025\036\026\032\027\034\030\023\031\016\034\012\001" +
    "\001\000\036\003\135\005\020\010\021\012\041\013\031" +
    "\014\030\016\033\022\026\025\036\026\032\027\034\030" +
    "\023\031\016\034\012\001\001\000\002\001\001\000\034" +
    "\005\020\010\123\012\041\013\031\014\030\016\033\022" +
    "\026\025\036\026\032\027\034\030\023\031\016\034\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\057\015\142\037\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\057\015\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\043\001\001\000\004\006\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\172\024\171\001\001\000\004\007\201\001\001\000\002" +
    "\001\001\000\004\023\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\176\005\020" +
    "\010\021\012\041\013\031\014\030\016\033\022\026\025" +
    "\036\026\032\027\034\030\023\031\016\034\012\001\001" +
    "\000\034\005\020\010\123\012\041\013\031\014\030\016" +
    "\033\022\026\025\036\026\032\027\034\030\023\031\016" +
    "\034\012\001\001\000\036\003\200\005\020\010\021\012" +
    "\041\013\031\014\030\016\033\022\026\025\036\026\032" +
    "\027\034\030\023\031\016\034\012\001\001\000\034\005" +
    "\020\010\123\012\041\013\031\014\030\016\033\022\026" +
    "\025\036\026\032\027\034\030\023\031\016\034\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\204" +
    "\005\020\010\021\012\041\013\031\014\030\016\033\022" +
    "\026\025\036\026\032\027\034\030\023\031\016\034\012" +
    "\001\001\000\034\005\020\010\123\012\041\013\031\014" +
    "\030\016\033\022\026\025\036\026\032\027\034\030\023" +
    "\031\016\034\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\211\005\020\010\021\012\041\013\031" +
    "\014\030\016\033\022\026\025\036\026\032\027\034\030" +
    "\023\031\016\034\012\001\001\000\002\001\001\000\034" +
    "\005\020\010\123\012\041\013\031\014\030\016\033\022" +
    "\026\025\036\026\032\027\034\030\023\031\016\034\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\020\010\123\012\041" +
    "\013\031\014\030\016\033\022\026\025\036\026\032\027" +
    "\034\030\023\031\016\034\012\001\001\000\006\007\057" +
    "\015\220\001\001\000\002\001\001\000\006\007\057\015" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\234\005\020\010\021\012\041\013\031\014" +
    "\030\016\033\022\026\025\036\026\032\027\034\030\023" +
    "\031\016\034\012\001\001\000\034\005\020\010\123\012" +
    "\041\013\031\014\030\016\033\022\026\025\036\026\032" +
    "\027\034\030\023\031\016\034\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\242\005\020\010\021\012\041\013\031\014" +
    "\030\016\033\022\026\025\036\026\032\027\034\030\023" +
    "\031\016\034\012\001\001\000\034\005\020\010\123\012" +
    "\041\013\031\014\030\016\033\022\026\025\036\026\032" +
    "\027\034\030\023\031\016\034\012\001\001\000\002\001" +
    "\001\000\036\003\246\005\020\010\021\012\041\013\031" +
    "\014\030\016\033\022\026\025\036\026\032\027\034\030" +
    "\023\031\016\034\012\001\001\000\010\006\252\035\250" +
    "\036\251\001\001\000\034\005\020\010\123\012\041\013" +
    "\031\014\030\016\033\022\026\025\036\026\032\027\034" +
    "\030\023\031\016\034\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\252\036\256\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static int contador=1;
    public static int num=1;
    public static NodoAST nodo_aux = new NodoAST();
    public static NodoAST nodo_aux_td = new NodoAST();
    public static NodoAST nodo_aux_val = new NodoAST();
    public static boolean flag_exp1=false;
    public static boolean flag_exp2=false;
    public static ArrayList<NodoAST> lista_auxNodo = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo2 = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo3 = new ArrayList<NodoAST>(); //arreglo de nombres
    public static ArrayList<NodoAST> lista_auxNodo4 = new ArrayList<NodoAST>(); //expresiones1
    public static ArrayList<NodoAST> lista_auxNodo5 = new ArrayList<NodoAST>(); //expresiones2

    
    //public static Datos.ArbolAST Datos.arbol = new Datos.ArbolAST();
    //public static ArrayList<ErrorA> errores = new ArrayList<ErrorA>();
    
    
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= COMIENZO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> start_val = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // COMIENZO ::= CONTENIDO 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        lista_auxNodo4 = new ArrayList<NodoAST>();
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        lista_auxNodo2 = new ArrayList<NodoAST>();
                        lista_auxNodo = new ArrayList<NodoAST>();
                        nodo_aux = new NodoAST();    
                        nodo_aux_td = new NodoAST(); 
                        nodo_aux_val = new NodoAST();                  
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // COMIENZO ::= COMIENZO CONTENIDO 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= inicio CODIGO fin 
            {
              ArrayList<NodoAST> RESULT =null;
		int varinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varfin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                
                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = lista_codigo;
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                Datos.arbol.raiz.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDO ::= METODO 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= INSTRUCCIONES 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_instrucciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            NodoAST t_instrucciones = new NodoAST();
                            t_instrucciones.Nodos = lista_instrucciones; //acarreo de nodos inferiores
                            System.out.println("Se agregaron nodos a <Instrucciones>");
                            t_instrucciones.setToken("<Instrucciones>");
                            t_instrucciones.setTipo("Instrucciones");
                            System.out.println(t_instrucciones.token + " 2");

                            nodo_aux = t_instrucciones;
                            RESULT= new ArrayList<NodoAST>();
                            RESULT.add(t_instrucciones);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= CODIGO INSTRUCCIONES 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_instrucciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_Codigo = new NodoAST();
                        t_Codigo.Nodos = new ArrayList<NodoAST>(); 
                        t_Codigo.setToken("<Instrucciones>");
                        t_Codigo.setTipo("Instrucciones");
                        t_Codigo.Nodos = lista_codigo;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<Instruccion>");
                        t_expresion2.setTipo("Instruccion");
                        t_expresion2.Nodos = lista_instrucciones;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_Codigo);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= DECLARACION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_dec = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            NodoAST t_declaracion = new NodoAST();
                                            t_declaracion.Nodos = lista_dec; //acarreo de nodos inferiores
                                            t_declaracion.setToken("<Declaracion>");
                                            t_declaracion.setTipo("Declaracion");

                                            NodoAST t_pyc = new NodoAST();
                                            t_pyc.Nodos = new ArrayList<NodoAST>(); 
                                            t_pyc.setToken("<T_pto_coma>");
                                            t_pyc.setTipo("t punto y coma");
                                            
                                            NodoAST n_pyc = new NodoAST();
                                            n_pyc.setToken(var_pyc);
                                            n_pyc.setTipo("token");
                                            
                                            t_pyc.Nodos.add(n_pyc);
                                            t_declaracion.Nodos.add(t_pyc);
                                            System.out.println("se agrego token punto y coma");
                                            
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_declaracion);

                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= ASIGNACION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_asig = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_asignacion = new NodoAST();
                        t_asignacion.Nodos = lista_asig; //acarreo de nodos inferiores
                        t_asignacion.setToken("<Asingascion>");
                        t_asignacion.setTipo("asignacion");
                        
                        NodoAST t_pyc = new NodoAST();
                        t_pyc.Nodos = new ArrayList<NodoAST>(); 
                        t_pyc.setToken("<T_pto_coma>");
                        t_pyc.setTipo("t punto y coma");
                                            
                        NodoAST n_pyc = new NodoAST();
                        n_pyc.setToken(var_pyc);
                        n_pyc.setTipo("token");
                    
                        t_pyc.Nodos.add(n_pyc);
                        t_asignacion.Nodos.add(t_pyc);
                        System.out.println("se agrego token punto y coma");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_asignacion);
                        System.out.println("se agregaron todos los nombres al nodo de la produccion de Instrucciones");

                    
                    
                    
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INST_SI fin_si 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_si = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_si = new NodoAST();
                        t_si.Nodos = lista_si; //acarreo de nodos inferiores
                        t_si.setToken("<Si>");
                        t_si.setTipo("SI");
                        
                        NodoAST t_fin_si = new NodoAST();
                        t_fin_si.Nodos = new ArrayList<NodoAST>(); 
                        t_fin_si.setToken("<T_fin_si>");
                        t_fin_si.setTipo("t fin si");
                                            
                        NodoAST n_fin_si = new NodoAST();
                        n_fin_si.setToken(vari);
                        n_fin_si.setTipo("fin si");
                    
                        t_fin_si.Nodos.add(n_fin_si);
                        t_si.Nodos.add(t_fin_si);
                        System.out.println("se agrego token fin si");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_si);
                        System.out.println("se agregaron Instrucciones SI");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INST_SEGUN fin_segun 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_segunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_segunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_segun = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_segun = new NodoAST();
                        t_segun.Nodos = lista_segun; //acarreo de nodos inferiores
                        t_segun.setToken("<SEGUN>");
                        t_segun.setTipo("SEGUN");
                        
                        NodoAST t_fin_segun = new NodoAST();
                        t_fin_segun.Nodos = new ArrayList<NodoAST>(); 
                        t_fin_segun.setToken("<T_fin_segun>");
                        t_fin_segun.setTipo("t fin segun");
                                            
                        NodoAST n_fin_segun = new NodoAST();
                        n_fin_segun.setToken(vari);
                        n_fin_segun.setTipo("fin segun");
                    
                        t_fin_segun.Nodos.add(n_fin_segun);
                        t_segun.Nodos.add(t_fin_segun);
                        System.out.println("se agrego token fin segun");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_segun);
                        System.out.println("se agregaron Instrucciones SEGUN");
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= PRINT 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_print = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_print = new NodoAST();
                        t_print.Nodos = lista_print; //acarreo de nodos inferiores
                        t_print.setToken("<IMPRIMIR>");
                        t_print.setTipo("IMPRIMIR");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_print);
                        System.out.println("se agregaron Instrucciones IMPRIMIR");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= PRINTLN 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_print = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_print = new NodoAST();
                        t_print.Nodos = lista_print; //acarreo de nodos inferiores
                        t_print.setToken("<IMPRIMIR_NL>");
                        t_print.setTipo("IMPRIMIR");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_print);
                        System.out.println("se agregaron Instrucciones IMPRIMIR_NL");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= CICLOPARA 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= CICLOMIENTRAS 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= CICLOREPETIR 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= LLAMADA 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PRINT ::= imprimir EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);           
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PRINTLN ::= imprimir_nl EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);           
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= ingresar NOMBRES como TIPODATO con_valor EXPRESIONVAL 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var_ing = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int var_comoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var_comoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var_como = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int var_con_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_con_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_con_valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //corregir lista de nombres
                                            NodoAST t_ingresar = new NodoAST();
                                            t_ingresar.Nodos = new ArrayList<NodoAST>(); 
                                            t_ingresar.setToken("<T_ingresar>");
                                            t_ingresar.setTipo("t ingresar");

                                            
                                            
                                            
                                            NodoAST t_como = new NodoAST();
                                            t_como.Nodos = new ArrayList<NodoAST>(); 
                                            t_como.setToken("<T_como>");
                                            t_como.setTipo("t como");
                                            
                                            NodoAST t_con_valor = new NodoAST();
                                            t_con_valor.Nodos = new ArrayList<NodoAST>(); 
                                            t_con_valor.setToken("<T_con_valor>");
                                            t_con_valor.setTipo("t con valor");

                                            NodoAST n_ingresar = new NodoAST();
                                            n_ingresar.setToken(var_ing);
                                            n_ingresar.setTipo("token");                                           
                                            
                                            
                                            NodoAST n_como = new NodoAST();
                                            n_como.setToken(var_como);
                                            n_como.setTipo("token");
                                            NodoAST t_tipodato = new NodoAST();                  
                                            t_tipodato.Nodos = new ArrayList<NodoAST>(); 
                                            t_tipodato.setToken("<Tipo_Dato>");
                                            t_tipodato.setTipo("tipo_dato");
                                            NodoAST n_con_valor = new NodoAST();
                                            n_con_valor.setToken(var_con_valor);
                                            n_con_valor.setTipo("token");
                                            NodoAST t_expresion = new NodoAST();        
                                            t_expresion.Nodos = new ArrayList<NodoAST>();
                                            t_expresion.setToken("<Expresion>");
                                            t_expresion.setTipo("expresion");

                                            t_ingresar.Nodos.add(n_ingresar);
                                            t_como.Nodos.add(n_como);
                                            t_con_valor.Nodos.add(n_con_valor);
                                            t_tipodato.Nodos.add(nodo_aux_td); //acarreo de nodo
                                            t_expresion.Nodos.add(nodo_aux_val); //acarreo de nodo
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_ingresar);  
                                            for(int i=1; i<lista_auxNodo3.size(); i++){
                                                RESULT.add(lista_auxNodo3.get(i));
                                                System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                                            }
                                            RESULT.add(lista_auxNodo3.get(0));

                                            RESULT.add(t_como);  
                                            RESULT.add(t_tipodato);
                                            RESULT.add(t_con_valor);  
                                            RESULT.add(t_expresion);

                                            System.out.println("Se agregaron con exito los nodos de la produccion Declaracion");
                                            lista_auxNodo3 = new ArrayList<NodoAST>();  
                                        
                                        
                                        
                                        
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NOMBRES ::= NOMBRE 
            {
              ArrayList<NodoAST> RESULT =null;
		lista_auxNodo3.add(nodo_aux_td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOMBRES ::= NOMBRES NOMBRE 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        lista_auxNodo3.add(nodo_aux_td);
                        lista_auxNodo3.add(nodo_aux_val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOMBRE ::= var_identificador coma 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");

                        NodoAST t_coma = new NodoAST();
                        t_coma.Nodos = new ArrayList<NodoAST>(); 
                        t_coma.setToken("<T_coma>");
                        t_coma.setTipo("t coma");     
                        
                        NodoAST n_coma = new NodoAST();
                        n_coma.setToken(var_coma);
                        n_coma.setTipo("token");       
                        
                        t_identificador.Nodos.add(n_identificador);
                        t_coma.Nodos.add(n_coma);

                        nodo_aux_td = t_identificador;
                        nodo_aux_val = t_coma;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOMBRE ::= var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        nodo_aux_td = t_identificador;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPODATO ::= tcadena 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPODATO ::= tnumero 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPODATO ::= tbooleano 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPODATO ::= tcaracter 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESIONVAL ::= digito 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESIONVAL ::= decimal 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESIONVAL ::= cadena 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESIONVAL ::= caracter 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESIONVAL ::= verdadero 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESIONVAL ::= falso 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= NOMBRES flecha EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_fechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_fecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_fecha = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = lista_expresiones; 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        

                        NodoAST t_flecha = new NodoAST();
                        t_flecha.Nodos = new ArrayList<NodoAST>(); 
                        t_flecha.setToken("<T_flecha>");
                        t_flecha.setTipo("t flecha");
                        
                        NodoAST n_flecha = new NodoAST();
                        n_flecha.setToken(var_fecha);
                        n_flecha.setTipo("token");

                        t_flecha.Nodos.add(n_flecha);

                        for(int i=1; i<lista_auxNodo3.size(); i++){
                            lista_auxNodo.add(lista_auxNodo3.get(i));
                            System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                        }
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(lista_auxNodo3.get(0));
                        RESULT.add(t_flecha);
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);

                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION mayorigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION menorigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION esigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION esdiferente EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST t_and = new NodoAST();
                        t_and.Nodos = new ArrayList<NodoAST>(); 
                        t_and.setToken("<T_and>");
                        t_and.setTipo("t and");     
                        
                        NodoAST n_and = new NodoAST();
                        n_and.setToken(var_and);
                        n_and.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        t_and.Nodos.add(n_and);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(t_and);
                        RESULT.add(t_expresionD);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= resta EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_restaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_restaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_resta = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_resta = new NodoAST();
                        t_resta.Nodos = new ArrayList<NodoAST>(); 
                        t_resta.setToken("<T_abre_parentesis>");
                        t_resta.setTipo("t abre parentesis");     
                        
                        NodoAST n_resta = new NodoAST();
                        n_resta.setToken(var_resta);
                        n_resta.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        t_resta.Nodos.add(n_resta);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_resta);
                        RESULT.add(t_expresion);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= not EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_not = new NodoAST();
                        t_not.Nodos = new ArrayList<NodoAST>(); 
                        t_not.setToken("<T_abre_parentesis>");
                        t_not.setTipo("t abre parentesis");     
                        
                        NodoAST n_not = new NodoAST();
                        n_not.setToken(var_not);
                        n_not.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        t_not.Nodos.add(n_not);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_not);
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= aparentecis EXPRESION cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int aparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String apar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cpar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_apar = new NodoAST();
                        t_apar.Nodos = new ArrayList<NodoAST>(); 
                        t_apar.setToken("<T_abre_parentesis>");
                        t_apar.setTipo("t abre parentesis");     
                        
                        NodoAST n_apar = new NodoAST();
                        n_apar.setToken(apar);
                        n_apar.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = lista_expresiones; 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");

                        NodoAST t_cpar = new NodoAST();
                        t_cpar.Nodos = new ArrayList<NodoAST>(); 
                        t_cpar.setToken("<T_cierra_parentesis>");
                        t_cpar.setTipo("t cierra parentesis");     
                        
                        NodoAST n_cpar = new NodoAST();
                        n_cpar.setToken(cpar);
                        n_cpar.setTipo("token");

                        t_apar.Nodos.add(n_apar);
                        t_cpar.Nodos.add(n_cpar);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_apar);
                        RESULT.add(t_expresion);
                        RESULT.add(t_cpar);
                        



                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos.add(t_identificador);
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESIONVAL 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos.add(nodo_aux_val);
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST_SI ::= si EXPRESION enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST_SI ::= si EXPRESION enton CODIGO de_lo_contrario CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_codigoD = new NodoAST();
                        t_codigoD.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoD.setToken("<T_Instrucciones>");
                        t_codigoD.setTipo("t T_Instrucciones");
                        t_codigoD.Nodos = lista_codigo2;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);
                        RESULT.add(t_codigoD);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INST_SI ::= si EXPRESION enton CODIGO OSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_expresionO = new NodoAST();
                        t_expresionO.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionO.setToken("<T_OSI>");
                        t_expresionO.setTipo("t expresion");
                        t_expresionO.Nodos = lista_osi;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(t_expresionO);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_SI ::= si EXPRESION enton CODIGO OSI de_lo_contrario CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_codigoD = new NodoAST();
                        t_codigoD.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoD.setToken("<T_Instrucciones>");
                        t_codigoD.setTipo("t T_Instrucciones");
                        t_codigoD.Nodos = lista_codigo2;

                        NodoAST t_expresionO = new NodoAST();
                        t_expresionO.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionO.setToken("<T_OSI>");
                        t_expresionO.setTipo("t expresion");
                        t_expresionO.Nodos = lista_osi;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(t_expresionO);
                        RESULT.add(tnodo3);
                        RESULT.add(t_codigoD);



            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OSI ::= OSI CONDELOSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_conosileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_conosiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_conosi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_osi;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_expresion>");
                        t_expresion2.setTipo("t expresion");
                        t_expresion2.Nodos = lista_osi;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OSI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OSI ::= CONDELOSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_conosileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_conosiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_conosi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_conosi;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OSI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDELOSI ::= o_si EXPRESION CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(nodo_aux);
                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDELOSI",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_SEGUN ::= segun var_identificador hacer CASOS de_lo_contrario enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_casos; 
                        t_expresionI.setToken("<T_Casos>");
                        t_expresionI.setTipo("t casos");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresionI);                        
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_SEGUN ::= segun var_identificador hacer CASOS 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_casos; 
                        t_expresionI.setToken("<T_Casos>");
                        t_expresionI.setTipo("t casos");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresionI);     
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INST_SEGUN ::= segun var_identificador hacer de_lo_contrario enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);

                        RESULT.add(t_codigoI);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASOS ::= CASOS CASO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_casos1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_casos1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_casos1 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_casos2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casos2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_casos1;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_expresion>");
                        t_expresion2.setTipo("t expresion");
                        t_expresion2.Nodos = lista_casos2;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASOS ::= CASO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_casos;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASO ::= interrogacionA EXPRESIONVAL interrogacionC enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> vari2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = vari2;
                        tnodo2.setToken("<T_valor>");
                        tnodo2.setTipo("<t valor");     
                        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");         

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");   

                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(token4);
                        RESULT.add(t_codigoI);     
                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CICLOPARA ::= para var_identificador flecha digito hasta digito hacer CODIGO fin_para 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CICLOPARA ::= para var_identificador flecha digito hasta digito con incremental digito hacer CODIGO fin_para 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CICLOPARA ::= para var_identificador flecha digito hasta digito hacer fin_para 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CICLOMIENTRAS ::= mientras EXPRESION hacer CODIGO fin_mientras 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CICLOMIENTRAS ::= mientras EXPRESION hacer fin_mientras 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CICLOREPETIR ::= repetir CODIGO hasta_que EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CICLOREPETIR ::= repetir hasta_que EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODO ::= metodo var_identificador CODIGO fin_metodo 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO ::= metodo var_identificador aparentecis LPARAMETROS cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= funcion var_identificador TIPODATO CODIGO fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= funcion var_identificador TIPODATO con_parametros aparentecis LPARAMETROS cparentecis CODIGO fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMADA ::= ejecutar var_identificador aparentecis cparentecis puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LLAMADA ::= ejecutar var_identificador aparentecis LVALORES cparentecis puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LPARAMETROS ::= LPARAMETROS coma PARAMETROS 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LPARAMETROS ::= PARAMETROS 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS ::= TIPODATO var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LVALORES ::= LVALORES coma EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LVALORES ::= EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
