
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto.analizadores;

import java_cup.runtime.*;
import proyecto.main.*;
import java.util.ArrayList;
import proyecto.estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\003\000\002\003\004\000\002\005\003" +
    "\000\002\005\003\000\002\004\003\000\002\004\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\011\005\000\002\026\005\000\002\027\005\000" +
    "\002\006\010\000\002\013\003\000\002\013\004\000\002" +
    "\014\004\000\002\014\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\015\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\007\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\004\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\006\000\002\017\010\000" +
    "\002\017\007\000\002\017\011\000\002\020\004\000\002" +
    "\020\003\000\002\022\006\000\002\023\011\000\002\023" +
    "\006\000\002\023\010\000\002\025\004\000\002\025\003" +
    "\000\002\024\007\000\002\030\013\000\002\030\016\000" +
    "\002\030\012\000\002\031\007\000\002\031\006\000\002" +
    "\032\006\000\002\032\005\000\002\033\006\000\002\033" +
    "\012\000\002\034\007\000\002\034\013\000\002\035\006" +
    "\000\002\035\007\000\002\036\005\000\002\036\003\000" +
    "\002\037\004\000\002\040\005\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\053\005\001\002\000\004\002\307\001" +
    "\002\000\030\055\022\060\035\065\021\070\007\075\015" +
    "\100\011\101\026\111\032\112\014\113\010\116\034\001" +
    "\002\000\004\025\306\001\002\000\004\116\267\001\002" +
    "\000\032\020\043\036\044\042\042\104\052\105\051\111" +
    "\032\114\045\116\041\117\046\120\047\121\054\122\053" +
    "\001\002\000\032\055\022\060\035\065\021\070\007\075" +
    "\015\077\261\100\011\101\026\111\032\112\014\113\010" +
    "\116\034\001\002\000\062\014\ufff0\054\ufff0\055\ufff0\060" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\070\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102" +
    "\ufff0\103\ufff0\106\ufff0\107\ufff0\111\ufff0\112\ufff0\113\ufff0" +
    "\116\ufff0\001\002\000\004\025\257\001\002\000\032\020" +
    "\043\036\044\042\042\104\052\105\051\111\032\114\045" +
    "\116\041\117\046\120\047\121\054\122\053\001\002\000" +
    "\032\020\043\036\044\042\042\104\052\105\051\111\032" +
    "\114\045\116\041\117\046\120\047\121\054\122\053\001" +
    "\002\000\062\014\ufffa\054\ufffa\055\ufffa\060\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\074\ufffa\075" +
    "\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa" +
    "\106\ufffa\107\ufffa\111\ufffa\112\ufffa\113\ufffa\116\ufffa\001" +
    "\002\000\062\014\ufff1\054\ufff1\055\ufff1\060\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\067\ufff1\070\ufff1\074\ufff1\075" +
    "\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1" +
    "\106\ufff1\107\ufff1\111\ufff1\112\ufff1\113\ufff1\116\ufff1\001" +
    "\002\000\036\054\212\055\022\060\035\065\021\070\007" +
    "\075\015\100\011\101\026\102\207\106\214\111\032\112" +
    "\014\113\010\116\034\001\002\000\004\116\167\001\002" +
    "\000\004\116\034\001\002\000\004\067\155\001\002\000" +
    "\004\025\154\001\002\000\010\046\uffea\056\uffea\116\uffea" +
    "\001\002\000\032\020\043\036\044\042\042\104\052\105" +
    "\051\111\032\114\045\116\041\117\046\120\047\121\054" +
    "\122\053\001\002\000\062\014\ufff3\054\ufff3\055\ufff3\060" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\070\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102" +
    "\ufff3\103\ufff3\106\ufff3\107\ufff3\111\ufff3\112\ufff3\113\ufff3" +
    "\116\ufff3\001\002\000\062\014\ufff2\054\ufff2\055\ufff2\060" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2\070\ufff2" +
    "\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102" +
    "\ufff2\103\ufff2\106\ufff2\107\ufff2\111\ufff2\112\ufff2\113\ufff2" +
    "\116\ufff2\001\002\000\004\064\151\001\002\000\004\116" +
    "\141\001\002\000\062\014\ufff4\054\ufff4\055\ufff4\060\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\067\ufff4\070\ufff4\074" +
    "\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4" +
    "\103\ufff4\106\ufff4\107\ufff4\111\ufff4\112\ufff4\113\ufff4\116" +
    "\ufff4\001\002\000\012\021\140\046\uffe7\056\uffe7\116\uffe7" +
    "\001\002\000\032\020\043\036\044\042\042\104\052\105" +
    "\051\111\032\114\045\116\041\117\046\120\047\121\054" +
    "\122\053\001\002\000\006\046\037\116\034\001\002\000" +
    "\032\020\043\036\044\042\042\104\052\105\051\111\032" +
    "\114\045\116\041\117\046\120\047\121\054\122\053\001" +
    "\002\000\010\046\uffe9\056\uffe9\116\uffe9\001\002\000\134" +
    "\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\041\uffc9\054" +
    "\uffc9\055\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\067\uffc9\070\uffc9\072\uffc9\074\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9" +
    "\106\uffc9\107\uffc9\111\uffc9\112\uffc9\113\uffc9\116\uffc9\001" +
    "\002\000\032\020\043\036\044\042\042\104\052\105\051" +
    "\111\032\114\045\116\041\117\046\120\047\121\054\122" +
    "\053\001\002\000\032\020\043\036\044\042\042\104\052" +
    "\105\051\111\032\114\045\116\041\117\046\120\047\121" +
    "\054\122\053\001\002\000\032\020\043\036\044\042\042" +
    "\104\052\105\051\111\032\114\045\116\041\117\046\120" +
    "\047\121\054\122\053\001\002\000\136\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\041\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\072\uffe0\074\uffe0\075\uffe0\076" +
    "\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\106\uffe0" +
    "\107\uffe0\111\uffe0\112\uffe0\113\uffe0\116\uffe0\001\002\000" +
    "\136\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\014\uffe2" +
    "\015\uffe2\017\uffe2\020\uffe2\021\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\041\uffe2\054\uffe2\055\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\072\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\103\uffe2\106\uffe2\107\uffe2\111\uffe2\112\uffe2\113\uffe2" +
    "\116\uffe2\001\002\000\136\005\uffe1\006\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\041\uffe1\054\uffe1\055\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\072\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\106\uffe1\107\uffe1\111" +
    "\uffe1\112\uffe1\113\uffe1\116\uffe1\001\002\000\134\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\012\uffc7\014\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\041\uffc7\054\uffc7\055" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\072\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\106\uffc7" +
    "\107\uffc7\111\uffc7\112\uffc7\113\uffc7\116\uffc7\001\002\000" +
    "\136\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\017\uffdc\020\uffdc\021\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\041\uffdc\054\uffdc\055\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\072\uffdc" +
    "\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102" +
    "\uffdc\103\uffdc\106\uffdc\107\uffdc\111\uffdc\112\uffdc\113\uffdc" +
    "\116\uffdc\001\002\000\136\005\uffdd\006\uffdd\007\uffdd\011" +
    "\uffdd\012\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\041\uffdd\054\uffdd\055\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\072\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\102\uffdd\103\uffdd\106\uffdd\107\uffdd\111" +
    "\uffdd\112\uffdd\113\uffdd\116\uffdd\001\002\000\136\005\uffde" +
    "\006\uffde\007\uffde\011\uffde\012\uffde\014\uffde\015\uffde\017" +
    "\uffde\020\uffde\021\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\041\uffde\054" +
    "\uffde\055\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\070\uffde\072\uffde\074\uffde\075" +
    "\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde" +
    "\106\uffde\107\uffde\111\uffde\112\uffde\113\uffde\116\uffde\001" +
    "\002\000\136\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf" +
    "\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\041\uffdf\054\uffdf\055\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf" +
    "\072\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\106\uffdf\107\uffdf\111\uffdf\112\uffdf" +
    "\113\uffdf\116\uffdf\001\002\000\040\005\063\006\072\007" +
    "\060\011\057\012\071\020\062\025\uffdb\026\074\027\070" +
    "\030\064\031\073\032\065\033\061\034\066\035\067\001" +
    "\002\000\134\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8" +
    "\014\uffc8\017\uffc8\020\uffc8\021\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\041\uffc8\054\uffc8\055\uffc8\060\uffc8\061\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\072\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102" +
    "\uffc8\103\uffc8\106\uffc8\107\uffc8\111\uffc8\112\uffc8\113\uffc8" +
    "\116\uffc8\001\002\000\004\016\112\001\002\000\032\020" +
    "\043\036\044\042\042\104\052\105\051\111\032\114\045" +
    "\116\041\117\046\120\047\121\054\122\053\001\002\000" +
    "\032\020\043\036\044\042\042\104\052\105\051\111\032" +
    "\114\045\116\041\117\046\120\047\121\054\122\053\001" +
    "\002\000\032\020\043\036\044\042\042\104\052\105\051" +
    "\111\032\114\045\116\041\117\046\120\047\121\054\122" +
    "\053\001\002\000\032\020\043\036\044\042\042\104\052" +
    "\105\051\111\032\114\045\116\041\117\046\120\047\121" +
    "\054\122\053\001\002\000\032\020\043\036\044\042\042" +
    "\104\052\105\051\111\032\114\045\116\041\117\046\120" +
    "\047\121\054\122\053\001\002\000\032\020\043\036\044" +
    "\042\042\104\052\105\051\111\032\114\045\116\041\117" +
    "\046\120\047\121\054\122\053\001\002\000\032\020\043" +
    "\036\044\042\042\104\052\105\051\111\032\114\045\116" +
    "\041\117\046\120\047\121\054\122\053\001\002\000\032" +
    "\020\043\036\044\042\042\104\052\105\051\111\032\114" +
    "\045\116\041\117\046\120\047\121\054\122\053\001\002" +
    "\000\032\020\043\036\044\042\042\104\052\105\051\111" +
    "\032\114\045\116\041\117\046\120\047\121\054\122\053" +
    "\001\002\000\032\020\043\036\044\042\042\104\052\105" +
    "\051\111\032\114\045\116\041\117\046\120\047\121\054" +
    "\122\053\001\002\000\032\020\043\036\044\042\042\104" +
    "\052\105\051\111\032\114\045\116\041\117\046\120\047" +
    "\121\054\122\053\001\002\000\032\020\043\036\044\042" +
    "\042\104\052\105\051\111\032\114\045\116\041\117\046" +
    "\120\047\121\054\122\053\001\002\000\032\020\043\036" +
    "\044\042\042\104\052\105\051\111\032\114\045\116\041" +
    "\117\046\120\047\121\054\122\053\001\002\000\134\005" +
    "\uffd4\006\uffd4\007\uffd4\011\057\012\uffd4\014\uffd4\017\uffd4" +
    "\020\062\021\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\041\uffd4\054\uffd4" +
    "\055\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\106" +
    "\uffd4\107\uffd4\111\uffd4\112\uffd4\113\uffd4\116\uffd4\001\002" +
    "\000\134\005\uffd1\006\uffd1\007\uffd1\011\057\012\uffd1\014" +
    "\uffd1\017\uffd1\020\062\021\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\041" +
    "\uffd1\054\uffd1\055\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\072\uffd1\074" +
    "\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\103\uffd1\106\uffd1\107\uffd1\111\uffd1\112\uffd1\113\uffd1\116" +
    "\uffd1\001\002\000\134\005\uffd8\006\uffd8\007\uffd8\011\057" +
    "\012\uffd8\014\uffd8\017\uffd8\020\062\021\uffd8\025\uffd8\026" +
    "\074\027\070\030\064\031\073\032\065\033\061\034\066" +
    "\035\067\041\uffd8\054\uffd8\055\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8" +
    "\072\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101" +
    "\uffd8\102\uffd8\103\uffd8\106\uffd8\107\uffd8\111\uffd8\112\uffd8" +
    "\113\uffd8\116\uffd8\001\002\000\134\005\uffd5\006\uffd5\007" +
    "\uffd5\011\057\012\uffd5\014\uffd5\017\uffd5\020\062\021\uffd5" +
    "\025\uffd5\026\074\027\070\030\064\031\073\032\065\033" +
    "\061\034\066\035\067\041\uffd5\054\uffd5\055\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\072\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\103\uffd5\106\uffd5\107\uffd5\111" +
    "\uffd5\112\uffd5\113\uffd5\116\uffd5\001\002\000\134\005\uffd3" +
    "\006\uffd3\007\uffd3\011\057\012\uffd3\014\uffd3\017\uffd3\020" +
    "\062\021\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\041\uffd3\054\uffd3\055" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\072\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\106\uffd3" +
    "\107\uffd3\111\uffd3\112\uffd3\113\uffd3\116\uffd3\001\002\000" +
    "\134\005\uffcd\006\uffcd\007\uffcd\011\057\012\uffcd\014\uffcd" +
    "\017\uffcd\020\062\021\uffcd\025\uffcd\026\074\027\070\030" +
    "\064\031\073\032\065\033\061\034\uffcd\035\uffcd\041\uffcd" +
    "\054\uffcd\055\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\072\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103" +
    "\uffcd\106\uffcd\107\uffcd\111\uffcd\112\uffcd\113\uffcd\116\uffcd" +
    "\001\002\000\134\005\uffce\006\uffce\007\uffce\011\057\012" +
    "\uffce\014\uffce\017\uffce\020\062\021\uffce\025\uffce\026\074" +
    "\027\070\030\064\031\073\032\065\033\061\034\uffce\035" +
    "\uffce\041\uffce\054\uffce\055\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\072" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\103\uffce\106\uffce\107\uffce\111\uffce\112\uffce\113" +
    "\uffce\116\uffce\001\002\000\134\005\uffcf\006\uffcf\007\uffcf" +
    "\011\057\012\uffcf\014\uffcf\017\uffcf\020\062\021\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\041\uffcf\054\uffcf\055\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\072\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100" +
    "\uffcf\101\uffcf\102\uffcf\103\uffcf\106\uffcf\107\uffcf\111\uffcf" +
    "\112\uffcf\113\uffcf\116\uffcf\001\002\000\134\005\uffd2\006" +
    "\uffd2\007\uffd2\011\057\012\uffd2\014\uffd2\017\uffd2\020\062" +
    "\021\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\041\uffd2\054\uffd2\055\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\070\uffd2\072\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\106\uffd2\107" +
    "\uffd2\111\uffd2\112\uffd2\113\uffd2\116\uffd2\001\002\000\134" +
    "\005\uffda\006\072\007\060\011\057\012\071\014\uffda\017" +
    "\uffda\020\062\021\uffda\025\uffda\026\074\027\070\030\064" +
    "\031\073\032\065\033\061\034\066\035\067\041\uffda\054" +
    "\uffda\055\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\072\uffda\074\uffda\075" +
    "\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda" +
    "\106\uffda\107\uffda\111\uffda\112\uffda\113\uffda\116\uffda\001" +
    "\002\000\134\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\014\uffd9\017\uffd9\020\uffd9\021\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\041\uffd9\054\uffd9\055\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9" +
    "\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\103\uffd9\106\uffd9\107\uffd9\111\uffd9\112\uffd9\113\uffd9" +
    "\116\uffd9\001\002\000\134\005\uffd0\006\uffd0\007\uffd0\011" +
    "\057\012\uffd0\014\uffd0\017\uffd0\020\062\021\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\041\uffd0\054\uffd0\055\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\072\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0" +
    "\101\uffd0\102\uffd0\103\uffd0\106\uffd0\107\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\116\uffd0\001\002\000\134\005\uffd7\006\uffd7" +
    "\007\uffd7\011\057\012\uffd7\014\uffd7\017\uffd7\020\062\021" +
    "\uffd7\025\uffd7\026\074\027\070\030\064\031\073\032\065" +
    "\033\061\034\066\035\067\041\uffd7\054\uffd7\055\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\072\uffd7\074\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\106\uffd7\107\uffd7" +
    "\111\uffd7\112\uffd7\113\uffd7\116\uffd7\001\002\000\032\020" +
    "\043\036\044\042\042\104\052\105\051\111\032\114\045" +
    "\116\041\117\046\120\047\121\054\122\053\001\002\000" +
    "\040\005\063\006\072\007\060\011\057\012\071\017\114" +
    "\020\062\026\074\027\070\030\064\031\073\032\065\033" +
    "\061\034\066\035\067\001\002\000\134\005\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\012\uffd6\014\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\041\uffd6\054\uffd6\055\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\072\uffd6\074\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\106\uffd6\107\uffd6" +
    "\111\uffd6\112\uffd6\113\uffd6\116\uffd6\001\002\000\134\005" +
    "\uffcb\006\uffcb\007\uffcb\011\057\012\uffcb\014\uffcb\017\uffcb" +
    "\020\062\021\uffcb\025\uffcb\026\074\027\070\030\064\031" +
    "\073\032\065\033\061\034\uffcb\035\uffcb\041\uffcb\054\uffcb" +
    "\055\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\070\uffcb\072\uffcb\074\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\106" +
    "\uffcb\107\uffcb\111\uffcb\112\uffcb\113\uffcb\116\uffcb\001\002" +
    "\000\134\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\014" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\041" +
    "\uffcc\054\uffcc\055\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\074" +
    "\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc" +
    "\103\uffcc\106\uffcc\107\uffcc\111\uffcc\112\uffcc\113\uffcc\116" +
    "\uffcc\001\002\000\040\005\063\006\072\007\060\011\057" +
    "\012\071\020\062\026\074\027\070\030\064\031\073\032" +
    "\065\033\061\034\066\035\067\041\120\001\002\000\134" +
    "\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\014\uffca\017" +
    "\uffca\020\uffca\021\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\041\uffca\054" +
    "\uffca\055\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\072\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca" +
    "\106\uffca\107\uffca\111\uffca\112\uffca\113\uffca\116\uffca\001" +
    "\002\000\040\005\063\006\072\007\060\011\057\012\071" +
    "\020\062\026\074\027\070\030\064\031\073\032\065\033" +
    "\061\034\066\035\067\061\122\001\002\000\030\055\022" +
    "\060\035\065\021\070\007\075\015\100\011\101\026\111" +
    "\032\112\014\113\010\116\034\001\002\000\036\055\022" +
    "\060\035\062\127\063\130\064\uffc6\065\021\070\007\075" +
    "\015\100\011\101\026\111\032\112\014\113\010\116\034" +
    "\001\002\000\062\014\ufff9\054\ufff9\055\ufff9\060\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\067\ufff9\070\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103" +
    "\ufff9\106\ufff9\107\ufff9\111\ufff9\112\ufff9\113\ufff9\116\ufff9" +
    "\001\002\000\010\062\135\063\130\064\uffc4\001\002\000" +
    "\010\062\uffc1\063\uffc1\064\uffc1\001\002\000\030\055\022" +
    "\060\035\065\021\070\007\075\015\100\011\101\026\111" +
    "\032\112\014\113\010\116\034\001\002\000\032\020\043" +
    "\036\044\042\042\104\052\105\051\111\032\114\045\116" +
    "\041\117\046\120\047\121\054\122\053\001\002\000\040" +
    "\005\063\006\072\007\060\011\057\012\071\020\062\026" +
    "\074\027\070\030\064\031\073\032\065\033\061\034\066" +
    "\035\067\061\132\001\002\000\030\055\022\060\035\065" +
    "\021\070\007\075\015\100\011\101\026\111\032\112\014" +
    "\113\010\116\034\001\002\000\036\055\022\060\035\062" +
    "\uffc0\063\uffc0\064\uffc0\065\021\070\007\075\015\100\011" +
    "\101\026\111\032\112\014\113\010\116\034\001\002\000" +
    "\032\055\022\060\035\064\uffc5\065\021\070\007\075\015" +
    "\100\011\101\026\111\032\112\014\113\010\116\034\001" +
    "\002\000\030\055\022\060\035\065\021\070\007\075\015" +
    "\100\011\101\026\111\032\112\014\113\010\116\034\001" +
    "\002\000\010\062\uffc2\063\uffc2\064\uffc2\001\002\000\032" +
    "\055\022\060\035\064\uffc3\065\021\070\007\075\015\100" +
    "\011\101\026\111\032\112\014\113\010\116\034\001\002" +
    "\000\010\046\uffe8\056\uffe8\116\uffe8\001\002\000\004\042" +
    "\142\001\002\000\034\020\043\036\044\041\143\042\042" +
    "\104\052\105\051\111\032\114\045\116\041\117\046\120" +
    "\047\121\054\122\053\001\002\000\134\005\uffae\006\uffae" +
    "\007\uffae\011\uffae\012\uffae\014\uffae\017\uffae\020\uffae\021" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\041\uffae\054\uffae\055\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\072\uffae\074\uffae\075\uffae\076\uffae\077" +
    "\uffae\100\uffae\101\uffae\102\uffae\103\uffae\106\uffae\107\uffae" +
    "\111\uffae\112\uffae\113\uffae\116\uffae\001\002\000\042\005" +
    "\063\006\072\007\060\011\057\012\071\020\062\021\uffa8" +
    "\026\074\027\070\030\064\031\073\032\065\033\061\034" +
    "\066\035\067\041\uffa8\001\002\000\006\021\146\041\147" +
    "\001\002\000\032\020\043\036\044\042\042\104\052\105" +
    "\051\111\032\114\045\116\041\117\046\120\047\121\054" +
    "\122\053\001\002\000\134\005\uffad\006\uffad\007\uffad\011" +
    "\uffad\012\uffad\014\uffad\017\uffad\020\uffad\021\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\041\uffad\054\uffad\055\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\072\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad" +
    "\101\uffad\102\uffad\103\uffad\106\uffad\107\uffad\111\uffad\112" +
    "\uffad\113\uffad\116\uffad\001\002\000\042\005\063\006\072" +
    "\007\060\011\057\012\071\020\062\021\uffa9\026\074\027" +
    "\070\030\064\031\073\032\065\033\061\034\066\035\067" +
    "\041\uffa9\001\002\000\062\014\ufff6\054\ufff6\055\ufff6\060" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6\070\ufff6" +
    "\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102" +
    "\ufff6\103\ufff6\106\ufff6\107\ufff6\111\ufff6\112\ufff6\113\ufff6" +
    "\116\ufff6\001\002\000\040\005\063\006\072\007\060\011" +
    "\057\012\071\020\062\025\153\026\074\027\070\030\064" +
    "\031\073\032\065\033\061\034\066\035\067\001\002\000" +
    "\062\014\uffee\054\uffee\055\uffee\060\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\067\uffee\070\uffee\074\uffee\075\uffee\076" +
    "\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\106\uffee" +
    "\107\uffee\111\uffee\112\uffee\113\uffee\116\uffee\001\002\000" +
    "\062\014\ufff7\054\ufff7\055\ufff7\060\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\067\ufff7\070\ufff7\074\ufff7\075\ufff7\076" +
    "\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7\106\ufff7" +
    "\107\ufff7\111\ufff7\112\ufff7\113\ufff7\116\ufff7\001\002\000" +
    "\062\014\ufff5\054\ufff5\055\ufff5\060\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\065\ufff5\067\ufff5\070\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\106\ufff5" +
    "\107\ufff5\111\ufff5\112\ufff5\113\ufff5\116\ufff5\001\002\000" +
    "\006\056\157\116\034\001\002\000\012\047\164\050\161" +
    "\051\160\052\163\001\002\000\040\021\uffe4\041\uffe4\055" +
    "\uffe4\057\uffe4\060\uffe4\065\uffe4\070\uffe4\075\uffe4\100\uffe4" +
    "\101\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\116\uffe4\001" +
    "\002\000\040\021\uffe6\041\uffe6\055\uffe6\057\uffe6\060\uffe6" +
    "\065\uffe6\070\uffe6\075\uffe6\100\uffe6\101\uffe6\110\uffe6\111" +
    "\uffe6\112\uffe6\113\uffe6\116\uffe6\001\002\000\004\057\165" +
    "\001\002\000\040\021\uffe3\041\uffe3\055\uffe3\057\uffe3\060" +
    "\uffe3\065\uffe3\070\uffe3\075\uffe3\100\uffe3\101\uffe3\110\uffe3" +
    "\111\uffe3\112\uffe3\113\uffe3\116\uffe3\001\002\000\040\021" +
    "\uffe5\041\uffe5\055\uffe5\057\uffe5\060\uffe5\065\uffe5\070\uffe5" +
    "\075\uffe5\100\uffe5\101\uffe5\110\uffe5\111\uffe5\112\uffe5\113" +
    "\uffe5\116\uffe5\001\002\000\032\020\043\036\044\042\042" +
    "\104\052\105\051\111\032\114\045\116\041\117\046\120" +
    "\047\121\054\122\053\001\002\000\040\005\063\006\072" +
    "\007\060\011\057\012\071\020\062\025\uffeb\026\074\027" +
    "\070\030\064\031\073\032\065\033\061\034\066\035\067" +
    "\001\002\000\004\066\170\001\002\000\006\014\171\062" +
    "\172\001\002\000\020\104\052\105\051\114\045\117\046" +
    "\120\047\121\054\122\053\001\002\000\004\061\201\001" +
    "\002\000\010\014\171\062\175\067\uffbe\001\002\000\010" +
    "\014\uffbb\062\uffbb\067\uffbb\001\002\000\004\061\177\001" +
    "\002\000\010\014\uffbc\062\uffbc\067\uffbc\001\002\000\030" +
    "\055\022\060\035\065\021\070\007\075\015\100\011\101" +
    "\026\111\032\112\014\113\010\116\034\001\002\000\032" +
    "\055\022\060\035\065\021\067\uffbf\070\007\075\015\100" +
    "\011\101\026\111\032\112\014\113\010\116\034\001\002" +
    "\000\030\055\022\060\035\065\021\070\007\075\015\100" +
    "\011\101\026\111\032\112\014\113\010\116\034\001\002" +
    "\000\032\055\022\060\035\065\021\067\uffbd\070\007\075" +
    "\015\100\011\101\026\111\032\112\014\113\010\116\034" +
    "\001\002\000\004\015\204\001\002\000\004\061\205\001" +
    "\002\000\030\055\022\060\035\065\021\070\007\075\015" +
    "\100\011\101\026\111\032\112\014\113\010\116\034\001" +
    "\002\000\036\014\uffba\055\022\060\035\062\uffba\065\021" +
    "\067\uffba\070\007\075\015\100\011\101\026\111\032\112" +
    "\014\113\010\116\034\001\002\000\004\116\237\001\002" +
    "\000\010\054\236\102\207\106\214\001\002\000\010\054" +
    "\ufffc\102\ufffc\106\ufffc\001\002\000\004\002\000\001\002" +
    "\000\010\054\ufffe\102\ufffe\106\ufffe\001\002\000\004\116" +
    "\216\001\002\000\010\054\ufffb\102\ufffb\106\ufffb\001\002" +
    "\000\012\047\164\050\161\051\160\052\163\001\002\000" +
    "\032\055\022\060\035\065\021\070\007\075\015\100\011" +
    "\101\026\110\220\111\032\112\014\113\010\116\034\001" +
    "\002\000\004\042\223\001\002\000\032\055\022\060\035" +
    "\065\021\070\007\075\015\100\011\101\026\107\222\111" +
    "\032\112\014\113\010\116\034\001\002\000\010\054\uffb0" +
    "\102\uffb0\106\uffb0\001\002\000\004\116\224\001\002\000" +
    "\012\047\164\050\161\051\160\052\163\001\002\000\006" +
    "\021\227\041\230\001\002\000\006\021\uffab\041\uffab\001" +
    "\002\000\004\116\224\001\002\000\030\055\022\060\035" +
    "\065\021\070\007\075\015\100\011\101\026\111\032\112" +
    "\014\113\010\116\034\001\002\000\032\055\022\060\035" +
    "\065\021\070\007\075\015\100\011\101\026\107\232\111" +
    "\032\112\014\113\010\116\034\001\002\000\010\054\uffaf" +
    "\102\uffaf\106\uffaf\001\002\000\006\021\uffac\041\uffac\001" +
    "\002\000\006\021\uffaa\041\uffaa\001\002\000\010\054\ufffd" +
    "\102\ufffd\106\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\032\055\022\060\035\065\021\070\007\075\015\100\011" +
    "\101\026\110\240\111\032\112\014\113\010\116\034\001" +
    "\002\000\004\042\243\001\002\000\032\055\022\060\035" +
    "\065\021\070\007\075\015\100\011\101\026\103\242\111" +
    "\032\112\014\113\010\116\034\001\002\000\010\054\uffb2" +
    "\102\uffb2\106\uffb2\001\002\000\004\116\224\001\002\000" +
    "\006\021\227\041\245\001\002\000\030\055\022\060\035" +
    "\065\021\070\007\075\015\100\011\101\026\111\032\112" +
    "\014\113\010\116\034\001\002\000\032\055\022\060\035" +
    "\065\021\070\007\075\015\100\011\101\026\103\247\111" +
    "\032\112\014\113\010\116\034\001\002\000\010\054\uffb1" +
    "\102\uffb1\106\uffb1\001\002\000\040\005\063\006\072\007" +
    "\060\011\057\012\071\020\062\026\074\027\070\030\064" +
    "\031\073\032\065\033\061\034\066\035\067\066\251\001" +
    "\002\000\032\055\022\060\035\065\021\070\007\075\015" +
    "\076\252\100\011\101\026\111\032\112\014\113\010\116" +
    "\034\001\002\000\062\014\uffb5\054\uffb5\055\uffb5\060\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5\070\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\106\uffb5\107\uffb5\111\uffb5\112\uffb5\113\uffb5\116" +
    "\uffb5\001\002\000\032\055\022\060\035\065\021\070\007" +
    "\075\015\076\254\100\011\101\026\111\032\112\014\113" +
    "\010\116\034\001\002\000\062\014\uffb6\054\uffb6\055\uffb6" +
    "\060\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\070" +
    "\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\103\uffb6\106\uffb6\107\uffb6\111\uffb6\112\uffb6\113" +
    "\uffb6\116\uffb6\001\002\000\040\005\063\006\072\007\060" +
    "\011\057\012\071\020\062\025\256\026\074\027\070\030" +
    "\064\031\073\032\065\033\061\034\066\035\067\001\002" +
    "\000\062\014\uffed\054\uffed\055\uffed\060\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\067\uffed\070\uffed\074\uffed\075\uffed" +
    "\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed\103\uffed\106" +
    "\uffed\107\uffed\111\uffed\112\uffed\113\uffed\116\uffed\001\002" +
    "\000\062\014\ufff8\054\ufff8\055\ufff8\060\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\067\ufff8\070\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\106" +
    "\ufff8\107\ufff8\111\ufff8\112\ufff8\113\ufff8\116\ufff8\001\002" +
    "\000\032\055\022\060\035\065\021\070\007\075\015\077" +
    "\263\100\011\101\026\111\032\112\014\113\010\116\034" +
    "\001\002\000\032\020\043\036\044\042\042\104\052\105" +
    "\051\111\032\114\045\116\041\117\046\120\047\121\054" +
    "\122\053\001\002\000\116\005\063\006\072\007\060\011" +
    "\057\012\071\014\uffb3\020\062\026\074\027\070\030\064" +
    "\031\073\032\065\033\061\034\066\035\067\054\uffb3\055" +
    "\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\067\uffb3" +
    "\070\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\106\uffb3\107\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\116\uffb3\001\002\000\032\020\043\036\044\042" +
    "\042\104\052\105\051\111\032\114\045\116\041\117\046" +
    "\120\047\121\054\122\053\001\002\000\116\005\063\006" +
    "\072\007\060\011\057\012\071\014\uffb4\020\062\026\074" +
    "\027\070\030\064\031\073\032\065\033\061\034\066\035" +
    "\067\054\uffb4\055\uffb4\060\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\067\uffb4\070\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\106\uffb4\107\uffb4" +
    "\111\uffb4\112\uffb4\113\uffb4\116\uffb4\001\002\000\040\005" +
    "\063\006\072\007\060\011\057\012\071\020\062\025\266" +
    "\026\074\027\070\030\064\031\073\032\065\033\061\034" +
    "\066\035\067\001\002\000\062\014\uffec\054\uffec\055\uffec" +
    "\060\uffec\062\uffec\063\uffec\064\uffec\065\uffec\067\uffec\070" +
    "\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec" +
    "\102\uffec\103\uffec\106\uffec\107\uffec\111\uffec\112\uffec\113" +
    "\uffec\116\uffec\001\002\000\004\046\270\001\002\000\004" +
    "\117\271\001\002\000\004\071\272\001\002\000\032\020" +
    "\043\036\044\042\042\104\052\105\051\111\032\114\045" +
    "\116\041\117\046\120\047\121\054\122\053\001\002\000" +
    "\042\005\063\006\072\007\060\011\057\012\071\020\062" +
    "\026\074\027\070\030\064\031\073\032\065\033\061\034" +
    "\066\035\067\066\274\072\275\001\002\000\032\055\022" +
    "\060\035\065\021\070\007\074\304\075\015\100\011\101" +
    "\026\111\032\112\014\113\010\116\034\001\002\000\004" +
    "\073\276\001\002\000\004\117\277\001\002\000\004\066" +
    "\300\001\002\000\030\055\022\060\035\065\021\070\007" +
    "\075\015\100\011\101\026\111\032\112\014\113\010\116" +
    "\034\001\002\000\032\055\022\060\035\065\021\070\007" +
    "\074\302\075\015\100\011\101\026\111\032\112\014\113" +
    "\010\116\034\001\002\000\062\014\uffb8\054\uffb8\055\uffb8" +
    "\060\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\070" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\106\uffb8\107\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\116\uffb8\001\002\000\032\055\022\060\035\065\021" +
    "\070\007\074\305\075\015\100\011\101\026\111\032\112" +
    "\014\113\010\116\034\001\002\000\062\014\uffb7\054\uffb7" +
    "\055\uffb7\060\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067" +
    "\uffb7\070\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\103\uffb7\106\uffb7\107\uffb7\111\uffb7\112" +
    "\uffb7\113\uffb7\116\uffb7\001\002\000\062\014\uffb9\054\uffb9" +
    "\055\uffb9\060\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\067" +
    "\uffb9\070\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\106\uffb9\107\uffb9\111\uffb9\112" +
    "\uffb9\113\uffb9\116\uffb9\001\002\000\062\014\uffef\054\uffef" +
    "\055\uffef\060\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067" +
    "\uffef\070\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef" +
    "\101\uffef\102\uffef\103\uffef\106\uffef\107\uffef\111\uffef\112" +
    "\uffef\113\uffef\116\uffef\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\036\004\017\006\012\011\015\013\035\014\024\015\023" +
    "\017\030\023\022\026\032\027\026\030\027\031\016\032" +
    "\011\035\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\055\016\264\035\047\001\001\000\036\004" +
    "\257\006\012\011\015\013\035\014\024\015\023\017\030" +
    "\023\022\026\032\027\026\030\027\031\016\032\011\035" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\055\016\254\035\047\001\001\000\010\010\055\016" +
    "\247\035\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\207\005\212\006\012\011\123\013\035\014" +
    "\024\015\023\017\030\023\022\026\032\027\026\030\027" +
    "\031\016\032\011\033\210\034\214\035\005\001\001\000" +
    "\002\001\001\000\006\013\155\014\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\055\016\151\035\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\055\016\120\035\047" +
    "\001\001\000\004\014\037\001\001\000\010\010\055\016" +
    "\054\035\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\055\016\116\035\047\001\001\000\010\010" +
    "\055\016\115\035\047\001\001\000\010\010\055\016\114" +
    "\035\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\055" +
    "\016\110\035\047\001\001\000\010\010\055\016\107\035" +
    "\047\001\001\000\010\010\055\016\106\035\047\001\001" +
    "\000\010\010\055\016\105\035\047\001\001\000\010\010" +
    "\055\016\104\035\047\001\001\000\010\010\055\016\103" +
    "\035\047\001\001\000\010\010\055\016\102\035\047\001" +
    "\001\000\010\010\055\016\101\035\047\001\001\000\010" +
    "\010\055\016\100\035\047\001\001\000\010\010\055\016" +
    "\077\035\047\001\001\000\010\010\055\016\076\035\047" +
    "\001\001\000\010\010\055\016\075\035\047\001\001\000" +
    "\010\010\055\016\074\035\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\055" +
    "\016\112\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\122\006" +
    "\012\011\015\013\035\014\024\015\023\017\030\023\022" +
    "\026\032\027\026\030\027\031\016\032\011\035\005\001" +
    "\001\000\040\006\012\011\123\013\035\014\024\015\023" +
    "\017\030\020\124\022\125\023\022\026\032\027\026\030" +
    "\027\031\016\032\011\035\005\001\001\000\002\001\001" +
    "\000\004\022\135\001\001\000\002\001\001\000\036\004" +
    "\133\006\012\011\015\013\035\014\024\015\023\017\030" +
    "\023\022\026\032\027\026\030\027\031\016\032\011\035" +
    "\005\001\001\000\010\010\055\016\130\035\047\001\001" +
    "\000\002\001\001\000\036\004\132\006\012\011\015\013" +
    "\035\014\024\015\023\017\030\023\022\026\032\027\026" +
    "\030\027\031\016\032\011\035\005\001\001\000\034\006" +
    "\012\011\123\013\035\014\024\015\023\017\030\023\022" +
    "\026\032\027\026\030\027\031\016\032\011\035\005\001" +
    "\001\000\034\006\012\011\123\013\035\014\024\015\023" +
    "\017\030\023\022\026\032\027\026\030\027\031\016\032" +
    "\011\035\005\001\001\000\036\004\136\006\012\011\015" +
    "\013\035\014\024\015\023\017\030\023\022\026\032\027" +
    "\026\030\027\031\016\032\011\035\005\001\001\000\002" +
    "\001\001\000\034\006\012\011\123\013\035\014\024\015" +
    "\023\017\030\023\022\026\032\027\026\030\027\031\016" +
    "\032\011\035\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\055\016\143\035\047\040\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\055\016\147\035\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\037\001\001\000\004\007\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\055\016\165\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\173" +
    "\025\172\001\001\000\004\010\202\001\001\000\002\001" +
    "\001\000\004\024\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\177\006\012\011" +
    "\015\013\035\014\024\015\023\017\030\023\022\026\032" +
    "\027\026\030\027\031\016\032\011\035\005\001\001\000" +
    "\034\006\012\011\123\013\035\014\024\015\023\017\030" +
    "\023\022\026\032\027\026\030\027\031\016\032\011\035" +
    "\005\001\001\000\036\004\201\006\012\011\015\013\035" +
    "\014\024\015\023\017\030\023\022\026\032\027\026\030" +
    "\027\031\016\032\011\035\005\001\001\000\034\006\012" +
    "\011\123\013\035\014\024\015\023\017\030\023\022\026" +
    "\032\027\026\030\027\031\016\032\011\035\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\205\006" +
    "\012\011\015\013\035\014\024\015\023\017\030\023\022" +
    "\026\032\027\026\030\027\031\016\032\011\035\005\001" +
    "\001\000\034\006\012\011\123\013\035\014\024\015\023" +
    "\017\030\023\022\026\032\027\026\030\027\031\016\032" +
    "\011\035\005\001\001\000\002\001\001\000\010\005\234" +
    "\033\210\034\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\216\001\001\000\036\004\220\006\012\011" +
    "\015\013\035\014\024\015\023\017\030\023\022\026\032" +
    "\027\026\030\027\031\016\032\011\035\005\001\001\000" +
    "\002\001\001\000\034\006\012\011\123\013\035\014\024" +
    "\015\023\017\030\023\022\026\032\027\026\030\027\031" +
    "\016\032\011\035\005\001\001\000\002\001\001\000\006" +
    "\036\224\037\225\001\001\000\004\007\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\232\001\001" +
    "\000\036\004\230\006\012\011\015\013\035\014\024\015" +
    "\023\017\030\023\022\026\032\027\026\030\027\031\016" +
    "\032\011\035\005\001\001\000\034\006\012\011\123\013" +
    "\035\014\024\015\023\017\030\023\022\026\032\027\026" +
    "\030\027\031\016\032\011\035\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\240\006\012\011\015\013" +
    "\035\014\024\015\023\017\030\023\022\026\032\027\026" +
    "\030\027\031\016\032\011\035\005\001\001\000\002\001" +
    "\001\000\034\006\012\011\123\013\035\014\024\015\023" +
    "\017\030\023\022\026\032\027\026\030\027\031\016\032" +
    "\011\035\005\001\001\000\002\001\001\000\006\036\243" +
    "\037\225\001\001\000\002\001\001\000\036\004\245\006" +
    "\012\011\015\013\035\014\024\015\023\017\030\023\022" +
    "\026\032\027\026\030\027\031\016\032\011\035\005\001" +
    "\001\000\034\006\012\011\123\013\035\014\024\015\023" +
    "\017\030\023\022\026\032\027\026\030\027\031\016\032" +
    "\011\035\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\252\006\012\011\015\013\035\014\024\015" +
    "\023\017\030\023\022\026\032\027\026\030\027\031\016" +
    "\032\011\035\005\001\001\000\002\001\001\000\034\006" +
    "\012\011\123\013\035\014\024\015\023\017\030\023\022" +
    "\026\032\027\026\030\027\031\016\032\011\035\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\012\011\123\013\035\014" +
    "\024\015\023\017\030\023\022\026\032\027\026\030\027" +
    "\031\016\032\011\035\005\001\001\000\010\010\055\016" +
    "\261\035\047\001\001\000\002\001\001\000\010\010\055" +
    "\016\263\035\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\055\016\272\035\047\001" +
    "\001\000\002\001\001\000\036\004\302\006\012\011\015" +
    "\013\035\014\024\015\023\017\030\023\022\026\032\027" +
    "\026\030\027\031\016\032\011\035\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\300\006\012\011\015\013\035\014\024\015\023\017\030" +
    "\023\022\026\032\027\026\030\027\031\016\032\011\035" +
    "\005\001\001\000\034\006\012\011\123\013\035\014\024" +
    "\015\023\017\030\023\022\026\032\027\026\030\027\031" +
    "\016\032\011\035\005\001\001\000\002\001\001\000\034" +
    "\006\012\011\123\013\035\014\024\015\023\017\030\023" +
    "\022\026\032\027\026\030\027\031\016\032\011\035\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static int contador=1;
    public static int num=1;
    public static NodoAST nodo_aux = new NodoAST();
    public static NodoAST nodo_aux_td = new NodoAST();
    public static NodoAST nodo_aux_val = new NodoAST();
    public static boolean flag_exp1=false;
    public static boolean flag_exp2=false;
    public static ArrayList<NodoAST> lista_auxNodo = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo2 = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo3 = new ArrayList<NodoAST>(); //arreglo de nombres
    public static ArrayList<NodoAST> lista_auxNodo4 = new ArrayList<NodoAST>(); //expresiones1
    public static ArrayList<NodoAST> lista_auxNodo5 = new ArrayList<NodoAST>(); //expresiones2

    
    //public static Datos.ArbolAST Datos.arbol = new Datos.ArbolAST();
    //public static ArrayList<ErrorA> errores = new ArrayList<ErrorA>();
    
    
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> start_val = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio CODIGO fin 
            {
              ArrayList<NodoAST> RESULT =null;
		int varinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varfin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                lista_auxNodo4 = new ArrayList<NodoAST>();
                                                lista_auxNodo3 = new ArrayList<NodoAST>();
                                                lista_auxNodo2 = new ArrayList<NodoAST>();
                                                lista_auxNodo = new ArrayList<NodoAST>();
                                                nodo_aux = new NodoAST();    
                                                nodo_aux_td = new NodoAST(); 
                                                nodo_aux_val = new NodoAST();  
                                                
                                                NodoAST t_global = new NodoAST();
                                                t_global.Nodos = new ArrayList<NodoAST>();
                                                t_global.setToken("GLOBAL");
                                                t_global.setTipo("GLOBAL");
                                                System.out.println(t_global.token);

                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = lista_codigo;
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                t_global.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                RESULT = new ArrayList<NodoAST>();
                                                Datos.arbol.raiz.Nodos.add(t_global);
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio CODIGO COMIENZO fin 
            {
              ArrayList<NodoAST> RESULT =null;
		int varinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String varin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_funcionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_funcionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_funciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varfin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                lista_auxNodo4 = new ArrayList<NodoAST>();
                                                lista_auxNodo3 = new ArrayList<NodoAST>();
                                                lista_auxNodo2 = new ArrayList<NodoAST>();
                                                lista_auxNodo = new ArrayList<NodoAST>();
                                                nodo_aux = new NodoAST();    
                                                nodo_aux_td = new NodoAST(); 
                                                nodo_aux_val = new NodoAST();  
                                                
                                                NodoAST t_global = new NodoAST();
                                                t_global.Nodos = new ArrayList<NodoAST>();
                                                t_global.setToken("GLOBAL");
                                                t_global.setTipo("GLOBAL");
                                                System.out.println(t_global.token);

                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = lista_codigo;
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                NodoAST t_codigo2 = new NodoAST();
                                                t_codigo2.Nodos = lista_funciones;
                                                t_codigo2.setToken("<Instrucciones>");
                                                t_codigo2.setTipo("Instrucciones");
                                                System.out.println(t_codigo2.token);

                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                t_global.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");                                                
                                                t_global.Nodos.add(t_codigo2);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                RESULT = new ArrayList<NodoAST>();
                                                Datos.arbol.raiz.Nodos.add(t_global);
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COMIENZO ::= CONTENIDO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_contenido = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_CONTENIDO>");
                        t_expresion.setTipo("t CONTENIDO");
                        t_expresion.Nodos = lista_contenido;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMIENZO ::= COMIENZO CONTENIDO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_comienzoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_comienzoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_comienzo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_contenido = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_CONTENIDO>");
                        t_expresion.setTipo("t CONTENIDO");
                        t_expresion.Nodos = lista_comienzo;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_CONTENIDO>");
                        t_expresion2.setTipo("t CONTENIDO");
                        t_expresion2.Nodos = lista_contenido;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDO ::= METODO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_metodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_metodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_metodo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_metodo = new NodoAST();
                                            t_metodo.Nodos = lista_metodo; //acarreo de nodos inferiores
                                            t_metodo.setToken("<METODO>");
                                            t_metodo.setTipo("METODO");
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_metodo);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= FUNCION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_metodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_metodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_metodo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_metodo = new NodoAST();
                                            t_metodo.Nodos = lista_metodo; //acarreo de nodos inferiores
                                            t_metodo.setToken("<FUNCION>");
                                            t_metodo.setTipo("FUNCION");
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_metodo);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= INSTRUCCIONES 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_instrucciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            NodoAST t_instrucciones = new NodoAST();
                            t_instrucciones.Nodos = lista_instrucciones; //acarreo de nodos inferiores
                            System.out.println("Se agregaron nodos a <Instrucciones>");
                            t_instrucciones.setToken("<Instrucciones>");
                            t_instrucciones.setTipo("Instrucciones");
                            System.out.println(t_instrucciones.token + " 2");

                            nodo_aux = t_instrucciones;
                            RESULT= new ArrayList<NodoAST>();
                            RESULT.add(t_instrucciones);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= CODIGO INSTRUCCIONES 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_instrucciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_Codigo = new NodoAST();
                        t_Codigo.Nodos = new ArrayList<NodoAST>(); 
                        t_Codigo.setToken("<Instrucciones>");
                        t_Codigo.setTipo("Instrucciones");
                        t_Codigo.Nodos = lista_codigo;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<Instruccion>");
                        t_expresion2.setTipo("Instruccion");
                        t_expresion2.Nodos = lista_instrucciones;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_Codigo);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= DECLARACION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_dec = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            NodoAST t_declaracion = new NodoAST();
                                            t_declaracion.Nodos = lista_dec; //acarreo de nodos inferiores
                                            t_declaracion.setToken("<Declaracion>");
                                            t_declaracion.setTipo("Declaracion");

                                            NodoAST t_pyc = new NodoAST();
                                            t_pyc.Nodos = new ArrayList<NodoAST>(); 
                                            t_pyc.setToken("<T_pto_coma>");
                                            t_pyc.setTipo("t punto y coma");
                                            
                                            NodoAST n_pyc = new NodoAST();
                                            n_pyc.setToken(var_pyc);
                                            n_pyc.setTipo("token");
                                            
                                            t_pyc.Nodos.add(n_pyc);
                                            t_declaracion.Nodos.add(t_pyc);
                                            System.out.println("se agrego token punto y coma");
                                            
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_declaracion);

                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= ASIGNACION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_asig = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_asignacion = new NodoAST();
                        t_asignacion.Nodos = lista_asig; //acarreo de nodos inferiores
                        t_asignacion.setToken("<Asingascion>");
                        t_asignacion.setTipo("asignacion");
                        
                        NodoAST t_pyc = new NodoAST();
                        t_pyc.Nodos = new ArrayList<NodoAST>(); 
                        t_pyc.setToken("<T_pto_coma>");
                        t_pyc.setTipo("t punto y coma");
                                            
                        NodoAST n_pyc = new NodoAST();
                        n_pyc.setToken(var_pyc);
                        n_pyc.setTipo("token");
                    
                        t_pyc.Nodos.add(n_pyc);
                        t_asignacion.Nodos.add(t_pyc);
                        System.out.println("se agrego token punto y coma");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_asignacion);
                        System.out.println("se agregaron todos los nombres al nodo de la produccion de Instrucciones");

                    
                    
                    
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= INST_SI fin_si 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_si = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_si = new NodoAST();
                        t_si.Nodos = lista_si; //acarreo de nodos inferiores
                        t_si.setToken("<Si>");
                        t_si.setTipo("SI");
                        
                        NodoAST t_fin_si = new NodoAST();
                        t_fin_si.Nodos = new ArrayList<NodoAST>(); 
                        t_fin_si.setToken("<T_fin_si>");
                        t_fin_si.setTipo("t fin si");
                                            
                        NodoAST n_fin_si = new NodoAST();
                        n_fin_si.setToken(vari);
                        n_fin_si.setTipo("fin si");
                    
                        t_fin_si.Nodos.add(n_fin_si);
                        t_si.Nodos.add(t_fin_si);
                        System.out.println("se agrego token fin si");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_si);
                        System.out.println("se agregaron Instrucciones SI");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= INST_SEGUN fin_segun 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_segunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_segunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_segun = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_segun = new NodoAST();
                        t_segun.Nodos = lista_segun; //acarreo de nodos inferiores
                        t_segun.setToken("<SEGUN>");
                        t_segun.setTipo("SEGUN");
                        
                        NodoAST t_fin_segun = new NodoAST();
                        t_fin_segun.Nodos = new ArrayList<NodoAST>(); 
                        t_fin_segun.setToken("<T_fin_segun>");
                        t_fin_segun.setTipo("t fin segun");
                                            
                        NodoAST n_fin_segun = new NodoAST();
                        n_fin_segun.setToken(vari);
                        n_fin_segun.setTipo("fin segun");
                    
                        t_fin_segun.Nodos.add(n_fin_segun);
                        t_segun.Nodos.add(t_fin_segun);
                        System.out.println("se agrego token fin segun");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_segun);
                        System.out.println("se agregaron Instrucciones SEGUN");
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= PRINT 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_print = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_print = new NodoAST();
                        t_print.Nodos = lista_print; //acarreo de nodos inferiores
                        t_print.setToken("<IMPRIMIR>");
                        t_print.setTipo("IMPRIMIR");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_print);
                        System.out.println("se agregaron Instrucciones IMPRIMIR");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= PRINTLN 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_print = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_print = new NodoAST();
                        t_print.Nodos = lista_print; //acarreo de nodos inferiores
                        t_print.setToken("<IMPRIMIR_NL>");
                        t_print.setTipo("IMPRIMIR");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_print);
                        System.out.println("se agregaron Instrucciones IMPRIMIR_NL");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= CICLOPARA 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<CICLO_PARA>");
                        t_para.setTipo("para");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        System.out.println("se agregaron Instrucciones ciclo para");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= CICLOMIENTRAS 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<CICLO_MIENTRAS>");
                        t_para.setTipo("mientras");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        System.out.println("se agregaron Instrucciones ciclo mientras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= CICLOREPETIR 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<CICLO_REPETIR>");
                        t_para.setTipo("repetir");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        System.out.println("se agregaron Instrucciones ciclo repetir");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= LLAMADA puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<LLAMADA>");
                        t_para.setTipo("llamada");
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");   
                        tnodo3.Nodos.add(token3);
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        RESULT.add(tnodo3);
                        System.out.println("se agregaron Instrucciones llamada");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= retornar EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                
                        
                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);      
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo3);
                        

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PRINT ::= imprimir EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);           
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PRINTLN ::= imprimir_nl EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);           
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= ingresar NOMBRES como TIPODATO con_valor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var_ing = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int var_comoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var_comoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var_como = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int var_con_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_con_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_con_valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //corregir lista de nombres
                                            NodoAST t_ingresar = new NodoAST();
                                            t_ingresar.Nodos = new ArrayList<NodoAST>(); 
                                            t_ingresar.setToken("<T_ingresar>");
                                            t_ingresar.setTipo("t ingresar");

                                            
                                            
                                            
                                            NodoAST t_como = new NodoAST();
                                            t_como.Nodos = new ArrayList<NodoAST>(); 
                                            t_como.setToken("<T_como>");
                                            t_como.setTipo("t como");
                                            
                                            NodoAST t_con_valor = new NodoAST();
                                            t_con_valor.Nodos = new ArrayList<NodoAST>(); 
                                            t_con_valor.setToken("<T_con_valor>");
                                            t_con_valor.setTipo("t con valor");

                                            NodoAST n_ingresar = new NodoAST();
                                            n_ingresar.setToken(var_ing);
                                            n_ingresar.setTipo("token");                                           
                                            
                                            
                                            NodoAST n_como = new NodoAST();
                                            n_como.setToken(var_como);
                                            n_como.setTipo("token");
                                            NodoAST t_tipodato = new NodoAST();                  
                                            t_tipodato.Nodos = new ArrayList<NodoAST>(); 
                                            t_tipodato.setToken("<Tipo_Dato>");
                                            t_tipodato.setTipo("tipo_dato");
                                            NodoAST n_con_valor = new NodoAST();
                                            n_con_valor.setToken(var_con_valor);
                                            n_con_valor.setTipo("token");
                                            NodoAST t_expresion = new NodoAST();        
                                            t_expresion.Nodos = new ArrayList<NodoAST>();
                                            t_expresion.setToken("<Expresion>");
                                            t_expresion.setTipo("expresion");

                                            t_ingresar.Nodos.add(n_ingresar);
                                            t_como.Nodos.add(n_como);
                                            t_con_valor.Nodos.add(n_con_valor);
                                            t_tipodato.Nodos.add(nodo_aux_td); //acarreo de nodo
                                            t_expresion.Nodos=lista_expresiones; //acarreo de nodo
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_ingresar);  
                                            for(int i=1; i<lista_auxNodo3.size(); i++){
                                                RESULT.add(lista_auxNodo3.get(i));
                                                System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                                            }
                                            RESULT.add(lista_auxNodo3.get(0));

                                            RESULT.add(t_como);  
                                            RESULT.add(t_tipodato);
                                            RESULT.add(t_con_valor);  
                                            RESULT.add(t_expresion);

                                            System.out.println("Se agregaron con exito los nodos de la produccion Declaracion");
                                            lista_auxNodo3 = new ArrayList<NodoAST>();  
                                        
                                        
                                        
                                        
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOMBRES ::= NOMBRE 
            {
              ArrayList<NodoAST> RESULT =null;
		lista_auxNodo3.add(nodo_aux_td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NOMBRES ::= NOMBRES NOMBRE 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        lista_auxNodo3.add(nodo_aux_td);
                        lista_auxNodo3.add(nodo_aux_val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NOMBRE ::= var_identificador coma 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");

                        NodoAST t_coma = new NodoAST();
                        t_coma.Nodos = new ArrayList<NodoAST>(); 
                        t_coma.setToken("<T_coma>");
                        t_coma.setTipo("t coma");     
                        
                        NodoAST n_coma = new NodoAST();
                        n_coma.setToken(var_coma);
                        n_coma.setTipo("token");       
                        
                        t_identificador.Nodos.add(n_identificador);
                        t_coma.Nodos.add(n_coma);

                        nodo_aux_td = t_identificador;
                        nodo_aux_val = t_coma;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NOMBRE ::= var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        nodo_aux_td = t_identificador;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPODATO ::= tcadena 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPODATO ::= tnumero 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPODATO ::= tbooleano 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPODATO ::= tcaracter 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESIONVAL ::= digito 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESIONVAL ::= decimal 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESIONVAL ::= cadena 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESIONVAL ::= caracter 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESIONVAL ::= carAscii 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        int num;
                        String valor = var_val.replace("$", "").replace("{", "").replace("}", "").replace("\'", "");
                        num = Integer.parseInt(valor);
                        char convertido = (char)num;

                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken("\'"+convertido+"\'");
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONVAL ::= verdadero 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONVAL ::= falso 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= NOMBRES flecha EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_fechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_fecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_fecha = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = lista_expresiones; 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        

                        NodoAST t_flecha = new NodoAST();
                        t_flecha.Nodos = new ArrayList<NodoAST>(); 
                        t_flecha.setToken("<T_flecha>");
                        t_flecha.setTipo("t flecha");
                        
                        NodoAST n_flecha = new NodoAST();
                        n_flecha.setToken(var_fecha);
                        n_flecha.setTipo("token");

                        t_flecha.Nodos.add(n_flecha);
                        RESULT = new ArrayList<NodoAST>();

                        for(int i=1; i<lista_auxNodo3.size(); i++){
                            RESULT.add(lista_auxNodo3.get(i));
                            System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                        }
                        RESULT.add(lista_auxNodo3.get(0));
                        RESULT.add(t_flecha);
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);

                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION potencia acorchete EXPRESION ccorchete 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(t_expresionD);
                        RESULT.add(tnodo3);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION mayorigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION menorigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION esigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION esdiferente EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST t_and = new NodoAST();
                        t_and.Nodos = new ArrayList<NodoAST>(); 
                        t_and.setToken("<T_and>");
                        t_and.setTipo("t and");     
                        
                        NodoAST n_and = new NodoAST();
                        n_and.setToken(var_and);
                        n_and.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        t_and.Nodos.add(n_and);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(t_and);
                        RESULT.add(t_expresionD);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= resta EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_restaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_restaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_resta = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_resta = new NodoAST();
                        t_resta.Nodos = new ArrayList<NodoAST>(); 
                        t_resta.setToken("<T_abre_parentesis>");
                        t_resta.setTipo("t abre parentesis");     
                        
                        NodoAST n_resta = new NodoAST();
                        n_resta.setToken(var_resta);
                        n_resta.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        t_resta.Nodos.add(n_resta);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_resta);
                        RESULT.add(t_expresion);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= not EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_not = new NodoAST();
                        t_not.Nodos = new ArrayList<NodoAST>(); 
                        t_not.setToken("<T_abre_parentesis>");
                        t_not.setTipo("t abre parentesis");     
                        
                        NodoAST n_not = new NodoAST();
                        n_not.setToken(var_not);
                        n_not.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        t_not.Nodos.add(n_not);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_not);
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= aparentecis EXPRESION cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int aparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String apar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cpar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_apar = new NodoAST();
                        t_apar.Nodos = new ArrayList<NodoAST>(); 
                        t_apar.setToken("<T_abre_parentesis>");
                        t_apar.setTipo("t abre parentesis");     
                        
                        NodoAST n_apar = new NodoAST();
                        n_apar.setToken(apar);
                        n_apar.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = lista_expresiones; 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");

                        NodoAST t_cpar = new NodoAST();
                        t_cpar.Nodos = new ArrayList<NodoAST>(); 
                        t_cpar.setToken("<T_cierra_parentesis>");
                        t_cpar.setTipo("t cierra parentesis");     
                        
                        NodoAST n_cpar = new NodoAST();
                        n_cpar.setToken(cpar);
                        n_cpar.setTipo("token");

                        t_apar.Nodos.add(n_apar);
                        t_cpar.Nodos.add(n_cpar);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_apar);
                        RESULT.add(t_expresion);
                        RESULT.add(t_cpar);
                        



                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos.add(t_identificador);
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESIONVAL 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos.add(nodo_aux_val);
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= LLAMADA 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_llamadaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_llamadaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_llamada = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos=lista_llamada;
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INST_SI ::= si EXPRESION enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_SI ::= si EXPRESION enton CODIGO de_lo_contrario CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_codigoD = new NodoAST();
                        t_codigoD.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoD.setToken("<T_Instrucciones>");
                        t_codigoD.setTipo("t T_Instrucciones");
                        t_codigoD.Nodos = lista_codigo2;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);
                        RESULT.add(t_codigoD);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_SI ::= si EXPRESION enton CODIGO OSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_expresionO = new NodoAST();
                        t_expresionO.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionO.setToken("<T_OSI>");
                        t_expresionO.setTipo("t expresion");
                        t_expresionO.Nodos = lista_osi;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(t_expresionO);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_SI ::= si EXPRESION enton CODIGO OSI de_lo_contrario CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_codigoD = new NodoAST();
                        t_codigoD.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoD.setToken("<T_Instrucciones>");
                        t_codigoD.setTipo("t T_Instrucciones");
                        t_codigoD.Nodos = lista_codigo2;

                        NodoAST t_expresionO = new NodoAST();
                        t_expresionO.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionO.setToken("<T_OSI>");
                        t_expresionO.setTipo("t expresion");
                        t_expresionO.Nodos = lista_osi;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(t_expresionO);
                        RESULT.add(tnodo3);
                        RESULT.add(t_codigoD);



            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OSI ::= OSI CONDELOSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_conosileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_conosiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_conosi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_osi;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_expresion>");
                        t_expresion2.setTipo("t expresion");
                        t_expresion2.Nodos = lista_conosi;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OSI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OSI ::= CONDELOSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_conosileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_conosiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_conosi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_conosi;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OSI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDELOSI ::= o_si EXPRESION enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");
                        

                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        
                        NodoAST t_codigo = new NodoAST();
                        t_codigo.Nodos = new ArrayList<NodoAST>(); 
                        t_codigo.setToken("<T_expresion>");
                        t_codigo.setTipo("t expresion");
                        t_codigo.Nodos = lista_codigo;

                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigo);
                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDELOSI",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INST_SEGUN ::= segun var_identificador hacer CASOS de_lo_contrario enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_casos; 
                        t_expresionI.setToken("<T_Casos>");
                        t_expresionI.setTipo("t casos");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresionI);                        
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INST_SEGUN ::= segun var_identificador hacer CASOS 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_casos; 
                        t_expresionI.setToken("<T_Casos>");
                        t_expresionI.setTipo("t casos");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresionI);     
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INST_SEGUN ::= segun var_identificador hacer de_lo_contrario enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);

                        RESULT.add(t_codigoI);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASOS ::= CASOS CASO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_casos1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_casos1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_casos1 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_casos2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casos2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_casos1;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_expresion>");
                        t_expresion2.setTipo("t expresion");
                        t_expresion2.Nodos = lista_casos2;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASOS ::= CASO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_casos;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASO ::= interrogacionA EXPRESIONVAL interrogacionC enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> vari2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>();
                        tnodo2.setToken("<T_valor>");
                        tnodo2.setTipo("<t valor");     
                        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");         

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");   

                        tnodo.Nodos.add(token);
                        tnodo.Nodos.add(nodo_aux_val);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(token4);
                        RESULT.add(t_codigoI);     
                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CICLOPARA ::= para var_identificador flecha digito hasta EXPRESION hacer CODIGO fin_para 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> vari6 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = vari6;
                        tnodo6.setToken("<T_Expresion>");
                        tnodo6.setTipo("<t expresion"); 

                        NodoAST token7 = new NodoAST();
                        token7.setToken(vari7);
                        token7.setTipo("token");

                        NodoAST tnodo7 = new NodoAST();
                        tnodo7.Nodos = new ArrayList<NodoAST>(); 
                        tnodo7.setToken("<T_"+vari7+">");
                        tnodo7.setTipo("<t "+vari7+">"); 

                        NodoAST token8 = new NodoAST();
                        token8.setToken(vari8);
                        token8.setTipo("token");

                        NodoAST tnodo8 = new NodoAST();
                        tnodo8.Nodos = new ArrayList<NodoAST>(); 
                        tnodo8.setToken("<T_"+vari8+">");
                        tnodo8.setTipo("<t "+vari8+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        //tnodo6.Nodos.add(token6);
                        tnodo7.Nodos.add(token7);
                        tnodo8.Nodos.add(token8);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(tnodo6);
                        RESULT.add(tnodo7);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo8);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CICLOPARA ::= para var_identificador flecha digito hasta EXPRESION con incremental digito hacer CODIGO fin_para 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<NodoAST> vari6 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari10 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari11left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari11right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari11 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = vari6; 
                        tnodo6.setToken("<T_expresion>");
                        tnodo6.setTipo("<t expresion>"); 

                        NodoAST token7 = new NodoAST();
                        token7.setToken(vari7);
                        token7.setTipo("token");

                        NodoAST tnodo7 = new NodoAST();
                        tnodo7.Nodos = new ArrayList<NodoAST>(); 
                        tnodo7.setToken("<T_"+vari7+">");
                        tnodo7.setTipo("<t "+vari7+">"); 

                        NodoAST token8 = new NodoAST();
                        token8.setToken(vari8);
                        token8.setTipo("token");

                        NodoAST tnodo8 = new NodoAST();
                        tnodo8.Nodos = new ArrayList<NodoAST>(); 
                        tnodo8.setToken("<T_"+vari8+">");
                        tnodo8.setTipo("<t "+vari8+">"); 

                        NodoAST token9 = new NodoAST();
                        token9.setToken(vari9);
                        token9.setTipo("token");

                        NodoAST tnodo9 = new NodoAST();
                        tnodo9.Nodos = new ArrayList<NodoAST>(); 
                        tnodo9.setToken("<T_"+vari9+">");
                        tnodo9.setTipo("<t "+vari9+">"); 

                        NodoAST token10 = new NodoAST();
                        token10.setToken(vari10);
                        token10.setTipo("token");

                        NodoAST tnodo10 = new NodoAST();
                        tnodo10.Nodos = new ArrayList<NodoAST>(); 
                        tnodo10.setToken("<T_"+vari10+">");
                        tnodo10.setTipo("<t "+vari10+">"); 

                        NodoAST token11 = new NodoAST();
                        token11.setToken(vari11);
                        token11.setTipo("token");

                        NodoAST tnodo11 = new NodoAST();
                        tnodo11.Nodos = new ArrayList<NodoAST>(); 
                        tnodo11.setToken("<T_"+vari11+">");
                        tnodo11.setTipo("<t "+vari11+">"); 

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        //tnodo6.Nodos.add(token6);
                        tnodo7.Nodos.add(token7);
                        tnodo8.Nodos.add(token8);
                        tnodo9.Nodos.add(token9);
                        tnodo10.Nodos.add(token10);
                        tnodo11.Nodos.add(token11);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(tnodo6);
                        RESULT.add(tnodo7);
                        RESULT.add(tnodo8);
                        RESULT.add(tnodo9);
                        RESULT.add(tnodo10);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo11);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CICLOPARA ::= para var_identificador flecha digito hasta EXPRESION hacer fin_para 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> vari6 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        
                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = vari6;
                        tnodo6.setToken("<T_Expresion>");
                        tnodo6.setTipo("<t expresion>"); 

                        NodoAST token7 = new NodoAST();
                        token7.setToken(vari7);
                        token7.setTipo("token");

                        NodoAST tnodo7 = new NodoAST();
                        tnodo7.Nodos = new ArrayList<NodoAST>(); 
                        tnodo7.setToken("<T_"+vari7+">");
                        tnodo7.setTipo("<t "+vari7+">"); 

                        NodoAST token8 = new NodoAST();
                        token8.setToken(vari8);
                        token8.setTipo("token");

                        NodoAST tnodo8 = new NodoAST();
                        tnodo8.Nodos = new ArrayList<NodoAST>(); 
                        tnodo8.setToken("<T_"+vari8+">");
                        tnodo8.setTipo("<t "+vari8+">"); 

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        //tnodo6.Nodos.add(token6);
                        tnodo7.Nodos.add(token7);
                        tnodo8.Nodos.add(token8);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(tnodo6);
                        RESULT.add(tnodo7);
                        RESULT.add(tnodo8);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CICLOMIENTRAS ::= mientras EXPRESION hacer CODIGO fin_mientras 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CICLOMIENTRAS ::= mientras EXPRESION hacer fin_mientras 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CICLOREPETIR ::= repetir CODIGO hasta_que EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);      
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresion);
                        

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CICLOREPETIR ::= repetir hasta_que EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari2);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari2+">");
                        tnodo3.setTipo("<t "+vari2+">");     
                        
                        
                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);      
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresion);
                        

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // METODO ::= metodo var_identificador CODIGO fin_metodo 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // METODO ::= metodo var_identificador con_parametros aparentecis LPARAMETROS cparentecis CODIGO fin_metodo 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        NodoAST token6 = new NodoAST();
                        token6.setToken(vari6);
                        token6.setTipo("token");

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = new ArrayList<NodoAST>(); 
                        tnodo6.setToken("<T_"+vari6+">");
                        tnodo6.setTipo("<t "+vari6+">"); 

                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<T_Parametros>");
                        t_parametros.setTipo("t parametros");
                        t_parametros.Nodos = lista_para;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        tnodo6.Nodos.add(token6);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(t_parametros);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo6);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCION ::= funcion var_identificador TIPODATO CODIGO fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST t_dato = new NodoAST();
                        t_dato.Nodos = new ArrayList<NodoAST>(); 
                        t_dato.setToken("<T_TIPO_DATO>");
                        t_dato.setTipo("t tipo_dato");
                        t_dato.Nodos.add(nodo_aux_td);

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);                        
                        RESULT.add(t_dato);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCION ::= funcion var_identificador TIPODATO con_parametros aparentecis LPARAMETROS cparentecis CODIGO fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_dato = new NodoAST();
                        t_dato.Nodos = new ArrayList<NodoAST>(); 
                        t_dato.setToken("<T_TIPO_DATO>");
                        t_dato.setTipo("t tipo_dato");
                        t_dato.Nodos.add(nodo_aux_td);

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        NodoAST token6 = new NodoAST();
                        token6.setToken(vari6);
                        token6.setTipo("token");

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = new ArrayList<NodoAST>(); 
                        tnodo6.setToken("<T_"+vari6+">");
                        tnodo6.setTipo("<t "+vari6+">"); 

                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<T_Parametros>");
                        t_parametros.setTipo("t parametros");
                        t_parametros.Nodos = lista_parametros;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        tnodo6.Nodos.add(token6);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(t_dato);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(t_parametros);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo6);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMADA ::= ejecutar var_identificador aparentecis cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        

                         
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LLAMADA ::= ejecutar var_identificador aparentecis LVALORES cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_val = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        
                
                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<T_Parametros>");
                        t_parametros.setTipo("t parametros");
                        t_parametros.Nodos = lista_val;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_parametros);
                        RESULT.add(tnodo4);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LPARAMETROS ::= LPARAMETROS coma PARAMETROS 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_lpar = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");
                        

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<PARAMETROS>");
                        t_parametros.setTipo("t PARAMETROS");
                        t_parametros.Nodos = lista_parametros;

                        NodoAST t_lparametros = new NodoAST();
                        t_lparametros.Nodos = new ArrayList<NodoAST>(); 
                        t_lparametros.setToken("<LPARAMETROS>");
                        t_lparametros.setTipo("t LPARAMETROS");
                        t_lparametros.Nodos = lista_lpar;
                        
                        tnodo.Nodos.add(token);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_lparametros);
                        RESULT.add(tnodo);
                        RESULT.add(t_parametros);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LPARAMETROS ::= PARAMETROS 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<PARAMETROS>");
                        t_parametros.setTipo("t PARAMETROS");
                        t_parametros.Nodos = lista_parametros;

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_parametros);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROS ::= var_identificador TIPODATO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");
                        

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<TIPODATO>");
                        t_parametros.setTipo("t TIPODATO");
                        t_parametros.Nodos.add(nodo_aux_td);
                        
                        tnodo.Nodos.add(token);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_parametros);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LVALORES ::= LVALORES coma EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_valoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_valoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_valores = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");
                        

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<EXPRESION>");
                        t_expresion.setTipo("t EXPRESION");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST t_lparametros = new NodoAST();
                        t_lparametros.Nodos = new ArrayList<NodoAST>(); 
                        t_lparametros.setToken("<LVALORES>");
                        t_lparametros.setTipo("t Lvalores");
                        t_lparametros.Nodos = lista_valores;
                        
                        tnodo.Nodos.add(token);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_lparametros);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LVALORES ::= EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<EXPRESION>");
                        t_expresion.setTipo("t EXPRESION");
                        t_expresion.Nodos =  lista_parametros;

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
