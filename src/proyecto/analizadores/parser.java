
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto.analizadores;

import java_cup.runtime.*;
import proyecto.main.*;
import java.util.ArrayList;
import proyecto.estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\002\004\000\002\003\003\000\002\003\004" +
    "\000\002\005\003\000\002\005\003\000\002\004\003\000" +
    "\002\004\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\005\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\026\005\000\002\027" +
    "\005\000\002\006\010\000\002\013\003\000\002\013\004" +
    "\000\002\014\004\000\002\014\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\015\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\007\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\004\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\006\000\002\017" +
    "\010\000\002\017\007\000\002\017\011\000\002\020\004" +
    "\000\002\020\003\000\002\022\006\000\002\023\011\000" +
    "\002\023\006\000\002\023\010\000\002\025\004\000\002" +
    "\025\003\000\002\024\007\000\002\030\013\000\002\030" +
    "\016\000\002\030\012\000\002\031\007\000\002\031\006" +
    "\000\002\032\006\000\002\032\005\000\002\033\006\000" +
    "\002\033\012\000\002\034\007\000\002\034\013\000\002" +
    "\035\006\000\002\035\007\000\002\036\005\000\002\036" +
    "\003\000\002\037\004\000\002\040\005\000\002\040\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\003\004\055\006\001\002\000\004\027" +
    "\320\001\002\000\004\002\317\001\002\000\032\003\035" +
    "\057\024\062\037\067\022\072\010\077\017\102\011\103" +
    "\027\113\033\114\014\115\012\120\036\001\002\000\004" +
    "\027\316\001\002\000\004\120\277\001\002\000\034\003" +
    "\035\057\024\062\037\067\022\072\010\077\017\101\273" +
    "\102\011\103\027\113\033\114\014\115\012\120\036\001" +
    "\002\000\032\022\045\040\046\044\044\106\055\107\054" +
    "\113\033\116\047\120\043\121\050\122\051\123\056\124" +
    "\053\001\002\000\064\003\uffef\016\uffef\056\uffef\057\uffef" +
    "\062\uffef\064\uffef\065\uffef\066\uffef\067\uffef\071\uffef\072" +
    "\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef\103\uffef" +
    "\104\uffef\105\uffef\110\uffef\111\uffef\113\uffef\114\uffef\115" +
    "\uffef\120\uffef\001\002\000\032\022\045\040\046\044\044" +
    "\106\055\107\054\113\033\116\047\120\043\121\050\122" +
    "\051\123\056\124\053\001\002\000\004\027\265\001\002" +
    "\000\064\003\ufff9\016\ufff9\056\ufff9\057\ufff9\062\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9\076\ufff9" +
    "\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105" +
    "\ufff9\110\ufff9\111\ufff9\113\ufff9\114\ufff9\115\ufff9\120\ufff9" +
    "\001\002\000\032\022\045\040\046\044\044\106\055\107" +
    "\054\113\033\116\047\120\043\121\050\122\051\123\056" +
    "\124\053\001\002\000\064\003\ufff0\016\ufff0\056\ufff0\057" +
    "\ufff0\062\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\071\ufff0" +
    "\072\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103" +
    "\ufff0\104\ufff0\105\ufff0\110\ufff0\111\ufff0\113\ufff0\114\ufff0" +
    "\115\ufff0\120\ufff0\001\002\000\040\003\035\056\222\057" +
    "\024\062\037\067\022\072\010\077\017\102\011\103\027" +
    "\104\217\110\224\113\033\114\014\115\012\120\036\001" +
    "\002\000\004\120\177\001\002\000\004\071\176\001\002" +
    "\000\004\120\036\001\002\000\004\027\164\001\002\000" +
    "\010\050\uffe3\060\uffe3\120\uffe3\001\002\000\032\022\045" +
    "\040\046\044\044\106\055\107\054\113\033\116\047\120" +
    "\043\121\050\122\051\123\056\124\053\001\002\000\064" +
    "\003\ufff2\016\ufff2\056\ufff2\057\ufff2\062\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\071\ufff2\072\ufff2\076\ufff2\077\ufff2" +
    "\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\110" +
    "\ufff2\111\ufff2\113\ufff2\114\ufff2\115\ufff2\120\ufff2\001\002" +
    "\000\004\066\161\001\002\000\064\003\ufff1\016\ufff1\056" +
    "\ufff1\057\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\071\ufff1\072\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102" +
    "\ufff1\103\ufff1\104\ufff1\105\ufff1\110\ufff1\111\ufff1\113\ufff1" +
    "\114\ufff1\115\ufff1\120\ufff1\001\002\000\004\120\151\001" +
    "\002\000\064\003\ufff3\016\ufff3\056\ufff3\057\ufff3\062\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\071\ufff3\072\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3" +
    "\105\ufff3\110\ufff3\111\ufff3\113\ufff3\114\ufff3\115\ufff3\120" +
    "\ufff3\001\002\000\016\027\143\064\146\066\150\071\147" +
    "\105\144\111\145\001\002\000\012\023\142\050\uffe0\060" +
    "\uffe0\120\uffe0\001\002\000\032\022\045\040\046\044\044" +
    "\106\055\107\054\113\033\116\047\120\043\121\050\122" +
    "\051\123\056\124\053\001\002\000\006\050\041\120\036" +
    "\001\002\000\032\022\045\040\046\044\044\106\055\107" +
    "\054\113\033\116\047\120\043\121\050\122\051\123\056" +
    "\124\053\001\002\000\010\050\uffe2\060\uffe2\120\uffe2\001" +
    "\002\000\136\003\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2" +
    "\014\uffc2\016\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\043\uffc2\056\uffc2\057\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\074\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\105\uffc2\110\uffc2\111\uffc2\113\uffc2\114\uffc2" +
    "\115\uffc2\120\uffc2\001\002\000\032\022\045\040\046\044" +
    "\044\106\055\107\054\113\033\116\047\120\043\121\050" +
    "\122\051\123\056\124\053\001\002\000\032\022\045\040" +
    "\046\044\044\106\055\107\054\113\033\116\047\120\043" +
    "\121\050\122\051\123\056\124\053\001\002\000\032\022" +
    "\045\040\046\044\044\106\055\107\054\113\033\116\047" +
    "\120\043\121\050\122\051\123\056\124\053\001\002\000" +
    "\140\003\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\043\uffd9\056\uffd9\057\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\074\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103" +
    "\uffd9\104\uffd9\105\uffd9\110\uffd9\111\uffd9\113\uffd9\114\uffd9" +
    "\115\uffd9\120\uffd9\001\002\000\140\003\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\043\uffdb\056\uffdb" +
    "\057\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\070\uffdb\071\uffdb\072\uffdb\074\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\110" +
    "\uffdb\111\uffdb\113\uffdb\114\uffdb\115\uffdb\120\uffdb\001\002" +
    "\000\140\003\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014" +
    "\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\043\uffda\056\uffda\057\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\074\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\103\uffda\104\uffda\105\uffda\110\uffda\111\uffda\113\uffda\114" +
    "\uffda\115\uffda\120\uffda\001\002\000\136\003\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\013\uffc0\014\uffc0\016\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\043\uffc0\056\uffc0\057" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\072\uffc0\074\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\110\uffc0" +
    "\111\uffc0\113\uffc0\114\uffc0\115\uffc0\120\uffc0\001\002\000" +
    "\140\003\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\043\uffd7\056\uffd7\057\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\074\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103" +
    "\uffd7\104\uffd7\105\uffd7\110\uffd7\111\uffd7\113\uffd7\114\uffd7" +
    "\115\uffd7\120\uffd7\001\002\000\140\003\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\043\uffd5\056\uffd5" +
    "\057\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\074\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\110" +
    "\uffd5\111\uffd5\113\uffd5\114\uffd5\115\uffd5\120\uffd5\001\002" +
    "\000\140\003\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\043\uffd6\056\uffd6\057\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\074\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\103\uffd6\104\uffd6\105\uffd6\110\uffd6\111\uffd6\113\uffd6\114" +
    "\uffd6\115\uffd6\120\uffd6\001\002\000\140\003\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\043\uffd8\056" +
    "\uffd8\057\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\074\uffd8\076\uffd8\077" +
    "\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\105\uffd8" +
    "\110\uffd8\111\uffd8\113\uffd8\114\uffd8\115\uffd8\120\uffd8\001" +
    "\002\000\040\007\065\010\074\011\062\013\061\014\073" +
    "\022\064\027\uffd4\030\076\031\072\032\066\033\075\034" +
    "\070\035\063\036\067\037\071\001\002\000\136\003\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\016\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\043\uffc1\056" +
    "\uffc1\057\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\074\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\110\uffc1\111\uffc1\113\uffc1\114\uffc1\115\uffc1\120\uffc1\001" +
    "\002\000\004\020\114\001\002\000\032\022\045\040\046" +
    "\044\044\106\055\107\054\113\033\116\047\120\043\121" +
    "\050\122\051\123\056\124\053\001\002\000\032\022\045" +
    "\040\046\044\044\106\055\107\054\113\033\116\047\120" +
    "\043\121\050\122\051\123\056\124\053\001\002\000\032" +
    "\022\045\040\046\044\044\106\055\107\054\113\033\116" +
    "\047\120\043\121\050\122\051\123\056\124\053\001\002" +
    "\000\032\022\045\040\046\044\044\106\055\107\054\113" +
    "\033\116\047\120\043\121\050\122\051\123\056\124\053" +
    "\001\002\000\032\022\045\040\046\044\044\106\055\107" +
    "\054\113\033\116\047\120\043\121\050\122\051\123\056" +
    "\124\053\001\002\000\032\022\045\040\046\044\044\106" +
    "\055\107\054\113\033\116\047\120\043\121\050\122\051" +
    "\123\056\124\053\001\002\000\032\022\045\040\046\044" +
    "\044\106\055\107\054\113\033\116\047\120\043\121\050" +
    "\122\051\123\056\124\053\001\002\000\032\022\045\040" +
    "\046\044\044\106\055\107\054\113\033\116\047\120\043" +
    "\121\050\122\051\123\056\124\053\001\002\000\032\022" +
    "\045\040\046\044\044\106\055\107\054\113\033\116\047" +
    "\120\043\121\050\122\051\123\056\124\053\001\002\000" +
    "\032\022\045\040\046\044\044\106\055\107\054\113\033" +
    "\116\047\120\043\121\050\122\051\123\056\124\053\001" +
    "\002\000\032\022\045\040\046\044\044\106\055\107\054" +
    "\113\033\116\047\120\043\121\050\122\051\123\056\124" +
    "\053\001\002\000\032\022\045\040\046\044\044\106\055" +
    "\107\054\113\033\116\047\120\043\121\050\122\051\123" +
    "\056\124\053\001\002\000\032\022\045\040\046\044\044" +
    "\106\055\107\054\113\033\116\047\120\043\121\050\122" +
    "\051\123\056\124\053\001\002\000\136\003\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\013\061\014\uffcd\016\uffcd\021\uffcd\022" +
    "\064\023\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\043\uffcd\056\uffcd\057" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\071\uffcd\072\uffcd\074\uffcd\076\uffcd\077\uffcd\100" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\110\uffcd" +
    "\111\uffcd\113\uffcd\114\uffcd\115\uffcd\120\uffcd\001\002\000" +
    "\136\003\uffca\007\uffca\010\uffca\011\uffca\013\061\014\uffca" +
    "\016\uffca\021\uffca\022\064\023\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\043\uffca\056\uffca\057\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\074\uffca" +
    "\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104" +
    "\uffca\105\uffca\110\uffca\111\uffca\113\uffca\114\uffca\115\uffca" +
    "\120\uffca\001\002\000\136\003\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\013\061\014\uffd1\016\uffd1\021\uffd1\022\064\023\uffd1" +
    "\027\uffd1\030\076\031\072\032\066\033\075\034\070\035" +
    "\063\036\067\037\071\043\uffd1\056\uffd1\057\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\074\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1" +
    "\102\uffd1\103\uffd1\104\uffd1\105\uffd1\110\uffd1\111\uffd1\113" +
    "\uffd1\114\uffd1\115\uffd1\120\uffd1\001\002\000\136\003\uffce" +
    "\007\uffce\010\uffce\011\uffce\013\061\014\uffce\016\uffce\021" +
    "\uffce\022\064\023\uffce\027\uffce\030\076\031\072\032\066" +
    "\033\075\034\070\035\063\036\067\037\071\043\uffce\056" +
    "\uffce\057\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\074\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce" +
    "\110\uffce\111\uffce\113\uffce\114\uffce\115\uffce\120\uffce\001" +
    "\002\000\136\003\uffcc\007\uffcc\010\uffcc\011\uffcc\013\061" +
    "\014\uffcc\016\uffcc\021\uffcc\022\064\023\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\043\uffcc\056\uffcc\057\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\074\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\105\uffcc\110\uffcc\111\uffcc\113\uffcc\114\uffcc" +
    "\115\uffcc\120\uffcc\001\002\000\136\003\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\013\061\014\uffc6\016\uffc6\021\uffc6\022\064" +
    "\023\uffc6\027\uffc6\030\076\031\072\032\066\033\075\034" +
    "\070\035\063\036\uffc6\037\uffc6\043\uffc6\056\uffc6\057\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\074\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\110\uffc6\111" +
    "\uffc6\113\uffc6\114\uffc6\115\uffc6\120\uffc6\001\002\000\136" +
    "\003\uffc8\007\uffc8\010\uffc8\011\uffc8\013\061\014\uffc8\016" +
    "\uffc8\021\uffc8\022\064\023\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\043" +
    "\uffc8\056\uffc8\057\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\074\uffc8\076" +
    "\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\110\uffc8\111\uffc8\113\uffc8\114\uffc8\115\uffc8\120" +
    "\uffc8\001\002\000\136\003\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\013\061\014\uffc7\016\uffc7\021\uffc7\022\064\023\uffc7\027" +
    "\uffc7\030\076\031\072\032\066\033\075\034\070\035\063" +
    "\036\uffc7\037\uffc7\043\uffc7\056\uffc7\057\uffc7\062\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\074\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\105\uffc7\110\uffc7\111\uffc7\113\uffc7" +
    "\114\uffc7\115\uffc7\120\uffc7\001\002\000\136\003\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\013\061\014\uffcb\016\uffcb\021\uffcb" +
    "\022\064\023\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\043\uffcb\056\uffcb" +
    "\057\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\110" +
    "\uffcb\111\uffcb\113\uffcb\114\uffcb\115\uffcb\120\uffcb\001\002" +
    "\000\136\003\uffd3\007\uffd3\010\074\011\062\013\061\014" +
    "\073\016\uffd3\021\uffd3\022\064\023\uffd3\027\uffd3\030\076" +
    "\031\072\032\066\033\075\034\070\035\063\036\067\037" +
    "\071\043\uffd3\056\uffd3\057\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\074" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\104\uffd3\105\uffd3\110\uffd3\111\uffd3\113\uffd3\114\uffd3\115" +
    "\uffd3\120\uffd3\001\002\000\136\003\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\013\uffd2\014\uffd2\016\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\043\uffd2\056\uffd2\057\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\074\uffd2\076\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\110\uffd2\111\uffd2" +
    "\113\uffd2\114\uffd2\115\uffd2\120\uffd2\001\002\000\136\003" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\013\061\014\uffc9\016\uffc9" +
    "\021\uffc9\022\064\023\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\043\uffc9" +
    "\056\uffc9\057\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\074\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\110\uffc9\111\uffc9\113\uffc9\114\uffc9\115\uffc9\120\uffc9" +
    "\001\002\000\136\003\uffd0\007\uffd0\010\uffd0\011\uffd0\013" +
    "\061\014\uffd0\016\uffd0\021\uffd0\022\064\023\uffd0\027\uffd0" +
    "\030\076\031\072\032\066\033\075\034\070\035\063\036" +
    "\067\037\071\043\uffd0\056\uffd0\057\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072" +
    "\uffd0\074\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\105\uffd0\110\uffd0\111\uffd0\113\uffd0\114" +
    "\uffd0\115\uffd0\120\uffd0\001\002\000\032\022\045\040\046" +
    "\044\044\106\055\107\054\113\033\116\047\120\043\121" +
    "\050\122\051\123\056\124\053\001\002\000\040\007\065" +
    "\010\074\011\062\013\061\014\073\021\116\022\064\030" +
    "\076\031\072\032\066\033\075\034\070\035\063\036\067" +
    "\037\071\001\002\000\136\003\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\016\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\043\uffcf\056\uffcf\057\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\074\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\110\uffcf\111\uffcf\113" +
    "\uffcf\114\uffcf\115\uffcf\120\uffcf\001\002\000\136\003\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\013\061\014\uffc4\016\uffc4\021" +
    "\uffc4\022\064\023\uffc4\027\uffc4\030\076\031\072\032\066" +
    "\033\075\034\070\035\063\036\uffc4\037\uffc4\043\uffc4\056" +
    "\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\070\uffc4\071\uffc4\072\uffc4\074\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\110\uffc4\111\uffc4\113\uffc4\114\uffc4\115\uffc4\120\uffc4\001" +
    "\002\000\136\003\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\016\uffc5\021\uffc5\022\uffc5\023\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\043\uffc5\056\uffc5\057\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\074\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\105\uffc5\110\uffc5\111\uffc5\113\uffc5\114\uffc5" +
    "\115\uffc5\120\uffc5\001\002\000\040\007\065\010\074\011" +
    "\062\013\061\014\073\022\064\030\076\031\072\032\066" +
    "\033\075\034\070\035\063\036\067\037\071\043\122\001" +
    "\002\000\136\003\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\043\uffc3\056\uffc3\057\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3" +
    "\074\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\105\uffc3\110\uffc3\111\uffc3\113\uffc3\114\uffc3" +
    "\115\uffc3\120\uffc3\001\002\000\040\007\065\010\074\011" +
    "\062\013\061\014\073\022\064\030\076\031\072\032\066" +
    "\033\075\034\070\035\063\036\067\037\071\063\124\001" +
    "\002\000\032\003\035\057\024\062\037\067\022\072\010" +
    "\077\017\102\011\103\027\113\033\114\014\115\012\120" +
    "\036\001\002\000\040\003\035\057\024\062\037\064\132" +
    "\065\131\066\uffbf\067\022\072\010\077\017\102\011\103" +
    "\027\113\033\114\014\115\012\120\036\001\002\000\064" +
    "\003\ufff8\016\ufff8\056\ufff8\057\ufff8\062\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\071\ufff8\072\ufff8\076\ufff8\077\ufff8" +
    "\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\110" +
    "\ufff8\111\ufff8\113\ufff8\114\ufff8\115\ufff8\120\ufff8\001\002" +
    "\000\010\064\137\065\131\066\uffbd\001\002\000\010\064" +
    "\uffba\065\uffba\066\uffba\001\002\000\032\022\045\040\046" +
    "\044\044\106\055\107\054\113\033\116\047\120\043\121" +
    "\050\122\051\123\056\124\053\001\002\000\032\003\035" +
    "\057\024\062\037\067\022\072\010\077\017\102\011\103" +
    "\027\113\033\114\014\115\012\120\036\001\002\000\034" +
    "\003\035\057\024\062\037\066\uffbe\067\022\072\010\077" +
    "\017\102\011\103\027\113\033\114\014\115\012\120\036" +
    "\001\002\000\040\007\065\010\074\011\062\013\061\014" +
    "\073\022\064\030\076\031\072\032\066\033\075\034\070" +
    "\035\063\036\067\037\071\063\135\001\002\000\032\003" +
    "\035\057\024\062\037\067\022\072\010\077\017\102\011" +
    "\103\027\113\033\114\014\115\012\120\036\001\002\000" +
    "\040\003\035\057\024\062\037\064\uffb9\065\uffb9\066\uffb9" +
    "\067\022\072\010\077\017\102\011\103\027\113\033\114" +
    "\014\115\012\120\036\001\002\000\032\003\035\057\024" +
    "\062\037\067\022\072\010\077\017\102\011\103\027\113" +
    "\033\114\014\115\012\120\036\001\002\000\010\064\uffbb" +
    "\065\uffbb\066\uffbb\001\002\000\034\003\035\057\024\062" +
    "\037\066\uffbc\067\022\072\010\077\017\102\011\103\027" +
    "\113\033\114\014\115\012\120\036\001\002\000\010\050" +
    "\uffe1\060\uffe1\120\uffe1\001\002\000\064\003\uffec\016\uffec" +
    "\056\uffec\057\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\071\uffec\072\uffec\076\uffec\077\uffec\100\uffec\101\uffec" +
    "\102\uffec\103\uffec\104\uffec\105\uffec\110\uffec\111\uffec\113" +
    "\uffec\114\uffec\115\uffec\120\uffec\001\002\000\064\003\uffeb" +
    "\016\uffeb\056\uffeb\057\uffeb\062\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\071\uffeb\072\uffeb\076\uffeb\077\uffeb\100\uffeb" +
    "\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb\110\uffeb\111" +
    "\uffeb\113\uffeb\114\uffeb\115\uffeb\120\uffeb\001\002\000\064" +
    "\003\uffea\016\uffea\056\uffea\057\uffea\062\uffea\064\uffea\065" +
    "\uffea\066\uffea\067\uffea\071\uffea\072\uffea\076\uffea\077\uffea" +
    "\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\110" +
    "\uffea\111\uffea\113\uffea\114\uffea\115\uffea\120\uffea\001\002" +
    "\000\064\003\uffe7\016\uffe7\056\uffe7\057\uffe7\062\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\071\uffe7\072\uffe7\076\uffe7" +
    "\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105" +
    "\uffe7\110\uffe7\111\uffe7\113\uffe7\114\uffe7\115\uffe7\120\uffe7" +
    "\001\002\000\064\003\uffe8\016\uffe8\056\uffe8\057\uffe8\062" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\071\uffe8\072\uffe8" +
    "\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\105\uffe8\110\uffe8\111\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\120\uffe8\001\002\000\064\003\uffe9\016\uffe9\056\uffe9\057" +
    "\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\071\uffe9" +
    "\072\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103" +
    "\uffe9\104\uffe9\105\uffe9\110\uffe9\111\uffe9\113\uffe9\114\uffe9" +
    "\115\uffe9\120\uffe9\001\002\000\004\044\152\001\002\000" +
    "\034\022\045\040\046\043\153\044\044\106\055\107\054" +
    "\113\033\116\047\120\043\121\050\122\051\123\056\124" +
    "\053\001\002\000\136\003\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\013\uffa7\014\uffa7\016\uffa7\021\uffa7\022\uffa7\023\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\043\uffa7\056\uffa7\057\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\072\uffa7\074\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\104\uffa7\105\uffa7\110\uffa7\111\uffa7\113\uffa7" +
    "\114\uffa7\115\uffa7\120\uffa7\001\002\000\042\007\065\010" +
    "\074\011\062\013\061\014\073\022\064\023\uffa1\030\076" +
    "\031\072\032\066\033\075\034\070\035\063\036\067\037" +
    "\071\043\uffa1\001\002\000\006\023\156\043\157\001\002" +
    "\000\032\022\045\040\046\044\044\106\055\107\054\113" +
    "\033\116\047\120\043\121\050\122\051\123\056\124\053" +
    "\001\002\000\136\003\uffa6\007\uffa6\010\uffa6\011\uffa6\013" +
    "\uffa6\014\uffa6\016\uffa6\021\uffa6\022\uffa6\023\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\043\uffa6\056\uffa6\057\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\074\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\110\uffa6\111\uffa6\113\uffa6\114" +
    "\uffa6\115\uffa6\120\uffa6\001\002\000\042\007\065\010\074" +
    "\011\062\013\061\014\073\022\064\023\uffa2\030\076\031" +
    "\072\032\066\033\075\034\070\035\063\036\067\037\071" +
    "\043\uffa2\001\002\000\064\003\ufff5\016\ufff5\056\ufff5\057" +
    "\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\071\ufff5" +
    "\072\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\103" +
    "\ufff5\104\ufff5\105\ufff5\110\ufff5\111\ufff5\113\ufff5\114\ufff5" +
    "\115\ufff5\120\ufff5\001\002\000\040\007\065\010\074\011" +
    "\062\013\061\014\073\022\064\027\163\030\076\031\072" +
    "\032\066\033\075\034\070\035\063\036\067\037\071\001" +
    "\002\000\064\003\uffed\016\uffed\056\uffed\057\uffed\062\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\071\uffed\072\uffed\076" +
    "\uffed\077\uffed\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed" +
    "\105\uffed\110\uffed\111\uffed\113\uffed\114\uffed\115\uffed\120" +
    "\uffed\001\002\000\064\003\ufff6\016\ufff6\056\ufff6\057\ufff6" +
    "\062\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\071\ufff6\072" +
    "\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6" +
    "\104\ufff6\105\ufff6\110\ufff6\111\ufff6\113\ufff6\114\ufff6\115" +
    "\ufff6\120\ufff6\001\002\000\006\060\166\120\036\001\002" +
    "\000\012\051\173\052\170\053\167\054\172\001\002\000" +
    "\042\003\uffdd\023\uffdd\043\uffdd\057\uffdd\061\uffdd\062\uffdd" +
    "\067\uffdd\072\uffdd\077\uffdd\102\uffdd\103\uffdd\112\uffdd\113" +
    "\uffdd\114\uffdd\115\uffdd\120\uffdd\001\002\000\042\003\uffdf" +
    "\023\uffdf\043\uffdf\057\uffdf\061\uffdf\062\uffdf\067\uffdf\072" +
    "\uffdf\077\uffdf\102\uffdf\103\uffdf\112\uffdf\113\uffdf\114\uffdf" +
    "\115\uffdf\120\uffdf\001\002\000\004\061\174\001\002\000" +
    "\042\003\uffdc\023\uffdc\043\uffdc\057\uffdc\061\uffdc\062\uffdc" +
    "\067\uffdc\072\uffdc\077\uffdc\102\uffdc\103\uffdc\112\uffdc\113" +
    "\uffdc\114\uffdc\115\uffdc\120\uffdc\001\002\000\042\003\uffde" +
    "\023\uffde\043\uffde\057\uffde\061\uffde\062\uffde\067\uffde\072" +
    "\uffde\077\uffde\102\uffde\103\uffde\112\uffde\113\uffde\114\uffde" +
    "\115\uffde\120\uffde\001\002\000\032\022\045\040\046\044" +
    "\044\106\055\107\054\113\033\116\047\120\043\121\050" +
    "\122\051\123\056\124\053\001\002\000\040\007\065\010" +
    "\074\011\062\013\061\014\073\022\064\027\uffe4\030\076" +
    "\031\072\032\066\033\075\034\070\035\063\036\067\037" +
    "\071\001\002\000\064\003\ufff4\016\ufff4\056\ufff4\057\ufff4" +
    "\062\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\071\ufff4\072" +
    "\ufff4\076\ufff4\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4" +
    "\104\ufff4\105\ufff4\110\ufff4\111\ufff4\113\ufff4\114\ufff4\115" +
    "\ufff4\120\ufff4\001\002\000\004\070\200\001\002\000\006" +
    "\016\201\064\202\001\002\000\020\106\055\107\054\116" +
    "\047\121\050\122\051\123\056\124\053\001\002\000\004" +
    "\063\211\001\002\000\010\016\201\064\205\071\uffb7\001" +
    "\002\000\010\016\uffb4\064\uffb4\071\uffb4\001\002\000\004" +
    "\063\207\001\002\000\010\016\uffb5\064\uffb5\071\uffb5\001" +
    "\002\000\032\003\035\057\024\062\037\067\022\072\010" +
    "\077\017\102\011\103\027\113\033\114\014\115\012\120" +
    "\036\001\002\000\034\003\035\057\024\062\037\067\022" +
    "\071\uffb8\072\010\077\017\102\011\103\027\113\033\114" +
    "\014\115\012\120\036\001\002\000\032\003\035\057\024" +
    "\062\037\067\022\072\010\077\017\102\011\103\027\113" +
    "\033\114\014\115\012\120\036\001\002\000\034\003\035" +
    "\057\024\062\037\067\022\071\uffb6\072\010\077\017\102" +
    "\011\103\027\113\033\114\014\115\012\120\036\001\002" +
    "\000\004\017\214\001\002\000\004\063\215\001\002\000" +
    "\032\003\035\057\024\062\037\067\022\072\010\077\017" +
    "\102\011\103\027\113\033\114\014\115\012\120\036\001" +
    "\002\000\040\003\035\016\uffb3\057\024\062\037\064\uffb3" +
    "\067\022\071\uffb3\072\010\077\017\102\011\103\027\113" +
    "\033\114\014\115\012\120\036\001\002\000\004\120\247" +
    "\001\002\000\010\056\246\104\217\110\224\001\002\000" +
    "\010\056\ufffb\104\ufffb\110\ufffb\001\002\000\004\002\000" +
    "\001\002\000\010\056\ufffd\104\ufffd\110\ufffd\001\002\000" +
    "\004\120\226\001\002\000\010\056\ufffa\104\ufffa\110\ufffa" +
    "\001\002\000\012\051\173\052\170\053\167\054\172\001" +
    "\002\000\034\003\035\057\024\062\037\067\022\072\010" +
    "\077\017\102\011\103\027\112\230\113\033\114\014\115" +
    "\012\120\036\001\002\000\004\044\233\001\002\000\034" +
    "\003\035\057\024\062\037\067\022\072\010\077\017\102" +
    "\011\103\027\111\232\113\033\114\014\115\012\120\036" +
    "\001\002\000\010\056\uffa9\104\uffa9\110\uffa9\001\002\000" +
    "\004\120\234\001\002\000\012\051\173\052\170\053\167" +
    "\054\172\001\002\000\006\023\237\043\240\001\002\000" +
    "\006\023\uffa4\043\uffa4\001\002\000\004\120\234\001\002" +
    "\000\032\003\035\057\024\062\037\067\022\072\010\077" +
    "\017\102\011\103\027\113\033\114\014\115\012\120\036" +
    "\001\002\000\034\003\035\057\024\062\037\067\022\072" +
    "\010\077\017\102\011\103\027\111\242\113\033\114\014" +
    "\115\012\120\036\001\002\000\010\056\uffa8\104\uffa8\110" +
    "\uffa8\001\002\000\006\023\uffa5\043\uffa5\001\002\000\006" +
    "\023\uffa3\043\uffa3\001\002\000\010\056\ufffc\104\ufffc\110" +
    "\ufffc\001\002\000\004\002\uffff\001\002\000\034\003\035" +
    "\057\024\062\037\067\022\072\010\077\017\102\011\103" +
    "\027\112\250\113\033\114\014\115\012\120\036\001\002" +
    "\000\004\044\253\001\002\000\034\003\035\057\024\062" +
    "\037\067\022\072\010\077\017\102\011\103\027\105\252" +
    "\113\033\114\014\115\012\120\036\001\002\000\010\056" +
    "\uffab\104\uffab\110\uffab\001\002\000\004\120\234\001\002" +
    "\000\006\023\237\043\255\001\002\000\032\003\035\057" +
    "\024\062\037\067\022\072\010\077\017\102\011\103\027" +
    "\113\033\114\014\115\012\120\036\001\002\000\034\003" +
    "\035\057\024\062\037\067\022\072\010\077\017\102\011" +
    "\103\027\105\257\113\033\114\014\115\012\120\036\001" +
    "\002\000\010\056\uffaa\104\uffaa\110\uffaa\001\002\000\040" +
    "\007\065\010\074\011\062\013\061\014\073\022\064\030" +
    "\076\031\072\032\066\033\075\034\070\035\063\036\067" +
    "\037\071\070\261\001\002\000\034\003\035\057\024\062" +
    "\037\067\022\072\010\077\017\100\262\102\011\103\027" +
    "\113\033\114\014\115\012\120\036\001\002\000\064\003" +
    "\uffae\016\uffae\056\uffae\057\uffae\062\uffae\064\uffae\065\uffae" +
    "\066\uffae\067\uffae\071\uffae\072\uffae\076\uffae\077\uffae\100" +
    "\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\110\uffae" +
    "\111\uffae\113\uffae\114\uffae\115\uffae\120\uffae\001\002\000" +
    "\034\003\035\057\024\062\037\067\022\072\010\077\017" +
    "\100\264\102\011\103\027\113\033\114\014\115\012\120" +
    "\036\001\002\000\064\003\uffaf\016\uffaf\056\uffaf\057\uffaf" +
    "\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\071\uffaf\072" +
    "\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\110\uffaf\111\uffaf\113\uffaf\114\uffaf\115" +
    "\uffaf\120\uffaf\001\002\000\064\003\ufff7\016\ufff7\056\ufff7" +
    "\057\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\071" +
    "\ufff7\072\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\110\ufff7\111\ufff7\113\ufff7\114" +
    "\ufff7\115\ufff7\120\ufff7\001\002\000\040\007\065\010\074" +
    "\011\062\013\061\014\073\022\064\027\267\030\076\031" +
    "\072\032\066\033\075\034\070\035\063\036\067\037\071" +
    "\001\002\000\064\003\uffe6\016\uffe6\056\uffe6\057\uffe6\062" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\071\uffe6\072\uffe6" +
    "\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104" +
    "\uffe6\105\uffe6\110\uffe6\111\uffe6\113\uffe6\114\uffe6\115\uffe6" +
    "\120\uffe6\001\002\000\040\007\065\010\074\011\062\013" +
    "\061\014\073\022\064\027\271\030\076\031\072\032\066" +
    "\033\075\034\070\035\063\036\067\037\071\001\002\000" +
    "\064\003\uffe5\016\uffe5\056\uffe5\057\uffe5\062\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\067\uffe5\071\uffe5\072\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5" +
    "\110\uffe5\111\uffe5\113\uffe5\114\uffe5\115\uffe5\120\uffe5\001" +
    "\002\000\034\003\035\057\024\062\037\067\022\072\010" +
    "\077\017\101\275\102\011\103\027\113\033\114\014\115" +
    "\012\120\036\001\002\000\032\022\045\040\046\044\044" +
    "\106\055\107\054\113\033\116\047\120\043\121\050\122" +
    "\051\123\056\124\053\001\002\000\120\003\uffac\007\065" +
    "\010\074\011\062\013\061\014\073\016\uffac\022\064\030" +
    "\076\031\072\032\066\033\075\034\070\035\063\036\067" +
    "\037\071\056\uffac\057\uffac\062\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\071\uffac\072\uffac\076\uffac\077\uffac\100\uffac" +
    "\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\110\uffac\111" +
    "\uffac\113\uffac\114\uffac\115\uffac\120\uffac\001\002\000\032" +
    "\022\045\040\046\044\044\106\055\107\054\113\033\116" +
    "\047\120\043\121\050\122\051\123\056\124\053\001\002" +
    "\000\120\003\uffad\007\065\010\074\011\062\013\061\014" +
    "\073\016\uffad\022\064\030\076\031\072\032\066\033\075" +
    "\034\070\035\063\036\067\037\071\056\uffad\057\uffad\062" +
    "\uffad\064\uffad\065\uffad\066\uffad\067\uffad\071\uffad\072\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104" +
    "\uffad\105\uffad\110\uffad\111\uffad\113\uffad\114\uffad\115\uffad" +
    "\120\uffad\001\002\000\004\050\300\001\002\000\004\121" +
    "\301\001\002\000\004\073\302\001\002\000\032\022\045" +
    "\040\046\044\044\106\055\107\054\113\033\116\047\120" +
    "\043\121\050\122\051\123\056\124\053\001\002\000\042" +
    "\007\065\010\074\011\062\013\061\014\073\022\064\030" +
    "\076\031\072\032\066\033\075\034\070\035\063\036\067" +
    "\037\071\070\304\074\305\001\002\000\034\003\035\057" +
    "\024\062\037\067\022\072\010\076\314\077\017\102\011" +
    "\103\027\113\033\114\014\115\012\120\036\001\002\000" +
    "\004\075\306\001\002\000\004\121\307\001\002\000\004" +
    "\070\310\001\002\000\032\003\035\057\024\062\037\067" +
    "\022\072\010\077\017\102\011\103\027\113\033\114\014" +
    "\115\012\120\036\001\002\000\034\003\035\057\024\062" +
    "\037\067\022\072\010\076\312\077\017\102\011\103\027" +
    "\113\033\114\014\115\012\120\036\001\002\000\064\003" +
    "\uffb1\016\uffb1\056\uffb1\057\uffb1\062\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\071\uffb1\072\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\110\uffb1" +
    "\111\uffb1\113\uffb1\114\uffb1\115\uffb1\120\uffb1\001\002\000" +
    "\034\003\035\057\024\062\037\067\022\072\010\076\315" +
    "\077\017\102\011\103\027\113\033\114\014\115\012\120" +
    "\036\001\002\000\064\003\uffb0\016\uffb0\056\uffb0\057\uffb0" +
    "\062\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\071\uffb0\072" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0" +
    "\104\uffb0\105\uffb0\110\uffb0\111\uffb0\113\uffb0\114\uffb0\115" +
    "\uffb0\120\uffb0\001\002\000\064\003\uffb2\016\uffb2\056\uffb2" +
    "\057\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\071" +
    "\uffb2\072\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\110\uffb2\111\uffb2\113\uffb2\114" +
    "\uffb2\115\uffb2\120\uffb2\001\002\000\064\003\uffee\016\uffee" +
    "\056\uffee\057\uffee\062\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\071\uffee\072\uffee\076\uffee\077\uffee\100\uffee\101\uffee" +
    "\102\uffee\103\uffee\104\uffee\105\uffee\110\uffee\111\uffee\113" +
    "\uffee\114\uffee\115\uffee\120\uffee\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\020\006\014\011\015\013\037" +
    "\014\025\015\024\017\030\023\022\026\033\027\027\030" +
    "\031\031\017\032\012\035\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\271\006\014\011\015\013" +
    "\037\014\025\015\024\017\030\023\022\026\033\027\027" +
    "\030\031\031\017\032\012\035\006\001\001\000\010\010" +
    "\057\016\267\035\051\001\001\000\002\001\001\000\010" +
    "\010\057\016\265\035\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\057\016\257\035\051\001\001" +
    "\000\002\001\001\000\044\003\217\005\222\006\014\011" +
    "\125\013\037\014\025\015\024\017\030\023\022\026\033" +
    "\027\027\030\031\031\017\032\012\033\220\034\224\035" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\164\014\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\057\016\161\035\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\057\016\122\035\051\001\001\000\004\014" +
    "\041\001\001\000\010\010\057\016\056\035\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\057\016" +
    "\120\035\051\001\001\000\010\010\057\016\117\035\051" +
    "\001\001\000\010\010\057\016\116\035\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\057\016\112\035\051\001" +
    "\001\000\010\010\057\016\111\035\051\001\001\000\010" +
    "\010\057\016\110\035\051\001\001\000\010\010\057\016" +
    "\107\035\051\001\001\000\010\010\057\016\106\035\051" +
    "\001\001\000\010\010\057\016\105\035\051\001\001\000" +
    "\010\010\057\016\104\035\051\001\001\000\010\010\057" +
    "\016\103\035\051\001\001\000\010\010\057\016\102\035" +
    "\051\001\001\000\010\010\057\016\101\035\051\001\001" +
    "\000\010\010\057\016\100\035\051\001\001\000\010\010" +
    "\057\016\077\035\051\001\001\000\010\010\057\016\076" +
    "\035\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\057\016\114\035\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\124\006\014\011\015\013\037" +
    "\014\025\015\024\017\030\023\022\026\033\027\027\030" +
    "\031\031\017\032\012\035\006\001\001\000\040\006\014" +
    "\011\125\013\037\014\025\015\024\017\030\020\126\022" +
    "\127\023\022\026\033\027\027\030\031\031\017\032\012" +
    "\035\006\001\001\000\002\001\001\000\004\022\137\001" +
    "\001\000\002\001\001\000\010\010\057\016\133\035\051" +
    "\001\001\000\036\004\132\006\014\011\015\013\037\014" +
    "\025\015\024\017\030\023\022\026\033\027\027\030\031" +
    "\031\017\032\012\035\006\001\001\000\034\006\014\011" +
    "\125\013\037\014\025\015\024\017\030\023\022\026\033" +
    "\027\027\030\031\031\017\032\012\035\006\001\001\000" +
    "\002\001\001\000\036\004\135\006\014\011\015\013\037" +
    "\014\025\015\024\017\030\023\022\026\033\027\027\030" +
    "\031\031\017\032\012\035\006\001\001\000\034\006\014" +
    "\011\125\013\037\014\025\015\024\017\030\023\022\026" +
    "\033\027\027\030\031\031\017\032\012\035\006\001\001" +
    "\000\036\004\140\006\014\011\015\013\037\014\025\015" +
    "\024\017\030\023\022\026\033\027\027\030\031\031\017" +
    "\032\012\035\006\001\001\000\002\001\001\000\034\006" +
    "\014\011\125\013\037\014\025\015\024\017\030\023\022" +
    "\026\033\027\027\030\031\031\017\032\012\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\057\016\153" +
    "\035\051\040\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\057\016\157\035\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\041\001\001\000\004\007\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\057\016\174\035" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\203\025\202\001\001\000\004\010" +
    "\212\001\001\000\002\001\001\000\004\024\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\207\006\014\011\015\013\037\014\025\015\024" +
    "\017\030\023\022\026\033\027\027\030\031\031\017\032" +
    "\012\035\006\001\001\000\034\006\014\011\125\013\037" +
    "\014\025\015\024\017\030\023\022\026\033\027\027\030" +
    "\031\031\017\032\012\035\006\001\001\000\036\004\211" +
    "\006\014\011\015\013\037\014\025\015\024\017\030\023" +
    "\022\026\033\027\027\030\031\031\017\032\012\035\006" +
    "\001\001\000\034\006\014\011\125\013\037\014\025\015" +
    "\024\017\030\023\022\026\033\027\027\030\031\031\017" +
    "\032\012\035\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\215\006\014\011\015\013\037\014\025" +
    "\015\024\017\030\023\022\026\033\027\027\030\031\031" +
    "\017\032\012\035\006\001\001\000\034\006\014\011\125" +
    "\013\037\014\025\015\024\017\030\023\022\026\033\027" +
    "\027\030\031\031\017\032\012\035\006\001\001\000\002" +
    "\001\001\000\010\005\244\033\220\034\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\226\001\001\000" +
    "\036\004\230\006\014\011\015\013\037\014\025\015\024" +
    "\017\030\023\022\026\033\027\027\030\031\031\017\032" +
    "\012\035\006\001\001\000\002\001\001\000\034\006\014" +
    "\011\125\013\037\014\025\015\024\017\030\023\022\026" +
    "\033\027\027\030\031\031\017\032\012\035\006\001\001" +
    "\000\002\001\001\000\006\036\234\037\235\001\001\000" +
    "\004\007\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\242\001\001\000\036\004\240\006\014\011" +
    "\015\013\037\014\025\015\024\017\030\023\022\026\033" +
    "\027\027\030\031\031\017\032\012\035\006\001\001\000" +
    "\034\006\014\011\125\013\037\014\025\015\024\017\030" +
    "\023\022\026\033\027\027\030\031\031\017\032\012\035" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\250\006\014\011\015\013\037\014\025\015\024\017\030" +
    "\023\022\026\033\027\027\030\031\031\017\032\012\035" +
    "\006\001\001\000\002\001\001\000\034\006\014\011\125" +
    "\013\037\014\025\015\024\017\030\023\022\026\033\027" +
    "\027\030\031\031\017\032\012\035\006\001\001\000\002" +
    "\001\001\000\006\036\253\037\235\001\001\000\002\001" +
    "\001\000\036\004\255\006\014\011\015\013\037\014\025" +
    "\015\024\017\030\023\022\026\033\027\027\030\031\031" +
    "\017\032\012\035\006\001\001\000\034\006\014\011\125" +
    "\013\037\014\025\015\024\017\030\023\022\026\033\027" +
    "\027\030\031\031\017\032\012\035\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\262\006\014\011" +
    "\015\013\037\014\025\015\024\017\030\023\022\026\033" +
    "\027\027\030\031\031\017\032\012\035\006\001\001\000" +
    "\002\001\001\000\034\006\014\011\125\013\037\014\025" +
    "\015\024\017\030\023\022\026\033\027\027\030\031\031" +
    "\017\032\012\035\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\014\011\125\013\037" +
    "\014\025\015\024\017\030\023\022\026\033\027\027\030" +
    "\031\031\017\032\012\035\006\001\001\000\010\010\057" +
    "\016\273\035\051\001\001\000\002\001\001\000\010\010" +
    "\057\016\275\035\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\057\016\302\035\051\001\001\000\002\001\001\000\036" +
    "\004\312\006\014\011\015\013\037\014\025\015\024\017" +
    "\030\023\022\026\033\027\027\030\031\031\017\032\012" +
    "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\310\006\014\011\015\013\037" +
    "\014\025\015\024\017\030\023\022\026\033\027\027\030" +
    "\031\031\017\032\012\035\006\001\001\000\034\006\014" +
    "\011\125\013\037\014\025\015\024\017\030\023\022\026" +
    "\033\027\027\030\031\031\017\032\012\035\006\001\001" +
    "\000\002\001\001\000\034\006\014\011\125\013\037\014" +
    "\025\015\024\017\030\023\022\026\033\027\027\030\031" +
    "\031\017\032\012\035\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static int contador=1;
    public static int num=1;
    public static NodoAST nodo_aux = new NodoAST();
    public static NodoAST nodo_aux_td = new NodoAST();
    public static NodoAST nodo_aux_val = new NodoAST();
    public static boolean flag_exp1=false;
    public static boolean flag_exp2=false;
    public static ArrayList<NodoAST> lista_auxNodo = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo2 = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo3 = new ArrayList<NodoAST>(); //arreglo de nombres
    public static ArrayList<NodoAST> lista_auxNodo4 = new ArrayList<NodoAST>(); //expresiones1
    public static ArrayList<NodoAST> lista_auxNodo5 = new ArrayList<NodoAST>(); //expresiones2

    
    //public static Datos.ArbolAST Datos.arbol = new Datos.ArbolAST();
    //public static ArrayList<ErrorA> errores = new ArrayList<ErrorA>();
    
    
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        int[] arregloError = new int[2];
        arregloError[0]= s.right;
        arregloError[1]= s.left+1;
        Datos.listaErrores.add(arregloError);
        System.err.println("Error SINTACTICO en la Línea " + (s.right) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> start_val = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio CODIGO fin 
            {
              ArrayList<NodoAST> RESULT =null;
		int varinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varfin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                lista_auxNodo4 = new ArrayList<NodoAST>();
                                                lista_auxNodo3 = new ArrayList<NodoAST>();
                                                lista_auxNodo2 = new ArrayList<NodoAST>();
                                                lista_auxNodo = new ArrayList<NodoAST>();
                                                nodo_aux = new NodoAST();    
                                                nodo_aux_td = new NodoAST(); 
                                                nodo_aux_val = new NodoAST();  
                                                
                                                NodoAST t_global = new NodoAST();
                                                t_global.Nodos = new ArrayList<NodoAST>();
                                                t_global.setToken("GLOBAL");
                                                t_global.setTipo("GLOBAL");
                                                System.out.println(t_global.token);

                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = lista_codigo;
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                t_global.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                RESULT = new ArrayList<NodoAST>();
                                                Datos.arbol.raiz.Nodos.add(t_global);
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio CODIGO COMIENZO fin 
            {
              ArrayList<NodoAST> RESULT =null;
		int varinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String varin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_funcionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_funcionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_funciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varfin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                lista_auxNodo4 = new ArrayList<NodoAST>();
                                                lista_auxNodo3 = new ArrayList<NodoAST>();
                                                lista_auxNodo2 = new ArrayList<NodoAST>();
                                                lista_auxNodo = new ArrayList<NodoAST>();
                                                nodo_aux = new NodoAST();    
                                                nodo_aux_td = new NodoAST(); 
                                                nodo_aux_val = new NodoAST();  
                                                
                                                NodoAST t_global = new NodoAST();
                                                t_global.Nodos = new ArrayList<NodoAST>();
                                                t_global.setToken("GLOBAL");
                                                t_global.setTipo("GLOBAL");
                                                System.out.println(t_global.token);

                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = lista_codigo;
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                NodoAST t_codigo2 = new NodoAST();
                                                t_codigo2.Nodos = lista_funciones;
                                                t_codigo2.setToken("<Instrucciones>");
                                                t_codigo2.setTipo("Instrucciones");
                                                System.out.println(t_codigo2.token);

                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                t_global.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");                                                
                                                t_global.Nodos.add(t_codigo2);
                                                System.out.println("se agrego token Al arbol");
                                                t_global.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                RESULT = new ArrayList<NodoAST>();
                                                Datos.arbol.raiz.Nodos.add(t_global);
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COMIENZO ::= CONTENIDO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_contenido = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_CONTENIDO>");
                        t_expresion.setTipo("t CONTENIDO");
                        t_expresion.Nodos = lista_contenido;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMIENZO ::= COMIENZO CONTENIDO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_comienzoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_comienzoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_comienzo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_contenido = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_CONTENIDO>");
                        t_expresion.setTipo("t CONTENIDO");
                        t_expresion.Nodos = lista_comienzo;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_CONTENIDO>");
                        t_expresion2.setTipo("t CONTENIDO");
                        t_expresion2.Nodos = lista_contenido;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= METODO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_metodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_metodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_metodo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_metodo = new NodoAST();
                                            t_metodo.Nodos = lista_metodo; //acarreo de nodos inferiores
                                            t_metodo.setToken("<METODO>");
                                            t_metodo.setTipo("METODO");
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_metodo);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= FUNCION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_metodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_metodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_metodo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_metodo = new NodoAST();
                                            t_metodo.Nodos = lista_metodo; //acarreo de nodos inferiores
                                            t_metodo.setToken("<FUNCION>");
                                            t_metodo.setTipo("FUNCION");
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_metodo);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO ::= INSTRUCCIONES 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_instrucciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            NodoAST t_instrucciones = new NodoAST();
                            t_instrucciones.Nodos = lista_instrucciones; //acarreo de nodos inferiores
                            System.out.println("Se agregaron nodos a <Instrucciones>");
                            t_instrucciones.setToken("<Instrucciones>");
                            t_instrucciones.setTipo("Instrucciones");
                            System.out.println(t_instrucciones.token + " 2");

                            nodo_aux = t_instrucciones;
                            RESULT= new ArrayList<NodoAST>();
                            RESULT.add(t_instrucciones);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CODIGO ::= CODIGO INSTRUCCIONES 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_instrucciones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_Codigo = new NodoAST();
                        t_Codigo.Nodos = new ArrayList<NodoAST>(); 
                        t_Codigo.setToken("<Instrucciones>");
                        t_Codigo.setTipo("Instrucciones");
                        t_Codigo.Nodos = lista_codigo;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<Instruccion>");
                        t_expresion2.setTipo("Instruccion");
                        t_expresion2.Nodos = lista_instrucciones;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_Codigo);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= DECLARACION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_dec = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            NodoAST t_declaracion = new NodoAST();
                                            t_declaracion.Nodos = lista_dec; //acarreo de nodos inferiores
                                            t_declaracion.setToken("<Declaracion>");
                                            t_declaracion.setTipo("Declaracion");

                                            NodoAST t_pyc = new NodoAST();
                                            t_pyc.Nodos = new ArrayList<NodoAST>(); 
                                            t_pyc.setToken("<T_pto_coma>");
                                            t_pyc.setTipo("t punto y coma");
                                            
                                            NodoAST n_pyc = new NodoAST();
                                            n_pyc.setToken(var_pyc);
                                            n_pyc.setTipo("token");
                                            
                                            t_pyc.Nodos.add(n_pyc);
                                            t_declaracion.Nodos.add(t_pyc);
                                            System.out.println("se agrego token punto y coma");
                                            
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_declaracion);

                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= ASIGNACION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_asig = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_asignacion = new NodoAST();
                        t_asignacion.Nodos = lista_asig; //acarreo de nodos inferiores
                        t_asignacion.setToken("<Asingascion>");
                        t_asignacion.setTipo("asignacion");
                        
                        NodoAST t_pyc = new NodoAST();
                        t_pyc.Nodos = new ArrayList<NodoAST>(); 
                        t_pyc.setToken("<T_pto_coma>");
                        t_pyc.setTipo("t punto y coma");
                                            
                        NodoAST n_pyc = new NodoAST();
                        n_pyc.setToken(var_pyc);
                        n_pyc.setTipo("token");
                    
                        t_pyc.Nodos.add(n_pyc);
                        t_asignacion.Nodos.add(t_pyc);
                        System.out.println("se agrego token punto y coma");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_asignacion);
                        System.out.println("se agregaron todos los nombres al nodo de la produccion de Instrucciones");

                    
                    
                    
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= INST_SI fin_si 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_siright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_si = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_si = new NodoAST();
                        t_si.Nodos = lista_si; //acarreo de nodos inferiores
                        t_si.setToken("<Si>");
                        t_si.setTipo("SI");
                        
                        NodoAST t_fin_si = new NodoAST();
                        t_fin_si.Nodos = new ArrayList<NodoAST>(); 
                        t_fin_si.setToken("<T_fin_si>");
                        t_fin_si.setTipo("t fin si");
                                            
                        NodoAST n_fin_si = new NodoAST();
                        n_fin_si.setToken(vari);
                        n_fin_si.setTipo("fin si");
                    
                        t_fin_si.Nodos.add(n_fin_si);
                        t_si.Nodos.add(t_fin_si);
                        System.out.println("se agrego token fin si");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_si);
                        System.out.println("se agregaron Instrucciones SI");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= INST_SEGUN fin_segun 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_segunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_segunright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_segun = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_segun = new NodoAST();
                        t_segun.Nodos = lista_segun; //acarreo de nodos inferiores
                        t_segun.setToken("<SEGUN>");
                        t_segun.setTipo("SEGUN");
                        
                        NodoAST t_fin_segun = new NodoAST();
                        t_fin_segun.Nodos = new ArrayList<NodoAST>(); 
                        t_fin_segun.setToken("<T_fin_segun>");
                        t_fin_segun.setTipo("t fin segun");
                                            
                        NodoAST n_fin_segun = new NodoAST();
                        n_fin_segun.setToken(vari);
                        n_fin_segun.setTipo("fin segun");
                    
                        t_fin_segun.Nodos.add(n_fin_segun);
                        t_segun.Nodos.add(t_fin_segun);
                        System.out.println("se agrego token fin segun");
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_segun);
                        System.out.println("se agregaron Instrucciones SEGUN");
                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= PRINT 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_print = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_print = new NodoAST();
                        t_print.Nodos = lista_print; //acarreo de nodos inferiores
                        t_print.setToken("<IMPRIMIR>");
                        t_print.setTipo("IMPRIMIR");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_print);
                        System.out.println("se agregaron Instrucciones IMPRIMIR");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= PRINTLN 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_print = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_print = new NodoAST();
                        t_print.Nodos = lista_print; //acarreo de nodos inferiores
                        t_print.setToken("<IMPRIMIR_NL>");
                        t_print.setTipo("IMPRIMIR");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_print);
                        System.out.println("se agregaron Instrucciones IMPRIMIR_NL");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= CICLOPARA 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<CICLO_PARA>");
                        t_para.setTipo("para");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        System.out.println("se agregaron Instrucciones ciclo para");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= CICLOMIENTRAS 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<CICLO_MIENTRAS>");
                        t_para.setTipo("mientras");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        System.out.println("se agregaron Instrucciones ciclo mientras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONES ::= CICLOREPETIR 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<CICLO_REPETIR>");
                        t_para.setTipo("repetir");
                        
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        System.out.println("se agregaron Instrucciones ciclo repetir");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONES ::= LLAMADA puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_para = new NodoAST();
                        t_para.Nodos = lista_para; //acarreo de nodos inferiores
                        t_para.setToken("<LLAMADA>");
                        t_para.setTipo("llamada");
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");   
                        tnodo3.Nodos.add(token3);
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_para);
                        RESULT.add(tnodo3);
                        System.out.println("se agregaron Instrucciones llamada");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONES ::= retornar EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                
                        
                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);      
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo3);
                        

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= error puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONES ::= error fin_metodo 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONES ::= error fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONES ::= error fin_si 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONES ::= error fin_segun 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCIONES ::= error de_lo_contrario 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.setToken("<ERROR>");
                        t_expresion.setTipo("error");
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PRINT ::= imprimir EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);           
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRINTLN ::= imprimir_nl EXPRESION puntocoma 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);           
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= ingresar NOMBRES como TIPODATO con_valor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var_ing = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int var_comoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var_comoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var_como = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int var_con_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_con_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_con_valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //corregir lista de nombres
                                            NodoAST t_ingresar = new NodoAST();
                                            t_ingresar.Nodos = new ArrayList<NodoAST>(); 
                                            t_ingresar.setToken("<T_ingresar>");
                                            t_ingresar.setTipo("t ingresar");

                                            
                                            
                                            
                                            NodoAST t_como = new NodoAST();
                                            t_como.Nodos = new ArrayList<NodoAST>(); 
                                            t_como.setToken("<T_como>");
                                            t_como.setTipo("t como");
                                            
                                            NodoAST t_con_valor = new NodoAST();
                                            t_con_valor.Nodos = new ArrayList<NodoAST>(); 
                                            t_con_valor.setToken("<T_con_valor>");
                                            t_con_valor.setTipo("t con valor");

                                            NodoAST n_ingresar = new NodoAST();
                                            n_ingresar.setToken(var_ing);
                                            n_ingresar.setTipo("token");                                           
                                            
                                            
                                            NodoAST n_como = new NodoAST();
                                            n_como.setToken(var_como);
                                            n_como.setTipo("token");
                                            NodoAST t_tipodato = new NodoAST();                  
                                            t_tipodato.Nodos = new ArrayList<NodoAST>(); 
                                            t_tipodato.setToken("<Tipo_Dato>");
                                            t_tipodato.setTipo("tipo_dato");
                                            NodoAST n_con_valor = new NodoAST();
                                            n_con_valor.setToken(var_con_valor);
                                            n_con_valor.setTipo("token");
                                            NodoAST t_expresion = new NodoAST();        
                                            t_expresion.Nodos = new ArrayList<NodoAST>();
                                            t_expresion.setToken("<Expresion>");
                                            t_expresion.setTipo("expresion");

                                            t_ingresar.Nodos.add(n_ingresar);
                                            t_como.Nodos.add(n_como);
                                            t_con_valor.Nodos.add(n_con_valor);
                                            t_tipodato.Nodos.add(nodo_aux_td); //acarreo de nodo
                                            t_expresion.Nodos=lista_expresiones; //acarreo de nodo
                                            
                                            RESULT = new ArrayList<NodoAST>();
                                            RESULT.add(t_ingresar);  
                                            for(int i=1; i<lista_auxNodo3.size(); i++){
                                                RESULT.add(lista_auxNodo3.get(i));
                                                System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                                            }
                                            RESULT.add(lista_auxNodo3.get(0));

                                            RESULT.add(t_como);  
                                            RESULT.add(t_tipodato);
                                            RESULT.add(t_con_valor);  
                                            RESULT.add(t_expresion);

                                            System.out.println("Se agregaron con exito los nodos de la produccion Declaracion");
                                            lista_auxNodo3 = new ArrayList<NodoAST>();  
                                        
                                        
                                        
                                        
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NOMBRES ::= NOMBRE 
            {
              ArrayList<NodoAST> RESULT =null;
		lista_auxNodo3.add(nodo_aux_td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NOMBRES ::= NOMBRES NOMBRE 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        lista_auxNodo3.add(nodo_aux_td);
                        lista_auxNodo3.add(nodo_aux_val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NOMBRE ::= var_identificador coma 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");

                        NodoAST t_coma = new NodoAST();
                        t_coma.Nodos = new ArrayList<NodoAST>(); 
                        t_coma.setToken("<T_coma>");
                        t_coma.setTipo("t coma");     
                        
                        NodoAST n_coma = new NodoAST();
                        n_coma.setToken(var_coma);
                        n_coma.setTipo("token");       
                        
                        t_identificador.Nodos.add(n_identificador);
                        t_coma.Nodos.add(n_coma);

                        nodo_aux_td = t_identificador;
                        nodo_aux_val = t_coma;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NOMBRE ::= var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        nodo_aux_td = t_identificador;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPODATO ::= tcadena 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPODATO ::= tnumero 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPODATO ::= tbooleano 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPODATO ::= tcaracter 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONVAL ::= digito 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONVAL ::= decimal 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONVAL ::= cadena 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        var_val.replace("\n", "\\\n");
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val.replace("\n","\\n"));
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONVAL ::= caracter 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONVAL ::= carAscii 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        int num;
                        String valor = var_val.replace("$", "").replace("{", "").replace("}", "").replace("\'", "");
                        num = Integer.parseInt(valor);
                        char convertido = (char)num;

                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken("\'"+convertido+"\'");
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIONVAL ::= verdadero 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONVAL ::= falso 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONVAL",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= NOMBRES flecha EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_fechaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_fecharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_fecha = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = lista_expresiones; 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        

                        NodoAST t_flecha = new NodoAST();
                        t_flecha.Nodos = new ArrayList<NodoAST>(); 
                        t_flecha.setToken("<T_flecha>");
                        t_flecha.setTipo("t flecha");
                        
                        NodoAST n_flecha = new NodoAST();
                        n_flecha.setToken(var_fecha);
                        n_flecha.setTipo("token");

                        t_flecha.Nodos.add(n_flecha);
                        RESULT = new ArrayList<NodoAST>();

                        for(int i=1; i<lista_auxNodo3.size(); i++){
                            RESULT.add(lista_auxNodo3.get(i));
                            System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                        }
                        RESULT.add(lista_auxNodo3.get(0));
                        RESULT.add(t_flecha);
                        RESULT.add(t_expresion);
                        lista_auxNodo3 = new ArrayList<NodoAST>();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);

                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION potencia acorchete EXPRESION ccorchete 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(t_expresionD);
                        RESULT.add(tnodo3);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION mayor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION menor EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION mayorigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION menorigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION esigual EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION esdiferente EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        tnodo.Nodos.add(token);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionD);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresionesD = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresionesI;
                        
                        NodoAST t_and = new NodoAST();
                        t_and.Nodos = new ArrayList<NodoAST>(); 
                        t_and.setToken("<T_and>");
                        t_and.setTipo("t and");     
                        
                        NodoAST n_and = new NodoAST();
                        n_and.setToken(var_and);
                        n_and.setTipo("token");

                        NodoAST t_expresionD = new NodoAST();
                        t_expresionD.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionD.setToken("<T_expresion>");
                        t_expresionD.setTipo("t expresion");
                        t_expresionD.Nodos = lista_expresionesD;

                        t_and.Nodos.add(n_and);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresionI);
                        RESULT.add(t_and);
                        RESULT.add(t_expresionD);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= resta EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_restaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_restaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_resta = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_resta = new NodoAST();
                        t_resta.Nodos = new ArrayList<NodoAST>(); 
                        t_resta.setToken("<T_abre_parentesis>");
                        t_resta.setTipo("t abre parentesis");     
                        
                        NodoAST n_resta = new NodoAST();
                        n_resta.setToken(var_resta);
                        n_resta.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        t_resta.Nodos.add(n_resta);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_resta);
                        RESULT.add(t_expresion);
                        
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= not EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_not = new NodoAST();
                        t_not.Nodos = new ArrayList<NodoAST>(); 
                        t_not.setToken("<T_abre_parentesis>");
                        t_not.setTipo("t abre parentesis");     
                        
                        NodoAST n_not = new NodoAST();
                        n_not.setToken(var_not);
                        n_not.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        t_not.Nodos.add(n_not);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_not);
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= aparentecis EXPRESION cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int aparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String apar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cpar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_apar = new NodoAST();
                        t_apar.Nodos = new ArrayList<NodoAST>(); 
                        t_apar.setToken("<T_abre_parentesis>");
                        t_apar.setTipo("t abre parentesis");     
                        
                        NodoAST n_apar = new NodoAST();
                        n_apar.setToken(apar);
                        n_apar.setTipo("token");

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = lista_expresiones; 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");

                        NodoAST t_cpar = new NodoAST();
                        t_cpar.Nodos = new ArrayList<NodoAST>(); 
                        t_cpar.setToken("<T_cierra_parentesis>");
                        t_cpar.setTipo("t cierra parentesis");     
                        
                        NodoAST n_cpar = new NodoAST();
                        n_cpar.setToken(cpar);
                        n_cpar.setTipo("token");

                        t_apar.Nodos.add(n_apar);
                        t_cpar.Nodos.add(n_cpar);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_apar);
                        RESULT.add(t_expresion);
                        RESULT.add(t_cpar);
                        



                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= var_identificador 
            {
              ArrayList<NodoAST> RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos.add(t_identificador);
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESIONVAL 
            {
              ArrayList<NodoAST> RESULT =null;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos.add(nodo_aux_val);
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= LLAMADA 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_llamadaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_llamadaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_llamada = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos=lista_llamada;
                        
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INST_SI ::= si EXPRESION enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_expresiones; 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INST_SI ::= si EXPRESION enton CODIGO de_lo_contrario CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_codigoD = new NodoAST();
                        t_codigoD.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoD.setToken("<T_Instrucciones>");
                        t_codigoD.setTipo("t T_Instrucciones");
                        t_codigoD.Nodos = lista_codigo2;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);
                        RESULT.add(t_codigoD);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INST_SI ::= si EXPRESION enton CODIGO OSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_expresionO = new NodoAST();
                        t_expresionO.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionO.setToken("<T_OSI>");
                        t_expresionO.setTipo("t expresion");
                        t_expresionO.Nodos = lista_osi;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(t_expresionO);

            
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INST_SI ::= si EXPRESION enton CODIGO OSI de_lo_contrario CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionI.setToken("<T_expresion>");
                        t_expresionI.setTipo("t expresion");
                        t_expresionI.Nodos = lista_expresiones;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_codigoD = new NodoAST();
                        t_codigoD.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoD.setToken("<T_Instrucciones>");
                        t_codigoD.setTipo("t T_Instrucciones");
                        t_codigoD.Nodos = lista_codigo2;

                        NodoAST t_expresionO = new NodoAST();
                        t_expresionO.Nodos = new ArrayList<NodoAST>(); 
                        t_expresionO.setToken("<T_OSI>");
                        t_expresionO.setTipo("t expresion");
                        t_expresionO.Nodos = lista_osi;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresionI);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(t_expresionO);
                        RESULT.add(tnodo3);
                        RESULT.add(t_codigoD);



            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OSI ::= OSI CONDELOSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_osileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_osiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_osi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_conosileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_conosiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_conosi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_osi;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_expresion>");
                        t_expresion2.setTipo("t expresion");
                        t_expresion2.Nodos = lista_conosi;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OSI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OSI ::= CONDELOSI 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_conosileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_conosiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_conosi = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_conosi;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OSI",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDELOSI ::= o_si EXPRESION enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresionesI = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresionesI;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari+">");
                        tnodo.setTipo("<t "+vari+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");
                        

                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        
                        NodoAST t_codigo = new NodoAST();
                        t_codigo.Nodos = new ArrayList<NodoAST>(); 
                        t_codigo.setToken("<T_expresion>");
                        t_codigo.setTipo("t expresion");
                        t_codigo.Nodos = lista_codigo;

                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigo);
                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDELOSI",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INST_SEGUN ::= segun var_identificador hacer CASOS de_lo_contrario enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_casos; 
                        t_expresionI.setToken("<T_Casos>");
                        t_expresionI.setTipo("t casos");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresionI);                        
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INST_SEGUN ::= segun var_identificador hacer CASOS 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresionI = new NodoAST();
                        t_expresionI.Nodos = lista_casos; 
                        t_expresionI.setToken("<T_Casos>");
                        t_expresionI.setTipo("t casos");
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresionI);     
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_SEGUN ::= segun var_identificador hacer de_lo_contrario enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);

                        RESULT.add(t_codigoI);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST_SEGUN",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CASOS ::= CASOS CASO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_casos1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_casos1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_casos1 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_casos2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casos2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_casos1;
                        NodoAST t_expresion2 = new NodoAST();
                        t_expresion2.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion2.setToken("<T_expresion>");
                        t_expresion2.setTipo("t expresion");
                        t_expresion2.Nodos = lista_casos2;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        RESULT.add(t_expresion2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASOS ::= CASO 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_casosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_casosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_casos = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_casos;
                        RESULT = new ArrayList<NodoAST>(); 
                        RESULT.add(t_expresion);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASO ::= interrogacionA EXPRESIONVAL interrogacionC enton CODIGO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> vari2 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>();
                        tnodo2.setToken("<T_valor>");
                        tnodo2.setTipo("<t valor");     
                        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");         

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");   

                        tnodo.Nodos.add(token);
                        tnodo.Nodos.add(nodo_aux_val);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(token4);
                        RESULT.add(t_codigoI);     
                        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CICLOPARA ::= para var_identificador flecha digito hasta EXPRESION hacer CODIGO fin_para 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> vari6 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = vari6;
                        tnodo6.setToken("<T_Expresion>");
                        tnodo6.setTipo("<t expresion"); 

                        NodoAST token7 = new NodoAST();
                        token7.setToken(vari7);
                        token7.setTipo("token");

                        NodoAST tnodo7 = new NodoAST();
                        tnodo7.Nodos = new ArrayList<NodoAST>(); 
                        tnodo7.setToken("<T_"+vari7+">");
                        tnodo7.setTipo("<t "+vari7+">"); 

                        NodoAST token8 = new NodoAST();
                        token8.setToken(vari8);
                        token8.setTipo("token");

                        NodoAST tnodo8 = new NodoAST();
                        tnodo8.Nodos = new ArrayList<NodoAST>(); 
                        tnodo8.setToken("<T_"+vari8+">");
                        tnodo8.setTipo("<t "+vari8+">"); 
                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        //tnodo6.Nodos.add(token6);
                        tnodo7.Nodos.add(token7);
                        tnodo8.Nodos.add(token8);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(tnodo6);
                        RESULT.add(tnodo7);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo8);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CICLOPARA ::= para var_identificador flecha digito hasta EXPRESION con incremental digito hacer CODIGO fin_para 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<NodoAST> vari6 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari9left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari9right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari9 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari10 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari11left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari11right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari11 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = vari6; 
                        tnodo6.setToken("<T_expresion>");
                        tnodo6.setTipo("<t expresion>"); 

                        NodoAST token7 = new NodoAST();
                        token7.setToken(vari7);
                        token7.setTipo("token");

                        NodoAST tnodo7 = new NodoAST();
                        tnodo7.Nodos = new ArrayList<NodoAST>(); 
                        tnodo7.setToken("<T_"+vari7+">");
                        tnodo7.setTipo("<t "+vari7+">"); 

                        NodoAST token8 = new NodoAST();
                        token8.setToken(vari8);
                        token8.setTipo("token");

                        NodoAST tnodo8 = new NodoAST();
                        tnodo8.Nodos = new ArrayList<NodoAST>(); 
                        tnodo8.setToken("<T_"+vari8+">");
                        tnodo8.setTipo("<t "+vari8+">"); 

                        NodoAST token9 = new NodoAST();
                        token9.setToken(vari9);
                        token9.setTipo("token");

                        NodoAST tnodo9 = new NodoAST();
                        tnodo9.Nodos = new ArrayList<NodoAST>(); 
                        tnodo9.setToken("<T_"+vari9+">");
                        tnodo9.setTipo("<t "+vari9+">"); 

                        NodoAST token10 = new NodoAST();
                        token10.setToken(vari10);
                        token10.setTipo("token");

                        NodoAST tnodo10 = new NodoAST();
                        tnodo10.Nodos = new ArrayList<NodoAST>(); 
                        tnodo10.setToken("<T_"+vari10+">");
                        tnodo10.setTipo("<t "+vari10+">"); 

                        NodoAST token11 = new NodoAST();
                        token11.setToken(vari11);
                        token11.setTipo("token");

                        NodoAST tnodo11 = new NodoAST();
                        tnodo11.Nodos = new ArrayList<NodoAST>(); 
                        tnodo11.setToken("<T_"+vari11+">");
                        tnodo11.setTipo("<t "+vari11+">"); 

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        //tnodo6.Nodos.add(token6);
                        tnodo7.Nodos.add(token7);
                        tnodo8.Nodos.add(token8);
                        tnodo9.Nodos.add(token9);
                        tnodo10.Nodos.add(token10);
                        tnodo11.Nodos.add(token11);
                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(tnodo6);
                        RESULT.add(tnodo7);
                        RESULT.add(tnodo8);
                        RESULT.add(tnodo9);
                        RESULT.add(tnodo10);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo11);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CICLOPARA ::= para var_identificador flecha digito hasta EXPRESION hacer fin_para 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> vari6 = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari8left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari8right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        
                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = vari6;
                        tnodo6.setToken("<T_Expresion>");
                        tnodo6.setTipo("<t expresion>"); 

                        NodoAST token7 = new NodoAST();
                        token7.setToken(vari7);
                        token7.setTipo("token");

                        NodoAST tnodo7 = new NodoAST();
                        tnodo7.Nodos = new ArrayList<NodoAST>(); 
                        tnodo7.setToken("<T_"+vari7+">");
                        tnodo7.setTipo("<t "+vari7+">"); 

                        NodoAST token8 = new NodoAST();
                        token8.setToken(vari8);
                        token8.setTipo("token");

                        NodoAST tnodo8 = new NodoAST();
                        tnodo8.Nodos = new ArrayList<NodoAST>(); 
                        tnodo8.setToken("<T_"+vari8+">");
                        tnodo8.setTipo("<t "+vari8+">"); 

                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        //tnodo6.Nodos.add(token6);
                        tnodo7.Nodos.add(token7);
                        tnodo8.Nodos.add(token8);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(tnodo5);
                        RESULT.add(tnodo6);
                        RESULT.add(tnodo7);
                        RESULT.add(tnodo8);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CICLOMIENTRAS ::= mientras EXPRESION hacer CODIGO fin_mientras 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CICLOMIENTRAS ::= mientras EXPRESION hacer fin_mientras 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CICLOREPETIR ::= repetir CODIGO hasta_que EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);      
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresion);
                        

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CICLOREPETIR ::= repetir hasta_que EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<T_expresion>");
                        t_expresion.setTipo("t expresion");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

        

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari2);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari2+">");
                        tnodo3.setTipo("<t "+vari2+">");     
                        
                        
                        tnodo.Nodos.add(token);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);      
                        RESULT.add(tnodo3);
                        RESULT.add(t_expresion);
                        

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOREPETIR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // METODO ::= metodo var_identificador CODIGO fin_metodo 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // METODO ::= metodo var_identificador con_parametros aparentecis LPARAMETROS cparentecis CODIGO fin_metodo 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        NodoAST token6 = new NodoAST();
                        token6.setToken(vari6);
                        token6.setTipo("token");

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = new ArrayList<NodoAST>(); 
                        tnodo6.setToken("<T_"+vari6+">");
                        tnodo6.setTipo("<t "+vari6+">"); 

                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<T_Parametros>");
                        t_parametros.setTipo("t parametros");
                        t_parametros.Nodos = lista_para;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        tnodo6.Nodos.add(token6);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(t_parametros);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo6);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCION ::= funcion var_identificador TIPODATO CODIGO fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST t_dato = new NodoAST();
                        t_dato.Nodos = new ArrayList<NodoAST>(); 
                        t_dato.setToken("<T_TIPO_DATO>");
                        t_dato.setTipo("t tipo_dato");
                        t_dato.Nodos.add(nodo_aux_td);

                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);                        
                        RESULT.add(t_dato);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo3);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCION ::= funcion var_identificador TIPODATO con_parametros aparentecis LPARAMETROS cparentecis CODIGO fin_funcion 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lista_paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lista_pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<NodoAST> lista_para = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_codigo = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_dato = new NodoAST();
                        t_dato.Nodos = new ArrayList<NodoAST>(); 
                        t_dato.setToken("<T_TIPO_DATO>");
                        t_dato.setTipo("t tipo_dato");
                        t_dato.Nodos.add(nodo_aux_td);

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        NodoAST token5 = new NodoAST();
                        token5.setToken(vari5);
                        token5.setTipo("token");

                        NodoAST tnodo5 = new NodoAST();
                        tnodo5.Nodos = new ArrayList<NodoAST>(); 
                        tnodo5.setToken("<T_"+vari5+">");
                        tnodo5.setTipo("<t "+vari5+">"); 

                        NodoAST token6 = new NodoAST();
                        token6.setToken(vari6);
                        token6.setTipo("token");

                        NodoAST tnodo6 = new NodoAST();
                        tnodo6.Nodos = new ArrayList<NodoAST>(); 
                        tnodo6.setToken("<T_"+vari6+">");
                        tnodo6.setTipo("<t "+vari6+">"); 

                         
                        NodoAST t_codigoI = new NodoAST();
                        t_codigoI.Nodos = new ArrayList<NodoAST>(); 
                        t_codigoI.setToken("<T_Instrucciones>");
                        t_codigoI.setTipo("t T_Instrucciones");
                        t_codigoI.Nodos = lista_codigo;

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<T_Parametros>");
                        t_parametros.setTipo("t parametros");
                        t_parametros.Nodos = lista_parametros;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);
                        tnodo5.Nodos.add(token5);
                        tnodo6.Nodos.add(token6);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(t_dato);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);
                        RESULT.add(t_parametros);
                        RESULT.add(tnodo5);
                        RESULT.add(t_codigoI);
                        RESULT.add(tnodo6);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LLAMADA ::= ejecutar var_identificador aparentecis cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        

                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        

                         
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(tnodo4);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAMADA ::= ejecutar var_identificador aparentecis LVALORES cparentecis 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vari2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vari2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vari3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vari3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vari3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lista_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<NodoAST> lista_val = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vari4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vari4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vari4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");

                        NodoAST tnodo2 = new NodoAST();
                        tnodo2.Nodos = new ArrayList<NodoAST>(); 
                        tnodo2.setToken("<T_"+vari2+">");
                        tnodo2.setTipo("<t "+vari2+">");     
                        
                        NodoAST token2 = new NodoAST();
                        token2.setToken(vari2);
                        token2.setTipo("token");  

                        NodoAST token3 = new NodoAST();
                        token3.setToken(vari3);
                        token3.setTipo("token");         

                        NodoAST tnodo3 = new NodoAST();
                        tnodo3.Nodos = new ArrayList<NodoAST>(); 
                        tnodo3.setToken("<T_"+vari3+">");
                        tnodo3.setTipo("<t "+vari3+">");     
                        
                        NodoAST token4 = new NodoAST();
                        token4.setToken(vari4);
                        token4.setTipo("token");

                        NodoAST tnodo4 = new NodoAST();
                        tnodo4.Nodos = new ArrayList<NodoAST>(); 
                        tnodo4.setToken("<T_"+vari4+">");
                        tnodo4.setTipo("<t "+vari4+">");     
                        
                        
                
                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<T_Parametros>");
                        t_parametros.setTipo("t parametros");
                        t_parametros.Nodos = lista_val;
                        
                        tnodo.Nodos.add(token);
                        tnodo2.Nodos.add(token2);
                        tnodo3.Nodos.add(token3);
                        tnodo4.Nodos.add(token4);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(tnodo2);
                        RESULT.add(tnodo3);
                        RESULT.add(t_parametros);
                        RESULT.add(tnodo4);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LPARAMETROS ::= LPARAMETROS coma PARAMETROS 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_lpar = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");
                        

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<PARAMETROS>");
                        t_parametros.setTipo("t PARAMETROS");
                        t_parametros.Nodos = lista_parametros;

                        NodoAST t_lparametros = new NodoAST();
                        t_lparametros.Nodos = new ArrayList<NodoAST>(); 
                        t_lparametros.setToken("<LPARAMETROS>");
                        t_lparametros.setTipo("t LPARAMETROS");
                        t_lparametros.Nodos = lista_lpar;
                        
                        tnodo.Nodos.add(token);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_lparametros);
                        RESULT.add(tnodo);
                        RESULT.add(t_parametros);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LPARAMETROS ::= PARAMETROS 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<PARAMETROS>");
                        t_parametros.setTipo("t PARAMETROS");
                        t_parametros.Nodos = lista_parametros;

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_parametros);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPARAMETROS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS ::= var_identificador TIPODATO 
            {
              ArrayList<NodoAST> RESULT =null;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");
                        

                        NodoAST t_parametros = new NodoAST();
                        t_parametros.Nodos = new ArrayList<NodoAST>(); 
                        t_parametros.setToken("<TIPODATO>");
                        t_parametros.setTipo("t TIPODATO");
                        t_parametros.Nodos.add(nodo_aux_td);
                        
                        tnodo.Nodos.add(token);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(tnodo);
                        RESULT.add(t_parametros);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LVALORES ::= LVALORES coma EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_valoresleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_valoresright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<NodoAST> lista_valores = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vari1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vari1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vari1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lista_expresionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_expresionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_expresiones = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST tnodo = new NodoAST();
                        tnodo.Nodos = new ArrayList<NodoAST>(); 
                        tnodo.setToken("<T_"+vari1+">");
                        tnodo.setTipo("<t "+vari1+">");     
                        
                        NodoAST token = new NodoAST();
                        token.setToken(vari1);
                        token.setTipo("token");
                        

                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<EXPRESION>");
                        t_expresion.setTipo("t EXPRESION");
                        t_expresion.Nodos = lista_expresiones;

                        NodoAST t_lparametros = new NodoAST();
                        t_lparametros.Nodos = new ArrayList<NodoAST>(); 
                        t_lparametros.setToken("<LVALORES>");
                        t_lparametros.setTipo("t Lvalores");
                        t_lparametros.Nodos = lista_valores;
                        
                        tnodo.Nodos.add(token);

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_lparametros);
                        RESULT.add(tnodo);
                        RESULT.add(t_expresion);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LVALORES ::= EXPRESION 
            {
              ArrayList<NodoAST> RESULT =null;
		int lista_parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<NodoAST> lista_parametros = (ArrayList<NodoAST>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST t_expresion = new NodoAST();
                        t_expresion.Nodos = new ArrayList<NodoAST>(); 
                        t_expresion.setToken("<EXPRESION>");
                        t_expresion.setTipo("t EXPRESION");
                        t_expresion.Nodos =  lista_parametros;

                        
                        RESULT = new ArrayList<NodoAST>();
                        RESULT.add(t_expresion);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVALORES",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
