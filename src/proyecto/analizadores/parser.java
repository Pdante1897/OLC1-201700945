
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto.analizadores;

import java_cup.runtime.*;
import proyecto.main.*;
import java.util.ArrayList;
import proyecto.estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\003\000\002\004\004\000\002\010\004" +
    "\000\002\010\004\000\002\005\010\000\002\011\005\000" +
    "\002\012\003\000\002\012\004\000\002\013\004\000\002" +
    "\013\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\036\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\046\001\002\000\006\040\013\101\012" +
    "\001\002\000\004\022\045\001\002\000\004\022\044\001" +
    "\002\000\010\037\ufffe\040\ufffe\101\ufffe\001\002\000\004" +
    "\004\036\001\002\000\004\101\017\001\002\000\010\037" +
    "\016\040\013\101\012\001\002\000\010\037\ufffd\040\ufffd" +
    "\101\ufffd\001\002\000\004\002\uffff\001\002\000\004\041" +
    "\020\001\002\000\012\032\025\033\022\034\021\035\024" +
    "\001\002\000\004\042\ufff2\001\002\000\004\042\ufff4\001" +
    "\002\000\004\042\026\001\002\000\004\042\ufff1\001\002" +
    "\000\004\042\ufff3\001\002\000\016\067\031\070\034\077" +
    "\032\102\027\103\030\104\035\001\002\000\004\022\ufff0" +
    "\001\002\000\004\022\uffef\001\002\000\004\022\uffec\001" +
    "\002\000\004\022\uffee\001\002\000\004\022\ufffa\001\002" +
    "\000\004\022\uffeb\001\002\000\004\022\uffed\001\002\000" +
    "\004\101\040\001\002\000\006\022\ufff9\101\040\001\002" +
    "\000\010\016\042\022\ufff5\101\ufff5\001\002\000\006\022" +
    "\ufff8\101\ufff8\001\002\000\006\022\ufff6\101\ufff6\001\002" +
    "\000\006\022\ufff7\101\ufff7\001\002\000\010\037\ufffc\040" +
    "\ufffc\101\ufffc\001\002\000\010\037\ufffb\040\ufffb\101\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\013\005\007\010\010" +
    "\011\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\007\010\014\011\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\036\013\040\001\001\000\004\013" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public static int contador=1;
    public static int num=1;
    public static NodoAST nodo_aux = new NodoAST();
    public static NodoAST nodo_aux_td = new NodoAST();
    public static NodoAST nodo_aux_val = new NodoAST();

    public static ArrayList<NodoAST> lista_auxNodo = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo2 = new ArrayList<NodoAST>();
    public static ArrayList<NodoAST> lista_auxNodo3 = new ArrayList<NodoAST>(); //arreglo de nombres

    //public static Datos.ArbolAST Datos.arbol = new Datos.ArbolAST();
    //public static ArrayList<ErrorA> errores = new ArrayList<ErrorA>();
    
    
    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
    public void syntax_error(Symbol s)
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error SINTACTICO en la Línea " + (s.right)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= COMIENZO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // COMIENZO ::= CONTENIDO 
            {
              Object RESULT =null;
		
                        
                                                
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMIENZO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= inicio CODIGO fin 
            {
              Object RESULT =null;
		int varinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varfinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varfinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varfin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                
                                                NodoAST t_inicio = new NodoAST();
                                                t_inicio.Nodos = new ArrayList<NodoAST>();
                                                t_inicio.setToken("T_inicio");
                                                t_inicio.setTipo("T_inicio");
                                                System.out.println(t_inicio.token);

                                                NodoAST n_inicio = new NodoAST();
                                                n_inicio.setToken(varin);
                                                n_inicio.setTipo("token");
                                                System.out.println(n_inicio.token);

                                                NodoAST t_codigo = new NodoAST();
                                                t_codigo.Nodos = new ArrayList<NodoAST>();
                                                t_codigo.setToken("<Instrucciones>");
                                                t_codigo.setTipo("Instrucciones");
                                                System.out.println(t_codigo.token);

                                                t_codigo.Nodos.add(nodo_aux); //insertando nodos inferiores
                                                System.out.println("se agrego token instruccion");

                                                NodoAST n_fin = new NodoAST();
                                                n_fin.setToken(varfin);
                                                n_fin.setTipo("token");
                                                System.out.println(n_fin.token);
                                                
                                                NodoAST t_fin = new NodoAST();
                                                t_fin.Nodos = new ArrayList<NodoAST>();
                                                t_fin.setToken("T_fin");
                                                t_fin.setTipo("T_fin");
                                                System.out.println(t_fin.token);
                                                System.out.println(varfin);

                                                

                                                t_inicio.Nodos.add(n_inicio);
                                                System.out.println("se agrego token");
                                                t_fin.Nodos.add(n_fin);
                                                System.out.println("se agrego token");
                                                Datos.arbol.raiz.Nodos.add(t_inicio);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_codigo);
                                                System.out.println("se agrego token Al arbol");
                                                Datos.arbol.raiz.Nodos.add(t_fin);
                                                System.out.println("se agrego token Al arbol");
                                                System.out.println(Datos.arbol.raiz.getToken() + " Nodo del Datos.arbol");

                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		
                            NodoAST t_instrucciones = new NodoAST();
                            t_instrucciones.Nodos = lista_auxNodo2; //acarreo de nodos inferiores
                            System.out.println("Se agregaron nodos a <Instrucciones>");
                            t_instrucciones.setToken("<Instrucciones>");
                            t_instrucciones.setTipo("Instrucciones");
                            System.out.println(t_instrucciones.token + " 2");

                            nodo_aux = t_instrucciones;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= CODIGO INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= DECLARACION puntocoma 
            {
              Object RESULT =null;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            NodoAST t_declaracion = new NodoAST();
                                            t_declaracion.Nodos = lista_auxNodo; //acarreo de nodos inferiores
                                            t_declaracion.setToken("<Declaracion>");
                                            t_declaracion.setTipo("Declaracion");

                                            NodoAST t_pyc = new NodoAST();
                                            t_pyc.Nodos = new ArrayList<NodoAST>(); 
                                            t_pyc.setToken("<T_pto_coma>");
                                            t_pyc.setTipo("t punto y coma");
                                            
                                            NodoAST n_pyc = new NodoAST();
                                            n_pyc.setToken(var_pyc);
                                            n_pyc.setTipo("token");
                                            
                                            t_pyc.Nodos.add(n_pyc);
                                            t_declaracion.Nodos.add(t_pyc);
                                            System.out.println("se agrego token punto y coma");
                                            
                                            
                                            lista_auxNodo = new ArrayList<NodoAST>();
                                            lista_auxNodo2.add(t_declaracion);

                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= LISTA_NOM puntocoma 
            {
              Object RESULT =null;
		int var_pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_pyc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        NodoAST t_listaNom = new NodoAST();
                        t_listaNom.Nodos = lista_auxNodo; //acarreo de nodos inferiores
                        t_listaNom.setToken("<Lista Nombres>");
                        t_listaNom.setTipo("lista nombres");
                        
                        NodoAST t_pyc = new NodoAST();
                        t_pyc.Nodos = new ArrayList<NodoAST>(); 
                        t_pyc.setToken("<T_pto_coma>");
                        t_pyc.setTipo("t punto y coma");
                                            
                        NodoAST n_pyc = new NodoAST();
                        n_pyc.setToken(var_pyc);
                        n_pyc.setTipo("token");
                    
                        t_pyc.Nodos.add(n_pyc);
                        t_listaNom.Nodos.add(t_pyc);
                        System.out.println("se agrego token punto y coma");
                        
                        lista_auxNodo = new ArrayList<NodoAST>();
                        lista_auxNodo2.add(t_listaNom);
                        System.out.println("se agregaron todos los nombres al nodo de la produccion de Instrucciones");

                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= ingresar var_identificador como TIPODATO con_valor EXPRESIONNUM 
            {
              Object RESULT =null;
		int var_ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var_ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var_ing = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int var_comoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var_comoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var_como = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int var_con_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_con_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_con_valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            NodoAST t_ingresar = new NodoAST();
                                            t_ingresar.Nodos = new ArrayList<NodoAST>(); 
                                            t_ingresar.setToken("<T_ingresar>");
                                            t_ingresar.setTipo("t ingresar");

                                            NodoAST t_identificador = new NodoAST();
                                            t_identificador.Nodos = new ArrayList<NodoAST>(); 
                                            t_identificador.setToken("<T_identificador>");
                                            t_identificador.setTipo("t identificador");
                                            
                                            NodoAST t_como = new NodoAST();
                                            t_como.Nodos = new ArrayList<NodoAST>(); 
                                            t_como.setToken("<T_como>");
                                            t_como.setTipo("t como");
                                            
                                            NodoAST t_con_valor = new NodoAST();
                                            t_con_valor.Nodos = new ArrayList<NodoAST>(); 
                                            t_con_valor.setToken("<T_con_valor>");
                                            t_con_valor.setTipo("t con valor");

                                            NodoAST n_ingresar = new NodoAST();
                                            n_ingresar.setToken(var_ing);
                                            n_ingresar.setTipo("token");                                           
                                            NodoAST n_identificador = new NodoAST();
                                            n_identificador.setToken(var_id);
                                            n_identificador.setTipo("token");
                                            NodoAST n_como = new NodoAST();
                                            n_como.setToken(var_como);
                                            n_como.setTipo("token");
                                            NodoAST t_tipodato = new NodoAST();                  
                                            t_tipodato.Nodos = new ArrayList<NodoAST>(); 
                                            t_tipodato.setToken("<Tipo_Dato>");
                                            t_tipodato.setTipo("tipo_dato");
                                            NodoAST n_con_valor = new NodoAST();
                                            n_con_valor.setToken(var_con_valor);
                                            n_con_valor.setTipo("token");
                                            NodoAST t_expresion = new NodoAST();        
                                            t_expresion.Nodos = new ArrayList<NodoAST>();
                                            t_expresion.setToken("<Expresion>");
                                            t_expresion.setTipo("expresion");

                                            t_ingresar.Nodos.add(n_ingresar);
                                            t_identificador.Nodos.add(n_identificador);
                                            t_como.Nodos.add(n_como);
                                            t_con_valor.Nodos.add(n_con_valor);
                                            t_tipodato.Nodos.add(nodo_aux_td); //acarreo de nodo
                                            t_expresion.Nodos.add(nodo_aux_val); //acarreo de nodo

                                            lista_auxNodo.add(t_ingresar);  
                                            lista_auxNodo.add(t_identificador);
                                            lista_auxNodo.add(t_como);  
                                            lista_auxNodo.add(t_tipodato);
                                            lista_auxNodo.add(t_con_valor);  
                                            lista_auxNodo.add(t_expresion);

                                            System.out.println("Se agregaron con exito los nodos de la produccion Declaracion");

                                        
                                        
                                        
                                        
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_NOM ::= var_identificador igual NOMBRES 
            {
              Object RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_iguleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_iguright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_igu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");

                        NodoAST t_igual = new NodoAST();
                        t_igual.Nodos = new ArrayList<NodoAST>(); 
                        t_igual.setToken("<T_igual>");
                        t_igual.setTipo("t igual");
                        
                        NodoAST n_igual = new NodoAST();
                        n_igual.setToken(var_igu);
                        n_igual.setTipo("token");

                        t_identificador.Nodos.add(n_identificador);
                        t_igual.Nodos.add(n_igual);

                        lista_auxNodo.add(t_identificador);
                        lista_auxNodo.add(t_igual);

                        for(int i=1; i<lista_auxNodo3.size(); i++){
                            lista_auxNodo.add(lista_auxNodo3.get(i));
                            System.out.println("Se agregaron con exito los nodos de la produccion listaNom");

                        }
                        lista_auxNodo.add(lista_auxNodo3.get(0));

                        lista_auxNodo3 = new ArrayList<NodoAST>();

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_NOM",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOMBRES ::= NOMBRE 
            {
              Object RESULT =null;
		lista_auxNodo3.add(nodo_aux_td);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOMBRES ::= NOMBRES NOMBRE 
            {
              Object RESULT =null;
		
                        lista_auxNodo3.add(nodo_aux_td);
                        lista_auxNodo3.add(nodo_aux_val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOMBRE ::= var_identificador coma 
            {
              Object RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");

                        NodoAST t_coma = new NodoAST();
                        t_coma.Nodos = new ArrayList<NodoAST>(); 
                        t_coma.setToken("<T_coma>");
                        t_coma.setTipo("t coma");     
                        
                        NodoAST n_coma = new NodoAST();
                        n_coma.setToken(var_coma);
                        n_coma.setTipo("token");       
                        
                        t_identificador.Nodos.add(n_identificador);
                        t_coma.Nodos.add(n_coma);

                        nodo_aux_td = t_identificador;
                        nodo_aux_val = t_coma;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOMBRE ::= var_identificador 
            {
              Object RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
                        NodoAST t_identificador = new NodoAST();
                        t_identificador.Nodos = new ArrayList<NodoAST>(); 
                        t_identificador.setToken("<T_identificador>");
                        t_identificador.setTipo("t identificador");     
                        
                        NodoAST n_identificador = new NodoAST();
                        n_identificador.setToken(var_id);
                        n_identificador.setTipo("token");
                        
                        t_identificador.Nodos.add(n_identificador);
                        nodo_aux_td = t_identificador;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBRE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPODATO ::= tcadena 
            {
              Object RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPODATO ::= tnumero 
            {
              Object RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPODATO ::= tbooleano 
            {
              Object RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPODATO ::= tcaracter 
            {
              Object RESULT =null;
		int var_tipodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_tipodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_tipod = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_tipodato = new NodoAST();                  
                        n_tipodato.setToken(var_tipod);
                        n_tipodato.setTipo("token");
                        nodo_aux_td = n_tipodato;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESIONNUM ::= digito 
            {
              Object RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONNUM",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESIONNUM ::= decimal 
            {
              Object RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONNUM",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESIONNUM ::= cadena 
            {
              Object RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONNUM",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESIONNUM ::= caracter 
            {
              Object RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONNUM",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESIONNUM ::= verdadero 
            {
              Object RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONNUM",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESIONNUM ::= falso 
            {
              Object RESULT =null;
		int var_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        NodoAST n_expresion = new NodoAST();                  
                        n_expresion.setToken(var_val);
                        n_expresion.setTipo("token");
                        nodo_aux_val = n_expresion;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONNUM",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
