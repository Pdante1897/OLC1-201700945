/* The following code was generated by JFlex 1.7.0 */

package proyecto.analizadores;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import proyecto.main.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/gerar/Desktop/ProyectoCompi/OLC1-201700945/src/proyecto/analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\13\1\15\1\15\1\13\22\0\1\1\1\11\1\12"+
    "\1\11\1\6\1\45\1\11\1\5\1\61\1\60\1\20\1\22\1\43"+
    "\1\36\1\4\1\17\12\3\1\46\1\47\1\11\1\21\1\37\1\42"+
    "\1\11\1\33\1\64\1\30\1\35\1\26\1\57\1\52\1\66\1\32"+
    "\1\70\1\2\1\54\1\34\1\27\1\24\1\23\1\67\1\51\1\56"+
    "\1\25\1\53\1\65\2\2\1\50\1\2\1\62\1\14\1\63\1\11"+
    "\1\16\1\11\1\33\1\64\1\30\1\35\1\26\1\57\1\52\1\66"+
    "\1\32\1\70\1\2\1\54\1\34\1\27\1\24\1\23\1\67\1\51"+
    "\1\56\1\25\1\53\1\65\2\2\1\50\1\2\1\7\1\40\1\10"+
    "\1\44\6\0\1\15\71\0\1\41\160\0\2\31\115\0\1\55\u1ea8\0"+
    "\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\4\1\1\6"+
    "\1\7\1\10\1\11\5\3\1\1\4\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\3"+
    "\1\1\2\3\1\23\1\24\1\25\1\26\3\3\4\0"+
    "\1\27\1\0\1\30\1\31\1\32\3\0\3\3\1\33"+
    "\1\3\1\0\6\3\2\0\5\3\1\0\3\3\1\34"+
    "\1\3\1\0\1\35\1\3\1\35\1\0\6\3\1\36"+
    "\1\37\1\0\1\40\1\41\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\42\1\3\1\43\3\3\4\0\4\3"+
    "\1\44\1\45\2\3\1\0\5\3\1\0\1\3\2\46"+
    "\5\3\1\0\1\3\1\0\1\3\1\47\2\50\1\3"+
    "\2\0\5\3\1\51\2\3\4\0\6\3\1\0\5\3"+
    "\1\0\1\3\1\0\1\3\1\0\5\3\1\0\1\3"+
    "\1\0\2\3\2\0\10\3\4\0\5\3\1\52\1\0"+
    "\1\3\1\53\3\3\2\54\4\0\4\3\2\55\1\0"+
    "\3\3\1\56\2\57\1\60\2\3\2\0\3\3\1\61"+
    "\2\3\1\62\1\3\1\0\1\63\2\0\1\3\1\63"+
    "\2\3\1\64\1\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\65\1\0\4\3\1\65\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\2\3\2\0\6\3\3\0\4\3\1\0"+
    "\3\3\2\66\1\3\5\0\5\3\2\67\1\70\1\3"+
    "\1\0\1\3\2\71\2\72\1\73\1\0\1\73\1\3"+
    "\1\74\2\3\1\75\1\0\1\76\1\77\1\3\1\76"+
    "\1\77\1\3\2\100\2\3\1\101\1\102\4\0\1\102"+
    "\5\3\1\0\1\3\1\0\2\3\1\103\2\0\2\3"+
    "\1\0\1\3\1\0\2\3\2\0\1\104\1\0\2\3"+
    "\1\104\1\3\1\105\2\106\1\0\2\3\2\0\2\3"+
    "\1\0\1\3\1\0\2\3\1\107\2\0\1\107\2\3"+
    "\1\0\2\3\1\110\1\111\1\110\1\111\1\0\1\3"+
    "\1\0\2\3\1\0\1\112\1\3\1\112\2\113\1\3"+
    "\1\0\1\3\1\0\2\3\2\114\1\3\2\115\2\116"+
    "\1\3\2\117\1\0\1\3\2\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\71\0\71\0\71\0\u023a\0\u0273"+
    "\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u04ad\0\u04e6\0\u051f\0\u0558\0\71\0\71\0\71"+
    "\0\71\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u0156"+
    "\0\71\0\u06e7\0\71\0\71\0\71\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\253\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\71"+
    "\0\u0cb1\0\u0cea\0\71\0\u0d23\0\253\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u063c\0\71\0\u0eeb\0\u0720"+
    "\0\71\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\253\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\253\0\253\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\253"+
    "\0\71\0\253\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\253\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613"+
    "\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\71\0\253"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\71\0\253\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\253\0\u2a4e"+
    "\0\u2a87\0\71\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd"+
    "\0\u2c16\0\253\0\u2c4f\0\u2c88\0\253\0\u2cc1\0\u2cfa\0\71"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\253\0\u2dde\0\u2e17\0\253\0\u2e50"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018"+
    "\0\u3051\0\u308a\0\u30c3\0\71\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\253\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe"+
    "\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\71"+
    "\0\253\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4"+
    "\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\71\0\253\0\253\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\71\0\253\0\71\0\253\0\71\0\u3bac"+
    "\0\253\0\u3be5\0\253\0\u3c1e\0\u3c57\0\253\0\u3c90\0\71"+
    "\0\u3cc9\0\u3d02\0\253\0\u3d3b\0\u3d74\0\71\0\253\0\u3dad"+
    "\0\u3de6\0\253\0\71\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\253"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092"+
    "\0\u40cb\0\u4104\0\253\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\71\0\u43b0"+
    "\0\u43e9\0\u4422\0\253\0\u445b\0\253\0\71\0\253\0\u4494"+
    "\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c"+
    "\0\u4695\0\u46ce\0\u4707\0\71\0\u4740\0\u4779\0\253\0\u47b2"+
    "\0\u47eb\0\u4824\0\u485d\0\u4896\0\71\0\71\0\253\0\253"+
    "\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\71\0\u4a25"+
    "\0\253\0\71\0\253\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42"+
    "\0\u4b7b\0\71\0\253\0\u4bb4\0\71\0\253\0\71\0\253"+
    "\0\u4bed\0\71\0\253\0\u4c26\0\u4c5f\0\71\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\4\2\1\10"+
    "\1\3\1\11\1\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\2\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\4\1\42\3\4"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\2\4\72\0\1\3\11\0\1\3\57\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\3\0\1\5\1\55"+
    "\66\0\2\56\2\0\1\57\2\0\1\56\2\0\1\56"+
    "\1\0\2\56\3\0\6\56\1\0\4\56\2\0\1\56"+
    "\7\0\5\56\1\0\13\56\12\60\1\61\1\60\1\62"+
    "\54\60\5\0\1\63\4\0\1\64\14\0\1\65\43\0"+
    "\1\66\20\0\6\66\1\0\4\66\12\0\5\66\1\0"+
    "\2\66\4\0\5\66\17\0\1\67\1\70\52\0\2\4"+
    "\12\0\1\4\4\0\1\4\1\71\4\4\1\0\1\4"+
    "\1\72\2\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\73\4\0\6\4\1\0\4\4"+
    "\12\0\1\4\1\74\3\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\4\4\1\75\1\4"+
    "\1\0\4\4\12\0\5\4\1\76\1\77\1\4\4\0"+
    "\4\4\1\100\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\101\4\4\1\0\4\4\12\0\3\4\1\102\1\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\103\4\4\1\0\1\4\1\104\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\27\0\1\105"+
    "\4\0\1\106\36\0\2\4\12\0\1\4\4\0\4\4"+
    "\1\107\1\4\1\0\2\4\1\110\1\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\4\4\1\111\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\112\1\4\1\113\2\4\1\114\1\115"+
    "\1\116\2\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\3\4\1\117\2\4"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\37\0\1\120\33\0\2\4\12\0\1\4\4\0\3\4"+
    "\1\121\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\26\0\1\122\2\0\2\123\40\0\2\4"+
    "\12\0\1\4\4\0\3\4\1\124\2\4\1\123\1\125"+
    "\3\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\126\1\127\1\130"+
    "\2\4\12\0\3\4\1\131\1\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\1\4\1\132"+
    "\4\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\3\4\1\133"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\1\4\1\134\2\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\3\0\1\135\72\0\1\136\70\0\1\136\1\0"+
    "\1\137\61\0\13\60\1\0\1\60\1\0\53\60\2\0"+
    "\2\66\12\0\1\140\4\0\6\66\1\0\4\66\12\0"+
    "\5\66\1\0\2\66\4\0\5\66\13\67\1\141\1\67"+
    "\1\0\53\67\20\70\1\142\50\70\2\0\2\4\12\0"+
    "\1\4\4\0\2\4\1\143\3\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\1\4\1\144"+
    "\3\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\5\4\1\145"+
    "\1\146\1\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\2\4\1\147\3\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\16\0\1\150\54\0\2\4"+
    "\12\0\1\151\4\0\6\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\3\4\1\152\2\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\2\4\1\153\3\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\2\4\1\154\1\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\4\4\1\155\1\4\1\0\2\4\1\156\1\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\0\3\4\1\157\12\0"+
    "\1\4\1\160\3\4\1\0\2\4\4\0\5\4\30\0"+
    "\1\161\2\162\17\0\1\163\41\0\1\164\47\0\2\4"+
    "\12\0\1\4\4\0\5\4\1\165\1\162\1\166\3\4"+
    "\12\0\2\4\1\167\2\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\1\170\5\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\3\4\1\171"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\0\3\4\1\172\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\2\4\1\173\1\4\1\174\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\26\0"+
    "\1\175\44\0\2\4\12\0\1\4\4\0\3\4\1\176"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\4\4\12\0\1\177\4\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\200\4\0\6\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\1\201\1\4\1\202\3\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\52\0"+
    "\1\203\20\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\4\4\12\0\2\4\1\204\2\4\1\0\2\4\4\0"+
    "\5\4\27\0\1\205\43\0\2\4\12\0\1\4\4\0"+
    "\4\4\1\206\1\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\4\4\1\207\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\4\4"+
    "\1\210\1\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\211\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\212\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\5\4"+
    "\1\213\1\0\4\4\12\0\5\4\1\214\1\215\1\4"+
    "\4\0\5\4\3\0\1\216\65\0\17\70\1\141\1\142"+
    "\50\70\2\0\2\4\12\0\1\4\4\0\3\4\1\217"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\1\4\1\220\2\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\31\0\2\221\40\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\221\1\222\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\223\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\31\0\2\224\2\0\1\225\35\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\224\1\226\2\4\1\227"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\5\4\1\230\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\3\4\1\231\2\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\232\4\0\6\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\1\4\1\233\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\3\4\1\234\2\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\1\4\1\235\2\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\51\0\1\236\47\0\1\237\111\0"+
    "\1\240\70\0\1\241\21\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\1\4\1\242\3\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\5\4\1\243\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\244\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\245\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\246\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\247\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\27\0\1\250\43\0\2\4\12\0\1\4"+
    "\4\0\4\4\1\251\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\252\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\4\4\12\0\4\4\1\253\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\3\4\1\254\2\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\1\4\1\255\4\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\53\0\1\256\17\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\3\4\1\257"+
    "\1\4\1\0\2\4\4\0\5\4\16\0\1\260\54\0"+
    "\2\4\12\0\1\261\4\0\6\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\5\4\1\262"+
    "\1\263\1\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\5\4\1\264\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\4\4\1\265\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\3\4\1\266\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\3\4\1\267"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\25\0\1\270\45\0\2\4\12\0\1\4\4\0"+
    "\2\4\1\271\3\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\3\0\1\216\4\0\1\272\62\0"+
    "\2\4\12\0\1\4\4\0\4\4\1\273\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\4\4\1\274\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\52\0"+
    "\1\275\47\0\2\276\40\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\2\4\1\277\2\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\276\1\300\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\3\4\1\301\1\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\302\3\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\303"+
    "\5\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\1\4\1\304\3\4\2\0\2\4\12\0\1\4\4\0"+
    "\4\4\1\305\1\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\5\4\1\306\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\26\0\1\307\73\0\2\310\64\0\1\311"+
    "\73\0\2\312\40\0\2\4\12\0\1\4\4\0\3\4"+
    "\1\313\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\310\1\314\3\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\3\4\1\315"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\312"+
    "\1\316\3\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\6\4\1\0\3\4"+
    "\1\317\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\320\3\4\1\0\2\4\4\0\5\4\25\0"+
    "\1\321\45\0\2\4\12\0\1\4\4\0\2\4\1\322"+
    "\3\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\4\4\12\0\1\4\1\323\3\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\1\4\1\324"+
    "\4\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\2\4\1\325"+
    "\3\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\4\4\12\0\1\4\1\326\3\4\1\0\2\4\4\0"+
    "\5\4\27\0\1\327\43\0\2\4\12\0\1\4\4\0"+
    "\4\4\1\330\1\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\23\0\1\331\10\0\1\332\20\0"+
    "\2\333\1\334\13\0\2\4\12\0\1\4\4\0\1\335"+
    "\5\4\1\0\2\4\1\336\1\4\12\0\5\4\1\333"+
    "\1\337\1\340\4\0\5\4\24\0\1\341\46\0\2\4"+
    "\12\0\1\4\4\0\1\4\1\342\4\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\343\1\344\3\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\3\4\1\345\2\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\1\4\1\346\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\1\4\1\347"+
    "\3\4\1\0\2\4\4\0\5\4\33\0\1\350\37\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\1\4\1\351"+
    "\2\4\12\0\5\4\1\0\2\4\4\0\5\4\5\0"+
    "\1\352\65\0\2\4\12\0\1\4\4\0\5\4\1\353"+
    "\1\0\4\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\5\4\1\354\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\53\0"+
    "\1\355\74\0\1\356\13\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\3\4\1\357\1\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\5\4\1\0\1\4\1\360"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\2\4"+
    "\1\361\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\362\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\1\4\1\363\2\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\1\4\1\364\2\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\1\4\1\365\2\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\2\4"+
    "\1\366\3\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\34\0\1\367\60\0\1\370\121\0\2\371"+
    "\46\0\1\372\36\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\2\4\1\373\1\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\374\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\5\4\1\371\1\375\1\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\2\4\1\376\1\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\1\4\1\377"+
    "\4\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\u0100\4\0\6\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\51\0"+
    "\1\u0101\21\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\4\4\12\0\1\4\1\u0102\3\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\u0103\4\0\6\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\u0104\4\0\6\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\u0105\1\u0106\3\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\4\4\1\u0107\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\33\0\1\u0108\63\0\1\u0109"+
    "\2\0\2\u010a\64\0\1\u010b\2\0\2\u010c\111\0\1\u010d"+
    "\17\0\2\4\12\0\1\4\4\0\6\4\1\0\1\4"+
    "\1\u010e\2\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\3\4\1\u010f\2\4"+
    "\1\u010a\1\u0110\3\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\3\4\1\u0111"+
    "\2\4\1\u010c\1\u0112\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\3\4\1\u0113\1\4\1\0\2\4"+
    "\4\0\5\4\24\0\1\u0114\46\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\u0115\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\u0116\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\3\4\1\u0117\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\16\0\1\u0118\54\0\2\4\12\0"+
    "\1\u0119\4\0\6\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\u011a\1\u011b\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\3\4"+
    "\1\u011c\2\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\33\0\1\u011d\63\0\1\u011e\44\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\0\1\4\1\u011f\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\3\4\1\u0120\2\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\0\1\4\1\u0121\2\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\0\4\4\12\0\1\4"+
    "\1\u0122\3\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\0\4\4\12\0\4\4"+
    "\1\u0123\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\3\4\1\u0124\2\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\26\0\1\u0125\75\0"+
    "\1\u0126\66\0\2\u0127\40\0\2\4\12\0\1\4\4\0"+
    "\3\4\1\u0128\2\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\1\4\1\u0129\2\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\u0127\1\u012a\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\u012b\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\33\0\1\u012c\37\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\u012d\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\u012e\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\5\4\1\u012f\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\51\0\1\u0130\21\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\1\4\1\u0131"+
    "\3\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\1\4\1\u0132\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\51\0\1\u0133\44\0"+
    "\1\u0134\71\0\1\u0135\114\0\1\u0136\45\0\1\u0137\43\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u0138\3\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\2\4\1\u0139\3\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\3\4\1\u013a\2\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\2\4\1\u013b\2\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\4\4\1\u013c\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\27\0"+
    "\1\u013d\43\0\2\4\12\0\1\4\4\0\4\4\1\u013e"+
    "\1\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\4\4\1\u013f"+
    "\1\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\3\4\1\u0140"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\67\0\1\u0141\3\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\3\4\1\u0142\1\4\33\0\1\u0143\37\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\1\4\1\u0144\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\5\4\1\u0145"+
    "\1\u0146\1\4\4\0\5\4\54\0\1\u0147\65\0\1\u0148"+
    "\21\0\2\4\12\0\1\4\4\0\6\4\1\0\4\4"+
    "\12\0\4\4\1\u0149\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u014a\3\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u014b\3\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\1\4\1\u014c"+
    "\2\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\1\4\1\u014d\4\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u014e\3\4\1\0\2\4\4\0\5\4\27\0"+
    "\1\u014f\112\0\1\u0150\70\0\1\u0151\21\0\2\4\12\0"+
    "\1\4\4\0\4\4\1\u0152\1\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\1\4\1\u0153"+
    "\3\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\1\4\1\u0154"+
    "\3\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\u0155\4\0\6\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\55\0\2\u0156\14\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\5\4\1\u0156"+
    "\1\u0157\1\4\4\0\5\4\2\0\2\4\12\0\1\u0158"+
    "\4\0\6\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\u0159\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\6\4"+
    "\1\0\4\4\12\0\1\4\1\u015a\3\4\1\0\2\4"+
    "\4\0\5\4\33\0\1\u015b\61\0\1\u015c\73\0\1\u015d"+
    "\114\0\1\u015e\45\0\1\u015f\42\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\u0160\2\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\u0161\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\4\4\1\u0162\1\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\4\4\12\0\3\4\1\u0163\1\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\5\4\1\u0164\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\1\4\1\u0165\3\4\1\0"+
    "\2\4\4\0\5\4\53\0\1\u0166\17\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\3\4\1\u0167"+
    "\1\4\1\0\2\4\4\0\5\4\26\0\1\u0168\44\0"+
    "\2\4\12\0\1\4\4\0\3\4\1\u0169\2\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\2\4\1\u016a"+
    "\1\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u016b\3\4\1\0\2\4\4\0\5\4\25\0"+
    "\1\u016c\61\0\1\u016d\54\0\2\4\12\0\1\4\4\0"+
    "\2\4\1\u016e\3\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\u016f\4\0"+
    "\6\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\u0170"+
    "\1\u0171\3\4\12\0\5\4\1\0\2\4\4\0\5\4"+
    "\2\0\2\4\12\0\1\4\4\0\6\4\1\u0172\1\u0173"+
    "\3\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\4\4\1\u0174\1\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\35\0"+
    "\1\u0175\60\0\1\u0176\72\0\1\u0177\72\0\2\u0178\40\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\3\4\1\u0179"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\2\4\1\u017a\3\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\4\4\1\u017b\1\4\1\0\4\4"+
    "\12\0\5\4\1\0\2\4\4\0\5\4\2\0\2\4"+
    "\12\0\1\4\4\0\6\4\1\u0178\1\u017c\3\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\1\4\1\u017d\4\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\26\0\1\u017e\44\0"+
    "\2\4\12\0\1\4\4\0\3\4\1\u017f\2\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\27\0"+
    "\1\u0180\43\0\2\4\12\0\1\4\4\0\4\4\1\u0181"+
    "\1\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\3\4\1\u0182"+
    "\2\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\33\0\1\u0183\64\0\1\u0184\43\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\1\4\1\u0185\2\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\4\4\1\u0186\1\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\52\0\1\u0187\20\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\2\4\1\u0188\2\4\1\0\2\4\4\0\5\4\52\0"+
    "\1\u0189\20\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\4\4\12\0\2\4\1\u018a\2\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\2\4\1\u018b"+
    "\3\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\24\0\1\u018c\115\0\1\u018d\43\0\1\u018e\46\0"+
    "\2\4\12\0\1\4\4\0\1\4\1\u018f\4\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u0190\3\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\1\4\1\u0191\4\4\1\0"+
    "\4\4\12\0\5\4\1\0\2\4\4\0\5\4\25\0"+
    "\1\u0192\45\0\2\4\12\0\1\4\4\0\2\4\1\u0193"+
    "\3\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\2\4\1\u0194"+
    "\3\4\1\0\4\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\54\0\1\u0195\70\0\1\u0196\16\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\4\4\1\u0197"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\4\4\12\0\4\4\1\u0198\1\0"+
    "\2\4\4\0\5\4\53\0\1\u0199\17\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\3\4\1\u019a"+
    "\1\4\1\0\2\4\4\0\5\4\53\0\1\u019b\17\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\3\4\1\u019c\1\4\1\0\2\4\4\0\5\4\2\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\4\4\12\0"+
    "\1\4\1\u019d\3\4\1\0\2\4\4\0\5\4\33\0"+
    "\1\u019e\64\0\1\u019f\43\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\1\4\1\u01a0\2\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\4\4\1\u01a1\1\4\1\0\4\4\12\0\5\4\1\0"+
    "\2\4\4\0\5\4\26\0\1\u01a2\44\0\2\4\12\0"+
    "\1\4\4\0\3\4\1\u01a3\2\4\1\0\4\4\12\0"+
    "\5\4\1\0\2\4\4\0\5\4\2\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\1\4\1\u01a4"+
    "\3\4\1\0\2\4\4\0\5\4\33\0\1\u01a5\37\0"+
    "\2\4\12\0\1\4\4\0\6\4\1\0\1\4\1\u01a6"+
    "\2\4\12\0\5\4\1\0\2\4\4\0\5\4\33\0"+
    "\1\u01a7\37\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\1\4\1\u01a8\2\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\2\0\2\4\12\0\1\4\4\0\6\4\1\0"+
    "\1\4\1\u01a9\2\4\12\0\5\4\1\0\2\4\4\0"+
    "\5\4\55\0\2\u01aa\14\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\0\4\4\12\0\5\4\1\u01aa\1\u01ab\1\4"+
    "\4\0\5\4\2\0\2\4\12\0\1\4\4\0\1\4"+
    "\1\u01ac\4\4\1\0\4\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\54\0\1\u01ad\16\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\4\4\12\0\4\4\1\u01ae\1\0"+
    "\2\4\4\0\5\4\54\0\1\u01af\16\0\2\4\12\0"+
    "\1\4\4\0\6\4\1\0\4\4\12\0\4\4\1\u01b0"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\4\4\12\0\1\4\1\u01b1\3\4"+
    "\1\0\2\4\4\0\5\4\2\0\2\4\12\0\1\4"+
    "\4\0\6\4\1\0\4\4\12\0\5\4\1\u01b2\1\u01b3"+
    "\1\4\4\0\5\4\2\0\2\4\12\0\1\4\4\0"+
    "\6\4\1\u01b4\1\u01b5\3\4\12\0\5\4\1\0\2\4"+
    "\4\0\5\4\24\0\1\u01b6\46\0\2\4\12\0\1\4"+
    "\4\0\1\4\1\u01b7\4\4\1\0\4\4\12\0\5\4"+
    "\1\0\2\4\4\0\5\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\5\1\3\11\13\1\10\11"+
    "\4\1\4\11\3\1\4\0\1\11\1\0\3\11\3\0"+
    "\5\1\1\0\6\1\2\0\5\1\1\0\3\1\1\11"+
    "\1\1\1\0\1\11\2\1\1\0\7\1\1\11\1\0"+
    "\1\1\1\11\1\0\2\1\1\0\2\1\1\0\10\1"+
    "\4\0\10\1\1\0\5\1\1\0\10\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\2\0\10\1\4\0\6\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\2\0\10\1\4\0\6\1"+
    "\1\0\5\1\1\11\1\1\4\0\4\1\1\11\1\1"+
    "\1\0\6\1\1\11\2\1\2\0\10\1\1\0\1\11"+
    "\2\0\6\1\1\0\3\1\1\0\2\1\4\0\1\11"+
    "\1\0\6\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\6\1\3\0\4\1\1\0\3\1\1\11\2\1"+
    "\5\0\5\1\1\11\3\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\0\6\1\1\0\1\11\5\1"+
    "\1\11\4\1\1\11\4\0\6\1\1\0\1\1\1\0"+
    "\3\1\2\0\2\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\11\1\0\5\1\1\11\1\1\1\0\2\1\2\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\2\0\3\1"+
    "\1\0\2\1\2\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\2\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  	yyline = 1; 
	yychar = 1; 
   yycolumn=1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { int[] arregloError = new int[2];
   arregloError[0]= yyline;
   arregloError[1]= yycolumn+1;
   Datos.listaErrores.add(arregloError);
   System.err.println("Error lexico: "+yytext()+ " Linea:"+(yyline)+" Columna:"+(yycolumn));
   yycolumn++;
    //ErrorLexicoySintactico.listaerrores.add(new ErrorLexicoySintactico("Error Lexico", "El caracter :"+yytext()+"no pertenece al lenguaje",  (yyline), (yycolumn)));
     //ErrorLexicoySintactico.contadorerror++;
            } 
            // fall through
          case 81: break;
          case 2: 
            { /*Se ignoran*/
            } 
            // fall through
          case 82: break;
          case 3: 
            { return new Symbol(sym.identificador,yycolumn,yyline,yytext());
            } 
            // fall through
          case 83: break;
          case 4: 
            { return new Symbol(sym.digito,yycolumn,yyline,yytext());
            } 
            // fall through
          case 84: break;
          case 5: 
            { return new Symbol(sym.punto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 85: break;
          case 6: 
            { return new Symbol(sym.div,yycolumn,yyline,yytext());
            } 
            // fall through
          case 86: break;
          case 7: 
            { return new Symbol(sym.por,yycolumn,yyline,yytext());
            } 
            // fall through
          case 87: break;
          case 8: 
            { return new Symbol(sym.igual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 88: break;
          case 9: 
            { return new Symbol(sym.suma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 10: 
            { return new Symbol(sym.resta,yycolumn,yyline,yytext());
            } 
            // fall through
          case 90: break;
          case 11: 
            { return new Symbol(sym.disyuncion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 12: 
            { return new Symbol(sym.interrogacionA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 92: break;
          case 13: 
            { return new Symbol(sym.interrogacionC,yycolumn,yyline,yytext());
            } 
            // fall through
          case 93: break;
          case 14: 
            { return new Symbol(sym.coma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 15: 
            { return new Symbol(sym.colocho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 16: 
            { return new Symbol(sym.porcentaje,yycolumn,yyline,yytext());
            } 
            // fall through
          case 96: break;
          case 17: 
            { return new Symbol(sym.dospuntos,yycolumn,yyline,yytext());
            } 
            // fall through
          case 97: break;
          case 18: 
            { return new Symbol(sym.puntocoma,yycolumn,yyline,yytext());
            } 
            // fall through
          case 98: break;
          case 19: 
            { return new Symbol(sym.cparentecis,yycolumn,yyline,yytext());
            } 
            // fall through
          case 99: break;
          case 20: 
            { return new Symbol(sym.aparentecis,yycolumn,yyline,yytext());
            } 
            // fall through
          case 100: break;
          case 21: 
            { return new Symbol(sym.acorchete,yycolumn,yyline,yytext());
            } 
            // fall through
          case 101: break;
          case 22: 
            { return new Symbol(sym.ccorchete,yycolumn,yyline,yytext());
            } 
            // fall through
          case 102: break;
          case 23: 
            { return new Symbol(sym.cadena,yycolumn,yyline,yytext());
            } 
            // fall through
          case 103: break;
          case 24: 
            { return new Symbol(sym.comillasimple,yycolumn,yyline,yytext());
            } 
            // fall through
          case 104: break;
          case 25: 
            { return new Symbol(sym.comillasd,yycolumn,yyline,yytext());
            } 
            // fall through
          case 105: break;
          case 26: 
            { return new Symbol(sym.salto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 106: break;
          case 27: 
            { return new Symbol(sym.or,yycolumn,yyline,yytext());
            } 
            // fall through
          case 107: break;
          case 28: 
            { return new Symbol(sym.flecha,yycolumn,yyline,yytext());
            } 
            // fall through
          case 108: break;
          case 29: 
            { return new Symbol(sym.si,yycolumn,yyline,yytext());
            } 
            // fall through
          case 109: break;
          case 30: 
            { return new Symbol(sym.decimal,yycolumn,yyline,yytext());
            } 
            // fall through
          case 110: break;
          case 31: 
            { return new Symbol(sym.caracter,yycolumn,yyline,yytext());
            } 
            // fall through
          case 111: break;
          case 32: 
            { return new Symbol(sym.var_identificador,yycolumn,yyline,yytext());
            } 
            // fall through
          case 112: break;
          case 33: 
            { 
            } 
            // fall through
          case 113: break;
          case 34: 
            { return new Symbol(sym.not,yycolumn,yyline,yytext());
            } 
            // fall through
          case 114: break;
          case 35: 
            { return new Symbol(sym.con,yycolumn,yyline,yytext());
            } 
            // fall through
          case 115: break;
          case 36: 
            { return new Symbol(sym.and,yycolumn,yyline,yytext());
            } 
            // fall through
          case 116: break;
          case 37: 
            { return new Symbol(sym.modulo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 117: break;
          case 38: 
            { return new Symbol(sym.fin,yycolumn,yyline,yytext());
            } 
            // fall through
          case 118: break;
          case 39: 
            { return new Symbol(sym.para,yycolumn,yyline,yytext());
            } 
            // fall through
          case 119: break;
          case 40: 
            { return new Symbol(sym.o_si,yycolumn,yyline,yytext());
            } 
            // fall through
          case 120: break;
          case 41: 
            { return new Symbol(sym.como,yycolumn,yyline,yytext());
            } 
            // fall through
          case 121: break;
          case 42: 
            { return new Symbol(sym.menor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 122: break;
          case 43: 
            { return new Symbol(sym.mayor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 123: break;
          case 44: 
            { return new Symbol(sym.segun,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 45: 
            { return new Symbol(sym.falso,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 46: 
            { return new Symbol(sym.hacer,yycolumn,yyline,yytext());
            } 
            // fall through
          case 126: break;
          case 47: 
            { return new Symbol(sym.hasta,yycolumn,yyline,yytext());
            } 
            // fall through
          case 127: break;
          case 48: 
            { return new Symbol(sym.carAscii,yycolumn,yyline,yytext());
            } 
            // fall through
          case 128: break;
          case 49: 
            { return new Symbol(sym.tnumero,yycolumn,yyline,yytext());
            } 
            // fall through
          case 129: break;
          case 50: 
            { return new Symbol(sym.tcadena,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 51: 
            { return new Symbol(sym.inicio,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 52: 
            { return new Symbol(sym.metodo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 132: break;
          case 53: 
            { return new Symbol(sym.fin_si,yycolumn,yyline,yytext());
            } 
            // fall through
          case 133: break;
          case 54: 
            { return new Symbol(sym.repetir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 134: break;
          case 55: 
            { return new Symbol(sym.funcion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 135: break;
          case 56: 
            { return new Symbol(sym.tbooleano,yycolumn,yyline,yytext());
            } 
            // fall through
          case 136: break;
          case 57: 
            { return new Symbol(sym.potencia,yycolumn,yyline,yytext());
            } 
            // fall through
          case 137: break;
          case 58: 
            { return new Symbol(sym.enton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 138: break;
          case 59: 
            { return new Symbol(sym.esigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 139: break;
          case 60: 
            { return new Symbol(sym.ejecutar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 140: break;
          case 61: 
            { return new Symbol(sym.tcaracter,yycolumn,yyline,yytext());
            } 
            // fall through
          case 141: break;
          case 62: 
            { return new Symbol(sym.ingresar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 142: break;
          case 63: 
            { return new Symbol(sym.imprimir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 143: break;
          case 64: 
            { return new Symbol(sym.mientras,yycolumn,yyline,yytext());
            } 
            // fall through
          case 144: break;
          case 65: 
            { return new Symbol(sym.retornar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 145: break;
          case 66: 
            { return new Symbol(sym.fin_para,yycolumn,yyline,yytext());
            } 
            // fall through
          case 146: break;
          case 67: 
            { return new Symbol(sym.con_valor,yycolumn,yyline,yytext());
            } 
            // fall through
          case 147: break;
          case 68: 
            { return new Symbol(sym.fin_segun,yycolumn,yyline,yytext());
            } 
            // fall through
          case 148: break;
          case 69: 
            { return new Symbol(sym.verdadero,yycolumn,yyline,yytext());
            } 
            // fall through
          case 149: break;
          case 70: 
            { return new Symbol(sym.hasta_que,yycolumn,yyline,yytext());
            } 
            // fall through
          case 150: break;
          case 71: 
            { return new Symbol(sym.fin_metodo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 151: break;
          case 72: 
            { return new Symbol(sym.incremental,yycolumn,yyline,yytext());
            } 
            // fall through
          case 152: break;
          case 73: 
            { return new Symbol(sym.imprimir_nl,yycolumn,yyline,yytext());
            } 
            // fall through
          case 153: break;
          case 74: 
            { return new Symbol(sym.fin_funcion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 154: break;
          case 75: 
            { return new Symbol(sym.esdiferente,yycolumn,yyline,yytext());
            } 
            // fall through
          case 155: break;
          case 76: 
            { return new Symbol(sym.fin_mientras,yycolumn,yyline,yytext());
            } 
            // fall through
          case 156: break;
          case 77: 
            { return new Symbol(sym.menorigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 157: break;
          case 78: 
            { return new Symbol(sym.mayorigual,yycolumn,yyline,yytext());
            } 
            // fall through
          case 158: break;
          case 79: 
            { return new Symbol(sym.con_parametros,yycolumn,yyline,yytext());
            } 
            // fall through
          case 159: break;
          case 80: 
            { return new Symbol(sym.de_lo_contrario,yycolumn,yyline,yytext());
            } 
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
